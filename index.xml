<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c0nrad&#39;s blog</title>
    <link>https://blog.c0nrad.io/</link>
    <description>c0nrad&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Jun 2020 14:37:31 -0400</lastBuildDate>
    
    <atom:link href="https://blog.c0nrad.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Electron Wavefunctions for Hydrogen Part 2</title>
      <link>https://blog.c0nrad.io/posts/hydrogen-pt2/</link>
      <pubDate>Sat, 20 Jun 2020 14:37:31 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/hydrogen-pt2/</guid>
      <description>&lt;p&gt;Part 2 of calculating the electron wavefunctions for hydrogen.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.c0nrad.io/hydrogen/&#34;&gt;View Visualization&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;
&lt;p&gt;It&amp;rsquo;s done! (Technically it was done a month ago, I just never wrote about it).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/Physics/comments/gt1set/interactive_electron_orbitals_of_hydrogen/&#34;&gt;https://www.reddit.com/r/Physics/comments/gt1set/interactive_electron_orbitals_of_hydrogen/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source code can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/c0nrad/hydrogen&#34;&gt;https://github.com/c0nrad/hydrogen&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;technical-implementation-notes&#34;&gt;Technical Implementation Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I ended up just sampling the wave functions, and saving it to a JSON file for the web component to read.
** &lt;a href=&#34;https://github.com/c0nrad/hydrogen/blob/master/hydrogen.cpp#L199&#34;&gt;https://github.com/c0nrad/hydrogen/blob/master/hydrogen.cpp#L199&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Originally each point was a three.js sphere, but that ran way to slow, so I got to try vertex/fragement shaders for the first time! (using a THREE.cloud)
** &lt;a href=&#34;https://github.com/c0nrad/hydrogen/blob/master/docs/index.html#L44&#34;&gt;https://github.com/c0nrad/hydrogen/blob/master/docs/index.html#L44&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The little control panel is actually pretty neat. Just a few lines of code
** &lt;a href=&#34;https://github.com/c0nrad/hydrogen/blob/master/docs/app.ts#L24&#34;&gt;https://github.com/c0nrad/hydrogen/blob/master/docs/app.ts#L24&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall super happy with it!&lt;/p&gt;
&lt;h2 id=&#34;future&#34;&gt;Future&lt;/h2&gt;
&lt;p&gt;Done with this project, but already onto the next! Stay tuned!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Reflections on 6 months solo SaaS startup</title>
      <link>https://blog.c0nrad.io/posts/reflections-6months/</link>
      <pubDate>Tue, 16 Jun 2020 07:59:02 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/reflections-6months/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s crazy to think my startup is already over 6 months old. This post is some informal reflections on that period.&lt;/p&gt;
&lt;p&gt;To set the context for people who are not me, this was my first foray into startups. The startup is pretty lean (it&amp;rsquo;s a saas security startup), only on the verge of profitability. Single digit customers.&lt;/p&gt;
&lt;p&gt;A lot of this may sound complain-y, they&amp;rsquo;re definitely first world problems. But they are things I wish I had fully internalized.&lt;/p&gt;
&lt;h2 id=&#34;nobody-cares&#34;&gt;Nobody cares&lt;/h2&gt;
&lt;p&gt;It sounds very negative, and I don&amp;rsquo;t mean it in a bad way. But I think it applies to many aspects of building the startup.&lt;/p&gt;
&lt;p&gt;People want a tool that solves the problem. No one cares about the effort involved in creating little features. No one cares about the story, no one cares how it works. They just want to be re-assured it will work, so they can focus on their 1000 other problems.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s nothing wrong with that, it&amp;rsquo;s just important to remember.&lt;/p&gt;
&lt;p&gt;The fact that no one cares also has positive aspects! I was worried about my two hours of planned downtime when I was doing a large migration. Literally no one cared. I think my startup could have been down for a few days, and no one would of cared that much. Unfortunately or fortunately I focused a lot on reliability (which was kind of wasted effort now that I realize it).&lt;/p&gt;
&lt;h2 id=&#34;careful-with-free-trials&#34;&gt;Careful with free trials&lt;/h2&gt;
&lt;p&gt;I thought it would be cool if I had a free sandbox plan. Let people kick the tires. When they see the amazing value they&amp;rsquo;ll upgrade!&lt;/p&gt;
&lt;p&gt;Not so much.&lt;/p&gt;
&lt;p&gt;The free sandbox offering attracted over 1000 businesses. Super neat! The only problem was&amp;hellip; no one upgraded to paying plans. So I&amp;rsquo;m supporting 1000 customers on my platform. Goodbye life savings (kidding, but it does cost non-trivial money).&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t want to dive into the specifics of content-security-policy report-uri, but having a sandbox account created weird dynamics/incentives. My startup focuses on making this specific security tool easier. And I charge based on &amp;ldquo;usage&amp;rdquo; of the feature. But by making this security tool easier, there was less need for usage. So every feature I included made the Sandbox account a better solution, no need to upgrade for more usage.&lt;/p&gt;
&lt;p&gt;So I had 1000+ people using the platform, and they had no incentive to upgrade. And every feature I released solidified that SANDBOX was all your need. I could of limited key features, but I hate it when other companies do that, and it wasn&amp;rsquo;t obvious to me what features to limit. It also feels dis-honest. Instead I&amp;rsquo;d rather focus on making the best product. So instead I went with a free trial period and made the choice to discontinue SANDBOX accounts. (If you were a sandbox user of Csper, against I apologize, but it had to be done).&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s way less usage, but now people pay for the service. And I&amp;rsquo;m not fronting the bill for &amp;gt;1000 customers (which I can not do for long since i&amp;rsquo;m self bootstrapped).&lt;/p&gt;
&lt;h2 id=&#34;seo--pipeline--ads&#34;&gt;SEO / Pipeline / Ads&lt;/h2&gt;
&lt;p&gt;It sounds so obvious now, but wasn&amp;rsquo;t fully fully internalized when I started.&lt;/p&gt;
&lt;p&gt;People aren&amp;rsquo;t just going to &amp;ldquo;stumble&amp;rdquo; onto your product.&lt;/p&gt;
&lt;p&gt;When Csper was released, I made sure it could handle a lot of load. I was worried that it would spread like wildfire. So I made sure everything could scale. Autoscaling k8s, autoscaling database. I setup observability on everything to debug issues, tracing, logging, monitoring dashboards, etc.&lt;/p&gt;
&lt;p&gt;Long story short, almost no one showed up.&lt;/p&gt;
&lt;p&gt;SEO / Marketing are the name of the game. (not an endorsement), but getting setup with SEM rush to track my SEO (specifically content marketing).&lt;/p&gt;
&lt;h2 id=&#34;people-like-open-source-a-lot&#34;&gt;People like &amp;ldquo;open source&amp;rdquo;&amp;hellip; a lot&lt;/h2&gt;
&lt;p&gt;I built a similar open source product about 5-6 years ago. It&amp;rsquo;s crazy how fast people will refer an open source product compared to a paid product.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a huge marketing advantage I never really considered. The product today is SIGNIFICANTLY better than the 5-6 year old product, yet people still share links to my old defunct product.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;open source&amp;rdquo; seems to trump reliability. I&amp;rsquo;m probably the same way, so I can&amp;rsquo;t complain too much. Just interesting to watch it happen.&lt;/p&gt;
&lt;p&gt;I was very tempted to shift to &amp;ldquo;open source&amp;rdquo; and then have a paid plan. But, never did.&lt;/p&gt;
&lt;h2 id=&#34;on-the-plus-working-for-yourself-is-amazing&#34;&gt;On the plus, working for yourself is&amp;hellip; amazing&lt;/h2&gt;
&lt;p&gt;I loved all my previous jobs. For better or worse, work is usually the center of my life.&lt;/p&gt;
&lt;p&gt;But, there&amp;rsquo;s something about waking up in the morning, making yourself some coffee, and pouring your heart into something you own. For awhile I would shoot out of bed at 6am (without an alarm) because I was so excited to get to work. I&amp;rsquo;d work for 12 hours, and then do it all again, and I was excited about it.&lt;/p&gt;
&lt;p&gt;And it&amp;rsquo;s so nice knowing where everything is. At some point I had to do a decent sized migration across 125 files. Knowing how everything works and where it is makes every project nice and fun. No hidden side effects.&lt;/p&gt;
&lt;h2 id=&#34;delayed-reward&#34;&gt;Delayed reward&lt;/h2&gt;
&lt;p&gt;More of a psychological thing. But it&amp;rsquo;s hard to remove the feeling of working hard and getting a reward.&lt;/p&gt;
&lt;p&gt;I did two large migrations on Csper. One was a re-write of &amp;ldquo;projects&amp;rdquo; and &amp;ldquo;organizations&amp;rdquo; to consolidate billing and other stuff. It was like 4500 lines of code over 125 files. Then doing all the data base migrations and testing&amp;hellip; It was a lot of work to make sure it all worked correctly. And it was a bit stressful.&lt;/p&gt;
&lt;p&gt;After the release went smoothly, it was a hurah! But, it&amp;rsquo;s not like I would instantly get any new customers.&lt;/p&gt;
&lt;p&gt;After the migration is done, I&amp;rsquo;m still just staring at my computer, nothing has changed.&lt;/p&gt;
&lt;p&gt;Being generous, let&amp;rsquo;s say the different of consolidated billings increased conversions by 5%, I&amp;rsquo;d have to wait awhile to see that impact. I don&amp;rsquo;t think I even got a new customer that week.&lt;/p&gt;
&lt;p&gt;It can be dis-heartening when you work super hard, but then nothing happens. It was a mental barrier to separate that.&lt;/p&gt;
&lt;h2 id=&#34;its-a-bit-of-a-rollercoaster&#34;&gt;It&amp;rsquo;s a bit of a rollercoaster&lt;/h2&gt;
&lt;p&gt;It seems like when things go bad, a lot of things go bad at once. A customer will leave, the firefox extension store will remove my addon, some feature will be acting up, and your competitors just signed a big deal.&lt;/p&gt;
&lt;p&gt;That emotional buffer is important. I should have remembered to leave some room in my emotional tank to take hits. Wearing thin and then taking a couple of hits is not fun.&lt;/p&gt;
&lt;p&gt;In the movies/books/interwebs every startup is successful. When you see people working hard, it&amp;rsquo;s like &amp;ldquo;no duh, the payoff and reward will be huge!&amp;rdquo; But in real life you have to face that most likely it will fail. When do you cut your losses? When you take a number of hits at once, those questions go to the front of your mind.&lt;/p&gt;
&lt;h2 id=&#34;lonely&#34;&gt;Lonely&lt;/h2&gt;
&lt;p&gt;Probably the biggest downside to this adventure so far is not working on a team. I miss is celebrating wins. Giving yourself a high five when a customer signs up is cool, but experiences are better shared with someone.&lt;/p&gt;
&lt;p&gt;My girlfriend and I recently worked out a system where I get a twinkie when I get a new customer. Which is very nice. We celebrate the wins, but there&amp;rsquo;s something about a group working towards a goal and achieving that goal.&lt;/p&gt;
&lt;h2 id=&#34;bug-fixes-are-meh&#34;&gt;Bug Fixes are&amp;hellip; meh&lt;/h2&gt;
&lt;p&gt;Previously as an engineer I would hate publishing bugs in my code. Where&amp;rsquo;s the attention to craft!&lt;/p&gt;
&lt;p&gt;But now being honest about my todo list, most bugs don&amp;rsquo;t matter &lt;em&gt;that&lt;/em&gt; much. The chance of defering a customer from paying because of a bug here and there is pretty small. (I mean, it depends on the bug, and you should try super hard not to have bugs. It&amp;rsquo;s no excuse for being sloppy).&lt;/p&gt;
&lt;p&gt;But, I have a bug tracker pretty full of little bugs here and there. But when I assign dollar values to them, SEO/marketing is almost always more important than fixing a bug.&lt;/p&gt;
&lt;p&gt;If an article attracts two new customers, and a weird edge case defers one customer, by the numbers it&amp;rsquo;s better to focus on the article. When you&amp;rsquo;re a non-bootstrapped solo startup, you have to run towards the money. You also can&amp;rsquo;t make everyone happy.&lt;/p&gt;
&lt;h2 id=&#34;others&#34;&gt;Others&lt;/h2&gt;
&lt;p&gt;Some things that I already knew, and thankful that I did:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Staging/prod. Staging saved my butt a number of times. And made things way less stressful when doing big changes. Worth every penny.&lt;/li&gt;
&lt;li&gt;k8s on gke was pretty nice. it took a day or two to get my infra setup, and then I never really thought about it. it just scales here and there.&lt;/li&gt;
&lt;li&gt;Single command deploys, and lots of makefiles. Any command that could be useful later I store in a makefile. i never want to think about things.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Things that were surprisingly frustrating:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Browser extension review processes!
** Chrome takes weeks and weeks to review extensions
** Firefox is super picky about making sure that they can compile your code and it exactly matches what&amp;rsquo;s in the app store&lt;/li&gt;
&lt;li&gt;SaaS trails/charges. You rely on a number of services for your startup, and they start to add up. Some companies are also very sneaky about not emailing you before they charge your credit card. There was one company that charged me for 6 months without sending a single email.
** I should of been reviewing my credit card statements, but when you&amp;rsquo;re already working long days, it&amp;rsquo;s near the bottom of the chopping block. At the end of the day, writing another article for SEO is more important than checking a hypothetical&lt;/li&gt;
&lt;li&gt;Kind of weird point, but I tried advertising on linkedin/google/facebook/twitter. I left with a very negative view of all the platforms and try very hard not to read from them anymore. Everyone knows that those platforms are about advertising, but it wasn&amp;rsquo;t until I was trying to shove my agenda down other peoples throats did I realize how disgusting it was. Now I see all the other businesses doing what I was doing, pushing their own agenda. I want no part of anyone else&amp;rsquo;s agenda. I was probably doing ads wrong, but I saw no drop in signups after I stopped them. I&amp;rsquo;m going to fully focus on SEO instead. I feel good about that, when people have a problem, they&amp;rsquo;ll google for it, and my company will be there.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Overall, building Csper has been a interesting experience. Maybe less interesting than I would have hoped. At the end of the day I&amp;rsquo;m just shuffling bits and trying to make people happy. But definitely no regrets so far.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Electron Wavefunctions for Hydrogen Part 1</title>
      <link>https://blog.c0nrad.io/posts/hydrogen-pt1/</link>
      <pubDate>Thu, 28 May 2020 10:22:30 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/hydrogen-pt1/</guid>
      <description>&lt;p&gt;The code/math behind calculating the electron wavefunctions for hydrogen.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;I never thought I would have so much fun programming in C++ again. I can&amp;rsquo;t believe how much I miss operator overloading and templates.&lt;/p&gt;
&lt;p&gt;Being able to write &lt;code&gt;ex c = a + b;&lt;/code&gt; where a and b are custom types is so nice.&lt;/p&gt;
&lt;p&gt;The goal of my next project is creating an interactive display for the electron wavefunctions of hydrogen.&lt;/p&gt;
&lt;p&gt;I decided to do this project using &lt;a href=&#34;https://blog.c0nrad.io/posts/ginac-on-macos&#34;&gt;GiNaC&lt;/a&gt;, and the visualizations will be in three.js (webGL).&lt;/p&gt;
&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;
&lt;p&gt;So far I think I have most of the math done:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/c0nrad/hydrogen/blob/3f4287907ba50e661e1f77d419c4a6da0c77fb96/hydrogen.cpp&#34;&gt;Hydrogen Wave Function Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not 100% sure on the correctness of the final step (HydrogrenWaveFunction), I probably won&amp;rsquo;t know till I plot them.&lt;/p&gt;
&lt;p&gt;But, holy crap GiNaC is cool. I love that I can symbolically create expressions. It makes verifying them much easier. And I can take the derivative of expressions!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/hydrogen-output.png&#34; alt=&#34;hydrogen&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;h3 id=&#34;schrödinger-equation-in-spherical-coordinates&#34;&gt;Schrödinger Equation in Spherical Coordinates&lt;/h3&gt;
&lt;p&gt;To find the wavefunctions of hydrogen, you start at the same place you always start at&amp;hellip; the Schrödinger Equation!&lt;/p&gt;
&lt;p&gt;$$ i \hbar \frac{\partial \Psi}{\partial t} = - \frac{\hbar^2}{2m} \Delta^{2} \Psi + V \Psi $$&lt;/p&gt;
&lt;p&gt;For all the examples I&amp;rsquo;ve been learning about so far, we&amp;rsquo;ve been using X,Y,Z as the coordinate system. But for hydrogen (and other realistic systems), it makes sense to move to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Spherical_coordinate_system&#34;&gt;spherical coordinate system&lt;/a&gt;. This is because most real world potentials are proportional to a radius around some origin.&lt;/p&gt;
&lt;p&gt;Unfortunately the equation (time-independent Schrödinger Equation in spherical coordinates) gets a bit more complex:&lt;/p&gt;
&lt;p&gt;$$ - \frac{\hbar^2}{2m} [ \frac{1}{r^2}  \frac{ \partial }{\partial r} ( r^2 \frac{\partial \psi}{\partial r}) +   \frac{1}{r^2 \sin{\theta}} \frac{\partial}{\partial \theta} ( \sin{\theta} \frac{\partial \psi}{\partial \theta})    +     \frac{1}{r^2 \sin^2{\theta}} ( \frac{\partial^2 \psi}{\partial \phi^2}) ] + V \psi = E \psi $$&lt;/p&gt;
&lt;h3 id=&#34;hydrogen-solution&#34;&gt;Hydrogen Solution&lt;/h3&gt;
&lt;p&gt;In Hydrogen there&amp;rsquo;s one proton and one electron. The proton is significantly more massive than the electron. We just pin the proton at the middle and assume the electron floats around. Using Coulomb&amp;rsquo;s law, we can state that the potential energy of our system will be:&lt;/p&gt;
&lt;p&gt;$$ V(r) = -4 \frac{e^2}{4 \pi \epsilon_0 } \frac{1}{r} $$&lt;/p&gt;
&lt;p&gt;If you do all the math (and by &amp;lsquo;do the math&amp;rsquo;, I mean nod along in your text book while crying softly to yourself since you don&amp;rsquo;t really understand what&amp;rsquo;s going on), you&amp;rsquo;ll eventually find that the solutions for a bound electron to hydrogen to be:&lt;/p&gt;
&lt;p&gt;$$ \psi_{nlm}(r, \theta, \phi) = \sqrt{ \left(\frac{2}{na}\right)^3  \frac{(n-l-1)!}{2n (n+l)!}} e^{-r/na} \left( \frac{2r}{na}\right)^{l} \left[L_{n-l-1}^{2l+1}(2r/na)\right] Y_l^m(\theta, \phi) $$&lt;/p&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\( L_{q}^{p} \) is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Laguerre_polynomials&#34;&gt;Associated Laguerre Polynomial&lt;/a&gt;, defined by:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ L_q^p(x) = \frac{x^{-p} e^x}{q!}\left(\frac{d}{dx}\right)^d (e^{-x}x^{p+q}) $$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;\( a \) is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Bohr_radius&#34;&gt;Bohr Radius&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;\( Y_l^m(\theta, \phi) \) is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Spherical_harmonics&#34;&gt;spherical harmonics&lt;/a&gt;, defined by:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ Y_l^m(\theta, \phi) = \sqrt{ \frac{(2l+1)}{4 \pi} \frac{(l-m)!}{(l+m)!}} e^{i m \phi} * P^m_l(\cos{\theta}) $$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\( P^m_l(x) \) is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Associated_Legendre_polynomials&#34;&gt;associated Legendre Polynomials&lt;/a&gt;, defined by:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ P^m_l(x) = (-1)^m (1-x^2)^{m/2} \left( \frac{d}{dx} \right)^m P_l(x) $$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\( P_l(x) \) is the Legendre Polynomial, generated by the Rodrigues Formula:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ P_l(x) = \frac{1}{2^l l!} \left(\frac{d}{dx}\right)^l (x^2 - 1)^l $$&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;n&lt;/th&gt;&lt;th&gt;l&lt;/th&gt;&lt;th&gt;m&lt;/th&gt;&lt;th&gt; $$  \psi_{nlm}(r, \theta, \phi) $$ &lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt; $$ \frac{ \exp(-\frac{r}{a}) \sqrt{\frac{1}{a^{3}}}}{\sqrt{\pi}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt; $$ \frac{1}{4} \frac{ \sqrt{8} \sqrt{\frac{1}{a^{3}}} \exp(-\frac{1}{2} \frac{r}{a})}{\sqrt{\pi}}-\frac{1}{16} \frac{ \sqrt{8} \sqrt{\frac{1}{a^{3}}} \exp(-\frac{1}{2} \frac{r}{a}) r}{ \sqrt{\pi} a} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt; $$ \frac{1}{48} \frac{ \cos(\theta) \sqrt{24} \sqrt{3} r \exp(-\frac{1}{2} \frac{r}{a}) \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt; $$ -\frac{1}{24} \frac{ \sqrt{24} \sqrt{\frac{3}{8}} \exp(i \phi-\frac{1}{2} \frac{r}{a}) r \sqrt{1-\cos(\theta)^{2}} \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt; $$ -\frac{10}{729} \frac{ \exp(-\frac{1}{3} \frac{r}{a}) \sqrt{243} r \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a}+\frac{10}{243} \frac{ \exp(-\frac{1}{3} \frac{r}{a}) \sqrt{243} \sqrt{\frac{1}{a^{3}}}}{\sqrt{\pi}}+\frac{2}{2187} \frac{ \exp(-\frac{1}{3} \frac{r}{a}) \sqrt{243} r^{2} \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a^{2}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt; $$ \frac{2}{729} \frac{ \cos(\theta) \sqrt{3} \sqrt{\frac{1}{a^{3}}} r \sqrt{486} \exp(-\frac{1}{3} \frac{r}{a})}{ \sqrt{\pi} a}-\frac{1}{2187} \frac{ \cos(\theta) \sqrt{3} \sqrt{\frac{1}{a^{3}}} r^{2} \sqrt{486} \exp(-\frac{1}{3} \frac{r}{a})}{ \sqrt{\pi} a^{2}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt; $$ -\frac{4}{729} \frac{ \sqrt{\frac{1}{a^{3}}} \sqrt{\frac{3}{8}} \exp(i \phi-\frac{1}{3} \frac{r}{a}) r \sqrt{1-\cos(\theta)^{2}} \sqrt{486}}{ a \sqrt{\pi}}+\frac{2}{2187} \frac{ \sqrt{\frac{1}{a^{3}}} \sqrt{\frac{3}{8}} \exp(i \phi-\frac{1}{3} \frac{r}{a}) r^{2} \sqrt{1-\cos(\theta)^{2}} \sqrt{486}}{ a^{2} \sqrt{\pi}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt; $$ -\frac{1}{21870} \frac{ \sqrt{2430} \exp(-\frac{1}{3} \frac{r}{a}) r^{2} \sqrt{5} \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a^{2}}+\frac{1}{7290} \frac{ \cos(\theta)^{2} \sqrt{2430} \exp(-\frac{1}{3} \frac{r}{a}) r^{2} \sqrt{5} \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a^{2}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt; $$ -\frac{2}{3645} \frac{ \cos(\theta) \sqrt{2430} \sqrt{\frac{1}{a^{3}}} \exp(-\frac{1}{3} \frac{r}{a}+i \phi) r^{2} \sqrt{\frac{5}{24}} \sqrt{1-\cos(\theta)^{2}}}{ \sqrt{\pi} a^{2}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt; $$ -\frac{2}{3645} \frac{ \cos(\theta)^{2} \sqrt{2430} \exp(-\frac{1}{3} \frac{r}{a}+{(2 i)} \phi) r^{2} \sqrt{\frac{5}{96}} \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a^{2}}+\frac{2}{3645} \frac{ \sqrt{2430} \exp(-\frac{1}{3} \frac{r}{a}+{(2 i)} \phi) r^{2} \sqrt{\frac{5}{96}} \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a^{2}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id=&#34;building-functions-by-differentiation&#34;&gt;Building Functions by Differentiation&lt;/h3&gt;
&lt;p&gt;What&amp;rsquo;s super cool about a number of those functions is that they&amp;rsquo;re built using an arbitrary differentiation. \( \left(\frac{d}{dx}\right)^l \).&lt;/p&gt;
&lt;p&gt;This is the real reason I chose to use GiNaCs, so I could perform these derivatives symbolically.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ex RodriguesFormula(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;symbol &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; l)
{
    GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ex diffed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;pow(GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;pow(x, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, l);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;normal(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;pow(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, l) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;factorial(l)) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;diff(diffed, x, l));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;legendre-polynomials&#34;&gt;Legendre Polynomials&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Legendre_polynomials&#34;&gt;Legendre polynomials&lt;/a&gt; (and everything built up from it) are cool because they are orthogonal.&lt;/p&gt;
&lt;p&gt;This means they can be used to form a basis, and when combining these functions together, they don&amp;rsquo;t interfere with each other.&lt;/p&gt;
&lt;p&gt;This is particularly useful when constructing fourier series, since you can use a set of orthogonal vectors to describe any function. (Commonly Cos / Sin are used, which are also orthogonal. If you look at a chart of Cos/Sin from -pi to pi, and multiply them together and add up the areas, you can convince yourself they equal zero).&lt;/p&gt;
&lt;h3 id=&#34;what-are-n-l-and-m&#34;&gt;What are n, l, and m?&lt;/h3&gt;
&lt;p&gt;The easiest one to describe is &amp;ldquo;n&amp;rdquo;, the &lt;code&gt;principal quantum number&lt;/code&gt;. This is the energy state of the wave function. Any wave function with a similar n has the same energy.&lt;/p&gt;
&lt;p&gt;The higher the n, the further away the electron is from the nucleus (the proton).&lt;/p&gt;
&lt;p&gt;The energy is given by the Bohr formula (which is impressively simple given the wavefunctions we were looking at)&lt;/p&gt;
&lt;p&gt;$$ E_n = \frac{E_1}{n^2} $$&lt;/p&gt;
&lt;p&gt;\( E_1 = -13.6 eV\), which means that it requires -13.6eV to push an electron completely away from a proton.&lt;/p&gt;
&lt;p&gt;l is the &lt;code&gt;Azimuthal Quantum Number&lt;/code&gt;, and m is the &lt;code&gt;Magnetic Quantum Number&lt;/code&gt;, they both related to the angular momentum of the electron. I might talk more about them in a future blog post.&lt;/p&gt;
&lt;h2 id=&#34;up-next&#34;&gt;Up Next&lt;/h2&gt;
&lt;p&gt;Now that all the math is in &lt;a href=&#34;https://github.com/c0nrad/hydrogen/blob/3f4287907ba50e661e1f77d419c4a6da0c77fb96/hydrogen.cpp&#34;&gt;code&lt;/a&gt; up next is to start plotting the results of these functions. I&amp;rsquo;m not sure how exactly I want to tackle it, but I think I&amp;rsquo;ll just random sample a number of points, decide to keep them based off their probability, wait till I get a few hundred each and then just plot those points in three.js.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GiNaC on Macos</title>
      <link>https://blog.c0nrad.io/posts/ginac-on-macos/</link>
      <pubDate>Wed, 27 May 2020 18:43:40 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/ginac-on-macos/</guid>
      <description>&lt;p&gt;A quick guide on getting started with GiNaC on macos.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;I decided to start my next project which will be calculating the &amp;ldquo;orbitals&amp;rdquo; of electrons in Hydrogen.&lt;/p&gt;
&lt;p&gt;I was going to write it in Go, but calculating the Rodrigues formula and the associated Legendre Functions require performing an arbitrary polynomial derivative, and I couldn&amp;rsquo;t find a good symbolic differentiator in GoLang. (And I&amp;rsquo;d like to see the results, not use a numerical differentiator).&lt;/p&gt;
&lt;p&gt;Turns out there&amp;rsquo;s a good library in C/C++ that some particle physicists use called &lt;a href=&#34;https://www.ginac.de/tutorial/#Introduction&#34;&gt;GiNaCs&lt;/a&gt;. It has nice clean docs, and one of the starter examples was generating the &lt;a href=&#34;https://en.wikipedia.org/wiki/Hermite_polynomials&#34;&gt;hermite polynomials&lt;/a&gt;! (Which is similar to what I needed to do! (In that it&amp;rsquo;s built off of differentiating \( e^{-x} \) some amount of times.)&lt;/p&gt;
&lt;h2 id=&#34;installing-ginacs&#34;&gt;Installing GiNaCs&lt;/h2&gt;
&lt;p&gt;On Macos it&amp;rsquo;s extremely easy! First you need to install &lt;a href=&#34;https://www.ginac.de/CLN/&#34;&gt;CLN&lt;/a&gt; (Class Library for Numbers), and then GiNaC. But they&amp;rsquo;re both in homebrew!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install cln ginac
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s possible you&amp;rsquo;ll need to install xcode if you haven&amp;rsquo;t already. This is so gcc(clang) is setup. To install it you just run &lt;code&gt;xcode-select --install&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-vscode&#34;&gt;Setting up VSCode&lt;/h2&gt;
&lt;p&gt;Then I setup my IDE (I use Visual Code):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set the C++ Standard to gnu++17. The commit messages within GiNaCs made it look like they&amp;rsquo;re working on c++20 so I assume they&amp;rsquo;re already on 17.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/c-standard.png&#34; alt=&#34;c-standard&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Set the include paths&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/c-include-path.png&#34; alt=&#34;c-include-path&#34;&gt;&lt;/p&gt;
&lt;p&gt;To find the exact version for your include paths, open up terminal, and &lt;code&gt;cd&lt;/code&gt; into the package directories (/usr/local/Cellar) to find the correct version numbers.&lt;/p&gt;
&lt;p&gt;After this intelitype should work.&lt;/p&gt;
&lt;h2 id=&#34;build-the-example&#34;&gt;Build the example&lt;/h2&gt;
&lt;p&gt;I had to modify the default example a little bit. It was complaining about not knowing which version of &lt;code&gt;pow&lt;/code&gt; to use. So I just removed the namespaces (which I wanted to do anyways as I&amp;rsquo;m getting back into C++ and remember what belongs to what package)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;ginac/ginac.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ex HermitePoly(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;symbol &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n)
{
    GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ex HKer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exp(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pow(x, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;normal(GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;pow(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;diff(HKer, x, n) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; HKer);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;symbol z(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;z&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
        std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;H_&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(z) == &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; HermitePoly(z, i) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To build I ran:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;g++ -std&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gnu++17 hermitePoly.cpp -o hermitePoly -L/usr/local/Cellar/ginac/1.7.9/lib -lginac -L/usr/local/Cellar/cln/1.3.6/lib -lcln
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, you&amp;rsquo;ll need to know your exact package versions. For me it was ginac=1.7.9 and cln=1.3.6 on May 27th, 2020.&lt;/p&gt;
&lt;p&gt;And then to execute your hard work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./hermitePoly
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I keep everything in a Makefile, so really I just type &amp;ldquo;make&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Makefile&#34; data-lang=&#34;Makefile&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; build 
	./hermitePoly

&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; 
	g++ -std&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gnu++17 hermitePoly.cpp -o hermitePoly -L/usr/local/Cellar/ginac/1.7.9/lib -lginac -L/usr/local/Cellar/cln/1.3.6/lib -lcln
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I can&amp;rsquo;t believe how easy it was, I&amp;rsquo;m excited to start calculating the orbitals!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quantum Infinite Well</title>
      <link>https://blog.c0nrad.io/posts/quantum-infinite-well/</link>
      <pubDate>Fri, 22 May 2020 12:30:26 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/quantum-infinite-well/</guid>
      <description>&lt;p&gt;Calculating the stationary states of an electron in a quantum infinite well.&lt;/p&gt;
&lt;iframe class=&#34;full-width&#34; src=&#34;https://qsimp.github.io/qsimp/examples/infinite_well/&#34; style=&#34;border: 1px solid; height: 800px&#34; &gt;&lt;/iframe&gt;
&lt;br&gt;
(Or visit URL: &lt;a href=&#34;https://qsimp.github.io/qsimp/examples/infinite_well/&#34;&gt;https://qsimp.github.io/qsimp/examples/infinite_well/&lt;/a&gt;)
&lt;h2 id=&#34;particle-in-a-well&#34;&gt;Particle in a well&lt;/h2&gt;
&lt;p&gt;The above charts are calculations for a hypothetical electron stuck in a well.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a 1-dimensional well, and sides of the well are infinite in height.&lt;/p&gt;
&lt;p&gt;This model is kind of similar to a standard bouncy ball being placed into a hole, and we watch it slide back and fourth, unable to ever escape the hole. (And the hole has no friction).&lt;/p&gt;
&lt;p&gt;But there&amp;rsquo;s a couple of startling differences between the bouncy ball and particle in the well.&lt;/p&gt;
&lt;p&gt;If we imagine the bouncy ball in the well, it can have pretty much any velocity as it bounces back and forth between the sides of the walls. It could be moving at 1m/s, 10m/s, .00001 m/s. Anything works.&lt;/p&gt;
&lt;p&gt;But for our hypothetical particle, this is not possible. Not all &amp;ldquo;velocities&amp;rdquo; (or more correctly, energies) are allowed. The particle must be in a particular state, or a linear combination of states (more on linear combinations later).&lt;/p&gt;
&lt;p&gt;The hypothetical particle also can&amp;rsquo;t &amp;ldquo;sit still&amp;rdquo;. It must be at one of the energy states (or a linear combination of those states).&lt;/p&gt;
&lt;h2 id=&#34;schrödinger-equation&#34;&gt;Schrödinger Equation&lt;/h2&gt;
&lt;p&gt;In classical mechanics, we can calculate the position of the ball by using Newton&amp;rsquo;s \( F=ma \) and the equations of motion.&lt;/p&gt;
&lt;p&gt;Quantum mechanics has a similar function called the Schrödinger Equation. Using it we can learn about the particle as we go forward/backwards in time.&lt;/p&gt;
&lt;p&gt;$$ i \hbar \frac{\partial \Psi}{\partial t} = - \frac{\hbar^2}{2m} \frac{\partial^2 \Psi}{\partial x^2} + V \Psi $$&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt; \( \Psi \) is the wavefunction &lt;/li&gt;
    &lt;li&gt; \( \hbar \) is plank&#39;s constant (over 2pi) &lt;/li&gt;
    &lt;li&gt; \( m \) is the mass of the particle &lt;/li&gt;
    &lt;li&gt; \( i \) is an imaginary i (complex number) &lt;/li&gt;
    &lt;li&gt; \( V \) is the potential function  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;potential-function&#34;&gt;Potential Function&lt;/h3&gt;
&lt;p&gt;To &amp;ldquo;solve&amp;rdquo; the Schrödinger for a particular system, you need the Potential Energy function. The easiest Potential function to get started with is the Infinite Well.&lt;/p&gt;
&lt;p&gt;$$ V(x) = \begin{cases} 0, &amp;amp; 0 &amp;lt;= x &amp;lt;= a \\
\infty, &amp;amp; \text{otherwise} \end{cases}  $$&lt;/p&gt;
&lt;p&gt;It just says that the particle must stay in the well. There&amp;rsquo;s no escaping the well.&lt;/p&gt;
&lt;p&gt;Then, with that potential function, we can plug it into the Schrödinger and determine a function that &amp;ldquo;fits&amp;rdquo;. We eventually get:&lt;/p&gt;
&lt;p&gt;$$ \Psi_n (x, t) = \sqrt{ \frac{2}{a}} \sin{(\frac{n \pi}{a} x )} e^{-i (n^2 \pi^2 \hbar) / (2
m a^2 ) t} $$&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt; \( \Psi \) is the wavefunction &lt;/li&gt;
    &lt;li&gt; \( n \) is the specific stationary states &lt;/li&gt;
    &lt;li&gt; \( a \) is the width of the well &lt;/li&gt;
    &lt;li&gt; \( x \) is the &#34;position&#34; of the wave within the well &lt;/li&gt;
    &lt;li&gt; \( i \) is an imaginary i (complex number) &lt;/li&gt;
    &lt;li&gt; \( \hbar \) is plank&#39;s constant (over 2pi) &lt;/li&gt;
    &lt;li&gt; \( m \) is the mass of the electron &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;stationary-states&#34;&gt;Stationary States&lt;/h4&gt;
&lt;p&gt;Each one of the \( n \) states is an energy level that the particle can be in. But oddly in the quantum mechanics world, the particle will usually occupy a mix of different energy levels at the same time!&lt;/p&gt;
&lt;p&gt;But, when we try to figure out what energy state the particle is in, it will collapse to only one of the states.&lt;/p&gt;
&lt;p&gt;The probability of finding a particle in a particular state is ( |c_n|^2 ):&lt;/p&gt;
&lt;p&gt;$$ \Psi (x, t) = \sum_{n=1}^{\infty} c_n \sqrt{ \frac{2}{a}} \sin{(\frac{n \pi}{a} x )} e^{-i (n^2 \pi^2 \hbar) / (2 m a^2 ) t} $$&lt;/p&gt;
&lt;p&gt;Each of the states has a particular energy (as shown by the table above).&lt;/p&gt;
&lt;p&gt;The coefficients are determined by &amp;ldquo;initial wave function&amp;rdquo; such as \( \Psi (x, 0) = A x (a-x) \).  Using some Fourier series magic you can fit the equation by properly setting the \( c_n \)&amp;lsquo;s.&lt;/p&gt;
&lt;h2 id=&#34;imaginary-component&#34;&gt;Imaginary Component&lt;/h2&gt;
&lt;p&gt;In the above chart there&amp;rsquo;s two lines for every state, one for both the real and imaginary components.&lt;/p&gt;
&lt;p&gt;The imaginary component comes from the trailing \( e^i \) in the solution. The book I&amp;rsquo;m reading calls this the &amp;ldquo;time independent wiggle room&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s interesting though is that the time component doesn&amp;rsquo;t actually change the expectation values for the wave. (If we&amp;rsquo;re being 100% honest, I&amp;rsquo;m not actually sure what the time component does. It&amp;rsquo;s what I&amp;rsquo;m going to look into next. I have a feeling it&amp;rsquo;ll play a bigger role when we look at multi-particle systems that interfere with each other).&lt;/p&gt;
&lt;h2 id=&#34;expectation-values&#34;&gt;Expectation Values&lt;/h2&gt;
&lt;p&gt;Even more fun, t&amp;rsquo;s not possible to know everything about the particle in the well. We believe this to be a limitation of the universe, not our understanding of the universe.&lt;/p&gt;
&lt;p&gt;But we can still calculate &amp;ldquo;expectation&amp;rdquo; values for different properties. These properties are the result if you were to measure a bunch of particles in similar configurations and average them out.&lt;/p&gt;
&lt;p&gt;To calculate some of the expectation values we can use the following formulas:&lt;/p&gt;
&lt;h3 id=&#34;position&#34;&gt;Position&lt;/h3&gt;
&lt;p&gt;$$ \langle x \rangle = \int_{-\infty}^{\infty} \Psi^{*} [x] \Psi dx $$&lt;/p&gt;
&lt;h3 id=&#34;momentum&#34;&gt;Momentum&lt;/h3&gt;
&lt;p&gt;$$ \langle p \rangle = \int_{-\infty}^{\infty} \Psi^{*} [-i \hbar \frac{\partial}{\partial x}] \Psi dx $$&lt;/p&gt;
&lt;h3 id=&#34;uncertainty&#34;&gt;Uncertainty&lt;/h3&gt;
&lt;p&gt;We can also verify that all states adhere to the uncertainty principle:&lt;/p&gt;
&lt;p&gt;$$ \sigma_x \sigma_p \geq \frac{\hbar}{2} $$&lt;/p&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;p&gt;$$ \sigma_x = \langle x^2 \rangle - \langle x \rangle^2 $$&lt;/p&gt;
&lt;p&gt;$$ \langle x^2 \rangle = \int_{-\infty}^{\infty} \Psi^{*} [x]^2 \Psi dx $$&lt;/p&gt;
&lt;p&gt;Thankfully from the above table we can see that our calculated uncertainty is  \( \geq  \frac{\hbar}{2} \) for all states.&lt;/p&gt;
&lt;h2 id=&#34;up-next&#34;&gt;Up Next&lt;/h2&gt;
&lt;p&gt;Next up will be the quantum harmonic oscillator. I also want to learn more about how the equation evolves with time.&lt;/p&gt;
&lt;p&gt;If anything is confusing, please let me know! &lt;a href=&#34;mailto:c0nrad@c0nrad.io&#34;&gt;c0nrad@c0nrad.io&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Calculating Collisions Pt. 2</title>
      <link>https://blog.c0nrad.io/posts/calculating-collisions-2/</link>
      <pubDate>Mon, 18 May 2020 12:30:26 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/calculating-collisions-2/</guid>
      <description>&lt;p&gt;Programming the equation we derived in the &lt;a href=&#34;https://blog.c0nrad.io/posts/calculating-collisions/&#34;&gt;last post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;So in the last post we were able to generate the following equation. It can be used to determine the resulting velocities of a collision of two spheres:&lt;/p&gt;
&lt;p&gt;$$ v_{1f}^2  + v_{1f} \frac{(- 2 p_{i} m_{1} m_{2})}{m_{2} m_{1}^2 + m^2_2 m_{1}}  + \frac{p_{i}^2 m_{2} - 2 m^2_2 K_{i}}{m_{2} m_{1}^2 + m^2_2 m_{1}} =  0  $$&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;This morning I codified the equations into &lt;code&gt;simp&lt;/code&gt;, and they turned out pretty nicely!&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;video controls src=&#34;https://blog.c0nrad.io/sphere_collisions.mp4&#34; style=&#34;width: 75%;&#34; autoplay loop &gt;&lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;They line up to the math we worked out in the last blog post.&lt;/p&gt;
&lt;h3 id=&#34;vector-fun&#34;&gt;Vector Fun&lt;/h3&gt;
&lt;p&gt;In the last post I assumed that the vector math would just work out. Which ended up mostly being true.&lt;/p&gt;
&lt;p&gt;But, it took me some time to figure out what I was supposed to do with the vectors when multiplying them together.&lt;/p&gt;
&lt;p&gt;For Kinetic Energy, it almost seemed to make sense to take the dot product of the velocity vectors. Do we really want the &amp;ldquo;kinetic energy&amp;rdquo; for all the individual components? It feels weird to directly multiply two velocity vectors together.&lt;/p&gt;
&lt;p&gt;$$ K_{i} =  \frac{1}{2} m v^2  $$&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix} v_x \\ v_y \\ v_z \\ \end{bmatrix}^2 = v_x^2 + v_y^2 + v_z^2
$$&lt;/p&gt;
&lt;p&gt;But this didn&amp;rsquo;t work. When I treat kinetic energy like a scalar instead of a vector, I had to add/subtract scalars from a vector (during the quadratic equation step) which was also weird (and the results I got were less than ideal&amp;hellip;):&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;video controls src=&#34;https://blog.c0nrad.io/bad_collision.mp4&#34; style=&#34;width: 75%;&#34; autoplay loop &gt;&lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;So instead I just multiply the vectors across:&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix} v_x \\ v_y \\ v_z \\ \end{bmatrix}^2 = \begin{bmatrix} v_x^2 \\ v_y^2 \\ v_z^2 \\ \end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;And it seems to work. /shrug&lt;/p&gt;
&lt;h2 id=&#34;next-up&#34;&gt;Next up&lt;/h2&gt;
&lt;p&gt;Turns out there&amp;rsquo;s another big problem!&lt;/p&gt;
&lt;p&gt;The equations don&amp;rsquo;t take into account how the spheres are collide!&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;video controls src=&#34;https://blog.c0nrad.io/bad_sphere_angle.mp4&#34; style=&#34;width: 75%;&#34; autoplay loop &gt;&lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;Back to the drawing board. It has something to do with the normal forces, but I&amp;rsquo;m not 100% sure how the math will look yet. Stay tuned!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Calculating Collisions</title>
      <link>https://blog.c0nrad.io/posts/calculating-collisions/</link>
      <pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/calculating-collisions/</guid>
      <description>&lt;p&gt;My attempt at calculating the resulting velocities of two spheres colliding in 3D.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m currently working on a physics simulator (called &lt;code&gt;simp&lt;/code&gt;). While build the simulator I&amp;rsquo;m learning that calculating the physics is easy, but detecting and handling collisions is hard!&lt;/p&gt;
&lt;p&gt;As an example, the following is code I wrote last week for determining if a sphere and box are touching in 3D (and then attempting to handle the collision if they are). It&amp;rsquo;s complex and not even fully correct! It doesn&amp;rsquo;t handle the case of a sphere touching the corner of the box. And it still took me the better part of an entire day (I spent many hours trying to be clever instead of just handling all 6 faces of the box).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;shape&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Shape&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sphere&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;shape&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Shape&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Box&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;radius&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SphereEntity&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;radius&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dimensions&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BoxEntity&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;dimensions&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMax&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector3&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector3&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sphereMin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector3&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sphereMax&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector3&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inBounds&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector3&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMax&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;position&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dimensions&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;))
        &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;position&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dimensions&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;))

        &lt;span style=&#34;color:#a6e22e&#34;&gt;sphereMax&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;position&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;radius&lt;/span&gt;)
        &lt;span style=&#34;color:#a6e22e&#34;&gt;sphereMin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;position&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;radius&lt;/span&gt;)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;boxMin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;position&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;position&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMax&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)) {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;inBounds&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;inBounds&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inBounds&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sphereMin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sphereMin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMax&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)) {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fixed&lt;/span&gt;) {
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;position&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMax&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;radius&lt;/span&gt;)
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;velocity&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;velocity&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;))
                }

                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fixed&lt;/span&gt;) {
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;velocity&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;velocity&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;))
                }
            }

            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sphereMax&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMax&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sphereMax&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)) {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fixed&lt;/span&gt;) {
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;position&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;radius&lt;/span&gt;)
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;velocity&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;velocity&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;))
                }

                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fixed&lt;/span&gt;) {
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;velocity&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;velocity&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;))
                }
            }

        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;todays-problem&#34;&gt;Today&amp;rsquo;s Problem&lt;/h3&gt;
&lt;p&gt;This weekend I&amp;rsquo;ve been tackling a different but similar problem.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m trying to calculate the resulting velocity vectors of two colliding sphere&amp;rsquo;s.&lt;/p&gt;
&lt;p&gt;It seems like this should be something pretty simple? But I can&amp;rsquo;t figure out a general rule that accounts for all cases. (If there is one PLEASE comment it down below).&lt;/p&gt;
&lt;p&gt;It seems like there&amp;rsquo;d be an infinite number of solutions? (I know that&amp;rsquo;s not the case), but if two spheres bounce into each other, it seems reasonable that they could bounce off each other with a number of different velocities. Maybe one ball stops and all the momentum is transfered? Maybe they swap velocities? Maybe they swap velicities proportional to their mass?&lt;/p&gt;
&lt;p&gt;This was my attempt to use some math and figure it out.&lt;/p&gt;
&lt;h3 id=&#34;my-solution&#34;&gt;My Solution&lt;/h3&gt;
&lt;p&gt;First I started with the conservation of momentum and conservation of energy equations. We know they must be equal at the beginning and end of the collision. (We&amp;rsquo;re only using kinetic energy since there shouldn&amp;rsquo;t any change in potential at the point of collision.)&lt;/p&gt;
&lt;p&gt;$$
m_{1} v_{1i} + m_{2} v_{2i} = m_{1} v_{1f} + m_{2} v_{2f}
$$&lt;/p&gt;
&lt;p&gt;$$
\frac{1}{2} m_{1} v_{1i}^2 + \frac{1}{2} m_{2} v_{2i}^2 =  \frac{1}{2} m_{1} v_{1f}^2 +  \frac{1}{2} m_{2} v_{2f}^2
$$&lt;/p&gt;
&lt;p&gt;Since we can calculate the initial momentum \( p_{i} \) and kinetic energy \( K_{i} \), let&amp;rsquo;s substitute those into our two equations before things get messy:&lt;/p&gt;
&lt;p&gt;$$ p_{i} = m_{1} v_{1f} + m_{2} v_{2f} $$&lt;/p&gt;
&lt;p&gt;$$ K_{i} =  \frac{1}{2} m_{1} v_{1f}^2 +  \frac{1}{2} m_{2} v_{2f}^2 $$&lt;/p&gt;
&lt;p&gt;Then, we can solve both equations for \(  v_{2f} \):&lt;/p&gt;
&lt;p&gt;$$ \frac{p_{i} - m_{1} v_{1f}}{m_{2}} = v_{2f} $$
$$ \frac{K_{i} - \frac{1}{2} m_{1} v_{1f}^2}{\frac{1}{2} m_{2}} = v_{2f}^2 $$&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s join them together so we&amp;rsquo;re only left with \( v_{1f} \).&lt;/p&gt;
&lt;p&gt;$$ \frac{ (p_{i} - m_{1} v_{1f}) ^2}{m^2_2} =  \frac{K_{i} - \frac{1}{2} m_{1} v_{1f}^2}{\frac{1}{2} m_{2}} $$&lt;/p&gt;
&lt;p&gt;The only unknown left is \( v_{1f} \). Bingo! We have both \( v_{1f} \) and \( v_{1f}^2 \), so there will be multiple solutions(?). Let&amp;rsquo;s simplify:&lt;/p&gt;
&lt;p&gt;$$ \frac{ p_{i}^2 - 2 p_{i} m_{1} v_{1f} + m_{1}^2 v_{1f}^2 }{m^2_2} =  \frac{ 2K_{i} -  m_{1} v_{1f}^2}{ m_{2}} $$&lt;/p&gt;
&lt;!-- $$  m_{2} (p_{i}^2 - 2 p_{i} m_{1} v_{1f} + m_{1}^2 v_{1f}^2)  =   m^2_2 (2K_{i} -  m_{1} v_{1f}^2) $$

$$  p_{i}^2 m_{2} - 2 p_{i} m_{1} m_{2} v_{1f} + m_{2} m_{1}^2 v_{1f}^2  =    m^2_2 2K_{i} -    m^2_2 m_{1} v_{1f}^2 $$

$$  v_{1f}^2 m_{2} m_{1}^2 + v_{1f}^2 m^2_2 m_{1} - 2 p_{i} m_{1} m_{2} v_{1f} + p_{i}^2 m_{2} - m^2_2 2K_{i}  =  0  $$ --&gt;
&lt;p&gt;$$  v_{1f}^2 ( m_{2} m_{1}^2 + m^2_2 m_{1}) + v_{1f} (- 2 p_{i} m_{1} m_{2})  + (p_{i}^2 m_{2} - 2 m^2_2 K_{i}) =  0  $$&lt;/p&gt;
&lt;p&gt;$$  v_{1f}^2  + v_{1f} \frac{(- 2 p_{i} m_{1} m_{2})}{m_{2} m_{1}^2 + m^2_2 m_{1}}  + \frac{p_{i}^2 m_{2} - 2 m^2_2 K_{i}}{m_{2} m_{1}^2 + m^2_2 m_{1}} =  0  $$&lt;/p&gt;
&lt;p&gt;What does that mean? Not sure yet. Let&amp;rsquo;s solve a couple of examples and see what happens.&lt;/p&gt;
&lt;h4 id=&#34;two-equal-balls-colliding-at-equal-speed&#34;&gt;Two equal balls colliding at equal speed&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/equalmass_equalv.png&#34; alt=&#34;equal speed, equal mass&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;\( m_1 \)&lt;/th&gt;
&lt;th&gt;\(v_{1i} \)&lt;/th&gt;
&lt;th&gt;\( m_2 \)&lt;/th&gt;
&lt;th&gt;\( v_{2i} \)&lt;/th&gt;
&lt;th&gt;\( p \)&lt;/th&gt;
&lt;th&gt;\( K_i \)&lt;/th&gt;
&lt;th&gt;\(  \frac{(- 2 p_{i} m_{1} m_{2})}{m_{2} m_{1}^2 + m^2_2 m_{1}} \)&lt;/th&gt;
&lt;th&gt;\( \frac{p_{i}^2 m_{2} - 2 m^2_2 K_{i}}{m_{2} m_{1}^2 + m^2_2 m_{1}} \)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;-5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;125&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-25&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So our derived equation becomes:&lt;/p&gt;
&lt;p&gt;$$  v_{1f}^2  + v_{1f} (0) + -25 =  0  $$&lt;/p&gt;
&lt;p&gt;$$ v_{1f} = \pm 5 $$&lt;/p&gt;
&lt;p&gt;Which makes sense, two objects at equal speed and mass bounce off each other equally.&lt;/p&gt;
&lt;h4 id=&#34;two-equal-mass-balls-colliding-at-unequal-speeds&#34;&gt;Two equal mass balls colliding at unequal speeds&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/ball2_fast.png&#34; alt=&#34;equal speed, equal mass&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;\( m_1 \)&lt;/th&gt;
&lt;th&gt;\(v_{1i} \)&lt;/th&gt;
&lt;th&gt;\( m_2 \)&lt;/th&gt;
&lt;th&gt;\( v_{2i} \)&lt;/th&gt;
&lt;th&gt;\( p \)&lt;/th&gt;
&lt;th&gt;\( K_i \)&lt;/th&gt;
&lt;th&gt;\(  \frac{(- 2 p_{i} m_{1} m_{2})}{m_{2} m_{1}^2 + m^2_2 m_{1}} \)&lt;/th&gt;
&lt;th&gt;\( \frac{p_{i}^2 m_{2} - 2 m^2_2 K_{i}}{m_{2} m_{1}^2 + m^2_2 m_{1}} \)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;-15&lt;/td&gt;
&lt;td&gt;-50&lt;/td&gt;
&lt;td&gt;625&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;-75&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;$$  v_{1f}^2  + v_{1f} (10) + -75 =  0  $$&lt;/p&gt;
&lt;p&gt;So we need to apply the quadratic formula (holy crap, high school math flash back):&lt;/p&gt;
&lt;p&gt;$$ v_{1f} = \frac{ -b \pm \sqrt{ b^2 - 4 a c}}{2a} $$&lt;/p&gt;
&lt;p&gt;$$ v_{1f} = 5,-15 $$&lt;/p&gt;
&lt;p&gt;(Oddly we have two solutions. We&amp;rsquo;re going to ignore the first solution for a second). Using the conservation of momentum we get velocity of the second ball:&lt;/p&gt;
&lt;p&gt;$$ v_{2f} = -15,5 $$&lt;/p&gt;
&lt;p&gt;(Ignoring the first solution again). So they swap velocities. Neat!&lt;/p&gt;
&lt;h5 id=&#34;why-two-solutions&#34;&gt;Why Two Solutions?&lt;/h5&gt;
&lt;p&gt;At first I was very confused about why there were two solutions, and then I realized, we started this exercise with just two conservation laws, we never &amp;ldquo;said&amp;rdquo; they collided. So they could just continue along their current paths and that would satisfy the equations! (But obviously in the real world they collide).&lt;/p&gt;
&lt;h4 id=&#34;two-unequal-balls-colliding-at-equal-speed&#34;&gt;Two unequal balls colliding at equal speed&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/goliath.png&#34; alt=&#34;equal speed, equal mass&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;\( m_1 \)&lt;/th&gt;
&lt;th&gt;\( m_2 \)&lt;/th&gt;
&lt;th&gt;\(v_{1i} \)&lt;/th&gt;
&lt;th&gt;\( v_{2i} \)&lt;/th&gt;
&lt;th&gt;\( p \)&lt;/th&gt;
&lt;th&gt;\( K_i \)&lt;/th&gt;
&lt;th&gt;\(  \frac{(- 2 p_{i} m_{1} m_{2})}{m_{2} m_{1}^2 + m^2_2 m_{1}} \)&lt;/th&gt;
&lt;th&gt;\( \frac{p_{i}^2 m_{2} - 2 m^2_2 K_{i}}{m_{2} m_{1}^2 + m^2_2 m_{1}} \)&lt;/th&gt;
&lt;th&gt;\( v_{1f} \)&lt;/th&gt;
&lt;th&gt;\( v_{2f} \)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;-5&lt;/td&gt;
&lt;td&gt;-70&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;8.75&lt;/td&gt;
&lt;td&gt;-68.75&lt;/td&gt;
&lt;td&gt;-13.75&lt;/td&gt;
&lt;td&gt;-3.75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;-5&lt;/td&gt;
&lt;td&gt;-50&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;5.00&lt;/td&gt;
&lt;td&gt;-50.00&lt;/td&gt;
&lt;td&gt;-10.00&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;-5&lt;/td&gt;
&lt;td&gt;-25&lt;/td&gt;
&lt;td&gt;312.5&lt;/td&gt;
&lt;td&gt;2.00&lt;/td&gt;
&lt;td&gt;-35.00&lt;/td&gt;
&lt;td&gt;-7.00&lt;/td&gt;
&lt;td&gt;3.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So depending on the initial masses, a couple of things can happen.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When \( m_1 = 1, m_2 = 15\), \( m_1  \) will be pushed back into the reverse direction, and \(m_2 \) will continue pushing ahead.&lt;/li&gt;
&lt;li&gt;When \( m_1 = 5, m_2 = 15\), \( m_1  \) will be pushed back, and \(m_2 \) &lt;strong&gt;will stop in place!&lt;/strong&gt;. How cool!&lt;/li&gt;
&lt;li&gt;When \( m_1 = 10, m_2 ==15\), \(m_1 \) and \(m_2 \) will bounce back in opposite directions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-bigger-ball-gives-the-smaller-ball-a-gentle-love-tap&#34;&gt;A bigger ball gives the smaller ball a gentle love tap&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/love_tap.png&#34; alt=&#34;equal speed, equal mass&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;\( m_1 \)&lt;/th&gt;
&lt;th&gt;\(v_{1i} \)&lt;/th&gt;
&lt;th&gt;\( m_2 \)&lt;/th&gt;
&lt;th&gt;\( v_{2i} \)&lt;/th&gt;
&lt;th&gt;\( p \)&lt;/th&gt;
&lt;th&gt;\( K_i \)&lt;/th&gt;
&lt;th&gt;\(  \frac{(- 2 p_{i} m_{1} m_{2})}{m_{2} m_{1}^2 + m^2_2 m_{1}} \)&lt;/th&gt;
&lt;th&gt;\( \frac{p_{i}^2 m_{2} - 2 m^2_2 K_{i}}{m_{2} m_{1}^2 + m^2_2 m_{1}} \)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;175&lt;/td&gt;
&lt;td&gt;812.5&lt;/td&gt;
&lt;td&gt;-17.5&lt;/td&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;$$ v_{1f} = 10, 7.5 $$
$$ v_{2f} = 5, 12.5 $$&lt;/p&gt;
&lt;p&gt;Now that&amp;rsquo; weird. There&amp;rsquo;s two solutions that don&amp;rsquo;t match the initial conditions. But, we can eliminate one of them. If the bigger ball sneaks up on the little ball, it&amp;rsquo;s probably not going to jump over the first ball. So we know that \(v_{1f} &amp;lt; v_{2f} \). Only the second solution matches that. Therefore, the first ball transfers some of it&amp;rsquo;s momentum to the second ball, as expected.&lt;/p&gt;
&lt;p&gt;$$ v_{1f} = 7.5 $$
$$ v_{2f} = 12.5 $$&lt;/p&gt;
&lt;h3 id=&#34;open-questions&#34;&gt;Open Questions&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;When the sphere&amp;rsquo;s give each other a love tap, there&amp;rsquo;s two solutions. Why doesn&amp;rsquo;t one of the solutions equal the initial conditions?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Success!&lt;/p&gt;
&lt;p&gt;Using only two conservation laws we were able to determine the outcome of two colliding spheres. Technically we only did it in 1D, but as long as you respect the vector math, it should just work in 3D.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m going to codify the solutions into &lt;code&gt;simp&lt;/code&gt;, I&amp;rsquo;ll put the results in part 2.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>