<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c0nrad&#39;s blog</title>
    <link>https://blog.c0nrad.io/</link>
    <description>c0nrad&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Oct 2020 19:39:08 -0400</lastBuildDate>
    
    <atom:link href="https://blog.c0nrad.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SO(3) Lie Group Generators via Brute Force</title>
      <link>https://blog.c0nrad.io/posts/so3-exploration/</link>
      <pubDate>Sat, 03 Oct 2020 19:39:08 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/so3-exploration/</guid>
      <description>&lt;p&gt;Brute forcing the generators for SO(3).&lt;/p&gt;
&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m currently reading through &lt;a href=&#34;https://www.amazon.com/Physics-Symmetry-Undergraduate-Lecture-Notes/dp/3319666304&#34;&gt;Physics from Symmetry&lt;/a&gt; by Jakob Schwichtenberg. One of the sections, (&lt;em&gt;4.4.1 The Generators and Lie Algebra of \( SO(3) \)&lt;/em&gt;), talks about generating the SO(3) rotation matrixes by first determining a set of Lie Algebra generators, and then doing some exponential matrix math.&lt;/p&gt;
&lt;p&gt;The book hands the reader a couple of linearly independent generator matrixes that can be used to generate the group elements. But I was curious if they were a unique set of matrices. It seemed like it would be fun to figure out by brute force.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;A brief introduction to the vocabulary of the group theory being used.&lt;/p&gt;
&lt;h2 id=&#34;so3&#34;&gt;SO(3)&lt;/h2&gt;
&lt;p&gt;SO(3) are the set of rotation matrices in 3D. That means they preserve length when used in vector multiplication. Physicist care a lot about changing reference frames (transformations), and these matrixes allow you to change the orientation of a system without changing anything about the system (such as scaling or shrinking the system).&lt;/p&gt;
&lt;p&gt;As an example: it doesn&amp;rsquo;t matter if you face north when bouncing a ball, or south, or east or any direction. We&amp;rsquo;d say that those rotations are invariant. It sounds like super simple stuff, but it&amp;rsquo;s actually very important.&lt;/p&gt;
&lt;p&gt;SO(3) is the group of &amp;ldquo;Special&amp;rdquo;, &amp;ldquo;Orthogonal&amp;rdquo; 3 dimensional rotation matrixes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Special means that its determinate is zero. \( det(O) = 1 \). We require S because O(3) is also a group, but includes transformations via flips, but requiring det(O) = 1, means we only get rotations.&lt;/li&gt;
&lt;li&gt;Orthogonal means that \( O^T O = 1 \). Being orthogonal means that the matrix is length preserving.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The standard rotation matrices in 3D are:&lt;/p&gt;
&lt;p&gt;$$ R_x = \begin{pmatrix}
1 &amp;amp; 0 &amp;amp; 0  \\
0 &amp;amp; \cos(\theta) &amp;amp; -\sin(\theta)  \\
0 &amp;amp; \sin(\theta) &amp;amp; \cos(\theta) \end{pmatrix} $$&lt;/p&gt;
&lt;p&gt;$$ R_y = \begin{pmatrix}
\cos(\theta) &amp;amp; 0 &amp;amp; \sin(\theta)  \\
0 &amp;amp; 1 &amp;amp; 0  \\
-\sin(\theta) &amp;amp; 0 &amp;amp; \cos(\theta) \end{pmatrix} $$&lt;/p&gt;
&lt;p&gt;$$ R_z = \begin{pmatrix}
\cos(\theta) &amp;amp; -\sin(\theta) &amp;amp; 0  \\
\sin(\theta) &amp;amp; \cos(\theta) &amp;amp; 0  \\
0 &amp;amp; 0 &amp;amp; 0 \end{pmatrix} $$&lt;/p&gt;
&lt;p&gt;So if you had a vector you wanted to rotate around some axis, you could take one ot those matrixes, plug in \(\theta\), and you&amp;rsquo;d have a length preserving rotation!&lt;/p&gt;
&lt;h2 id=&#34;lie-group&#34;&gt;Lie Group&lt;/h2&gt;
&lt;p&gt;Lie Groups deal with groups of continuous symmetry transformation, as opposed to discrete symmetry transformations. For example if you&amp;rsquo;re looking at a square, you can only rotate it so many ways such that it&amp;rsquo;ll still look the same (by 0, 90, 180, 270 degrees). But you can rotate a circle by any angle, and it&amp;rsquo;s still the same looking circle. Since the square only allows a set number of rotations it is a discrete group, whereas a circle is a continuous group.&lt;/p&gt;
&lt;h2 id=&#34;lie-algebra&#34;&gt;Lie Algebra&lt;/h2&gt;
&lt;p&gt;Lie Algebras are a way of classifying and generating the lie groups. Many lie groups can belong to a lie algebra.&lt;/p&gt;
&lt;p&gt;I mentioned in the introduction of this blog post that I wanted to generate the SO(3) matrixes. But what&amp;rsquo;s the point if we already have them?&lt;/p&gt;
&lt;p&gt;Well, we have them in 3-dimensions. But what about higher dimensions? There&amp;rsquo;s also many ways to represent rotations (for example SU(2), special unitary matrixes are also very similar to SO(3) (SU(2) is the double cover of SO(3), meaning there&amp;rsquo;s two different points in SU(2) that map to SO(3)). Which group is more fundamental?&lt;/p&gt;
&lt;p&gt;Lie Algebra is given by matrices X such that \( e^{tX} \in G\), where G is the lie group, and the Lie Algebra includes a new operator called the Lie bracket \( [,] \) which instructs how to combine the matrices.&lt;/p&gt;
&lt;h3 id=&#34;exponential-matrix&#34;&gt;Exponential Matrix&lt;/h3&gt;
&lt;p&gt;One thing that&amp;rsquo;s very fun is that in the Lie Algebra X is a matrix, and we&amp;rsquo;re putting it in an exponential. \( e^{tX} \). What does it even mean to raise a matrix by an exponential?&lt;/p&gt;
&lt;p&gt;It turns out that Taylor series expansions save us again. The taylor series expansion of \( e^x \) is:&lt;/p&gt;
&lt;p&gt;$$ e^x = \sum^{\infty}_{n=0} \frac{x^n}{n!} $$&lt;/p&gt;
&lt;p&gt;Meaning, if you wanted to calculate e^x for some x, you could instead solve the above infinite series. Which doesn&amp;rsquo;t sound too useful, but usually what happens is you plug in some value of x, (maybe, \( i \theta \)), and you&amp;rsquo;ll be able to fish out other infinite taylor series (such as \( \cos(\theta) \) and \( i \sin(\theta) \) (you can prove Euler&amp;rsquo;s formula this way).&lt;/p&gt;
&lt;p&gt;So, if we plug in \( e^{tX} \):&lt;/p&gt;
&lt;p&gt;$$ e^{tX} = I + t X + \frac{t^2 X^2}{2!} + \frac{t^3 X^3}{3!} + &amp;hellip;$$&lt;/p&gt;
&lt;p&gt;We can solve that!&lt;/p&gt;
&lt;h2 id=&#34;generator-matrixes&#34;&gt;Generator Matrixes&lt;/h2&gt;
&lt;p&gt;So to calculate members of a lie group using the lie algebra, we need a set of generator matrixes. We&amp;rsquo;ll then take these generator matrices, raise them to \( e^{tX} \) and get some group elements.&lt;/p&gt;
&lt;p&gt;We know a little bit about how these generator matrices should look.&lt;/p&gt;
&lt;p&gt;We know that the resulting matrices (we will call the group matrices O, and the generator matrices J) must have the properties such that:&lt;/p&gt;
&lt;p&gt;$$ \begin{aligned}
O^T O = I &amp;amp;   &amp;amp;   &amp;amp;   &amp;amp; \det(O) = 1 \end{aligned} $$&lt;/p&gt;
&lt;p&gt;And since:&lt;/p&gt;
&lt;p&gt;$$ O = e^{\theta J} $$&lt;/p&gt;
&lt;p&gt;We have our first condition on the generators J:&lt;/p&gt;
&lt;p&gt;$$ O^T O = e^{(\theta J)^T} e^{\theta J} = 1 \implies J^T + J = 0 $$&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s also a handy property, \( det(e^A) = e^{tr(A)} \), using that:&lt;/p&gt;
&lt;p&gt;$$ det(O) = 1 \implies det(e^{\theta J}) = e^{\theta tr(J)} = 1 $$
$$ \implies tr(J) = 0 $$&lt;/p&gt;
&lt;p&gt;So, we have two conditions on \( J \), \( J^T + J = 0 \), and \( tr(J) = 0 \).&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s enough to start brute forcing!&lt;/p&gt;
&lt;h2 id=&#34;brute-forcing-generators&#34;&gt;Brute Forcing Generators&lt;/h2&gt;
&lt;p&gt;So we specifically want something of the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;random3&lt;/span&gt;()
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;transpose&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Zero3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
    &lt;span style=&#34;color:#75715e&#34;&gt;// do something
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(full code can be found &lt;a href=&#34;https://github.com/c0nrad/group_brute&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Random3() randomly adds either 1, 0, -1 to each spot in a 3x3 matrix.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s was somewhat interesting is that I get back 27 unique matrixes that fulfil that requirement.&lt;/p&gt;
&lt;p&gt;Some example matrixes:&lt;/p&gt;
&lt;p&gt;$$ J_{random1} = \begin{pmatrix}
0 &amp;amp; -1 &amp;amp; 0  \\
1 &amp;amp; 0 &amp;amp; 0  \\
0 &amp;amp; 0 &amp;amp; 0 \end{pmatrix} $$&lt;/p&gt;
&lt;p&gt;$$ J_{random2} = \begin{pmatrix}
0 &amp;amp; 1 &amp;amp; -1  \\
-1 &amp;amp; 0 &amp;amp; 0  \\
1 &amp;amp; 0 &amp;amp; 0 \end{pmatrix} $$&lt;/p&gt;
&lt;p&gt;$$ J_{random3} = \begin{pmatrix}
0 &amp;amp; 0 &amp;amp; 0  \\
0 &amp;amp; 0 &amp;amp; -1  \\
0 &amp;amp; 1 &amp;amp; 0 \end{pmatrix} $$&lt;/p&gt;
&lt;p&gt;They all make sense, they&amp;rsquo;re symmetric across the diagonal axis (requirement of \( O^T O = I \)).&lt;/p&gt;
&lt;p&gt;But, we can also see that \( J_{random1} \) contains similar elements from \( J_{random2} \). We know there&amp;rsquo;s three rotation matrixes, maybe instead we try to find sets of three matrixes that are linear independent in the set of 27 matrxies that fulfil the initial requirements.&lt;/p&gt;
&lt;h2 id=&#34;linear-independent&#34;&gt;Linear Independent&lt;/h2&gt;
&lt;p&gt;So maybe of our 27 matrixes, maybe there&amp;rsquo;s only a couple that are linearly independent.&lt;/p&gt;
&lt;p&gt;We can iterate over this too via code.&lt;/p&gt;
&lt;p&gt;For three matrixes to be linearly independent we need it such that the only solution to the following below is when \( 0 = k_1 = k_2 = k_3 \) (this means that you can&amp;rsquo;t build one of the matrix from a combination from others):&lt;/p&gt;
&lt;p&gt;$$ k_1 J_1 + k_2 J_2 + k_3 J_3 = 0 $$&lt;/p&gt;
&lt;p&gt;To do this we have to solve a system of equations! In our above example:&lt;/p&gt;
&lt;p&gt;$$ k_1 J_1 + k_2 J_2 + k_3 J_3 = \begin{pmatrix}
0 &amp;amp; -k_1 + k_2 &amp;amp; -k_2  \\
k_1 -k_2 &amp;amp; 0 &amp;amp; -k_3  \\
k_2 &amp;amp; k_3 &amp;amp; 0 \end{pmatrix} = \begin{pmatrix}
0 &amp;amp; 0 &amp;amp; 0  \\
0 &amp;amp; 0 &amp;amp; 0  \\
0 &amp;amp; 0 &amp;amp; 0 \end{pmatrix} $$&lt;/p&gt;
&lt;p&gt;So from that we get our system of equations:&lt;/p&gt;
&lt;p&gt;$$ \begin{aligned}
-k_1 + k_2 = 0 \\ -k_2 = 0 \\ k_1 - k_2 = 0 \\ -k_3 = 0 \\ k_2 = 0 \\ k_3 = 0 \end{aligned} $$&lt;/p&gt;
&lt;p&gt;But there&amp;rsquo;s an easier way, for there to be a solution, there must be a non-zero determinate. So we can take the determinate of our system to quickly check.&lt;/p&gt;
&lt;p&gt;But we hit a problem, after brute forcing through the determinates for all the combinations I found: &lt;strong&gt;All of the matrixes and their linear combinations have determinate zero&lt;/strong&gt;! So that doesn&amp;rsquo;t help reduce the set.&lt;/p&gt;
&lt;h2 id=&#34;generators&#34;&gt;Generators&lt;/h2&gt;
&lt;p&gt;Well, maybe we&amp;rsquo;ll find a requirement on the J matrixes as we continue forward with generating the SO(3) group elements.&lt;/p&gt;
&lt;p&gt;Once we have a J, we&amp;rsquo;re going to calculate \(R_1 = e^{\theta J_1} \). Since we&amp;rsquo;re going to do some taylor series expansions, we might as well calculate \( J^0, J^1, J^2, J^3, J^4, J^5\) now.&lt;/p&gt;
&lt;p&gt;$$ J^0 = \begin{pmatrix}
1 &amp;amp; 0 &amp;amp; 0  \\
0 &amp;amp; 1 &amp;amp; 0  \\
0 &amp;amp; 0 &amp;amp; 1 \end{pmatrix}, J^1  = \begin{pmatrix}
0  &amp;amp;  0  &amp;amp;  0  \\
0  &amp;amp;  0  &amp;amp;  1  \\
0  &amp;amp;  -1  &amp;amp;  0 \end{pmatrix}, J^2 = \begin{pmatrix}
0  &amp;amp;  0  &amp;amp;  0  \\
0  &amp;amp;  -1  &amp;amp;  0  \\
0  &amp;amp;  0  &amp;amp;  -1 \end{pmatrix} $$&lt;/p&gt;
&lt;p&gt;$$ J^3  = \begin{pmatrix}
0  &amp;amp;  0  &amp;amp;  0  \\
0  &amp;amp;  0  &amp;amp;  -1  \\
0  &amp;amp;  1  &amp;amp;  0  \end{pmatrix}, J^4 = \begin{pmatrix}
0  &amp;amp;  0  &amp;amp;  0  \\
0  &amp;amp;  1  &amp;amp;  0  \\
0  &amp;amp;  0  &amp;amp;  1  \end{pmatrix}, J^5 = \begin{pmatrix}
0  &amp;amp;  0  &amp;amp;  0  \\
0  &amp;amp;  0  &amp;amp;  1  \\
0  &amp;amp;  -1  &amp;amp;  0 \end{pmatrix} $$&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s something pretty amazing there. They form their own cyclic group! \( J^1 = J^5 \). It turns out this is a very important property. Some of them also somewhat look like the identity matrix! \( J^4 == I - \delta_{111} \). Let&amp;rsquo;s just call that \( K \).&lt;/p&gt;
&lt;p&gt;So we know that:&lt;/p&gt;
&lt;p&gt;$$ \begin{aligned}
J^1_1 &amp;amp; = J_1 \\
J^2_1 &amp;amp; = -K \\
J^3_1 &amp;amp; = -J_1 \\
J^4_1 &amp;amp; = K \\
J^5_1 &amp;amp; = J_1 \end{aligned} $$&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start generating!&lt;/p&gt;
&lt;h2 id=&#34;generating-so3&#34;&gt;Generating SO(3)&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re going to use the \( J^1 \) from above, and plug it into \( e^{\theta J_1} \).&lt;/p&gt;
&lt;p&gt;$$ R_1 = \sum^{\infty}_{n=0} \frac{(\theta J_1)^n}{n!} \approx \left(\frac{1 I}{1} \right) + \left(\frac{\theta J_1^1}{1}\right) + \left(\frac{\theta^2 J^2_1}{2!} \right) + \left(\frac{\theta^3 J^3_1}{3!}\right) + \left(\frac{\theta^4 J^4_1}{4!}\right) + \left(\frac{\theta^5 J^5_1}{5!}\right) + &amp;hellip; $$&lt;/p&gt;
&lt;p&gt;And we know some interesting things about the \( J \) powers:&lt;/p&gt;
&lt;p&gt;$$ = I + (\theta J_1) + \frac{\theta^2-K}{2!} + \frac{\theta^3-J_1}{3!} + \frac{\theta^4+K}{4!} + \frac{\theta^5 + J_1}{5!} + &amp;hellip; $$&lt;/p&gt;
&lt;p&gt;Then, doing some careful rearranging:&lt;/p&gt;
&lt;p&gt;$$ = \delta_{111} + K(1 - \frac{\theta^2}{2!} + \frac{\theta^4}{4!}) + J_1(\theta - \frac{\theta^3}{3!} + \frac{\theta^5}{5!}) $$&lt;/p&gt;
&lt;p&gt;And, we have two other useful taylor expansions:&lt;/p&gt;
&lt;p&gt;$$ \cos(x) = 1 - \frac{x^2}{2!} + \frac{x^4}{4!} - \frac{x^6}{6!} &amp;hellip; $$
$$ \sin(x) = x - \frac{x^3}{x!} + \frac{x^5}{x!} - \frac{x^7}{7!} &amp;hellip; $$&lt;/p&gt;
&lt;p&gt;Making the substitions we get the following:&lt;/p&gt;
&lt;p&gt;$$ R_1 = \delta_{111} + K \cos(\theta) + I \sin(\theta) = \begin{pmatrix}
1 &amp;amp; 0 &amp;amp; 0  \\
0 &amp;amp; \cos(\theta) &amp;amp; -\sin(\theta)  \\
0 &amp;amp; \sin(\theta) &amp;amp; \cos(\theta) \end{pmatrix} $$&lt;/p&gt;
&lt;p&gt;Holy guacamole batman! We generated \( R_1 \).&lt;/p&gt;
&lt;h2 id=&#34;other-choices-of-j&#34;&gt;Other choices of J&lt;/h2&gt;
&lt;p&gt;But we used only one of the 27 J matrices, what happens if we pick any of the others?&lt;/p&gt;
&lt;p&gt;Well, one of the important properties we exploited was that raising the J matrix to a power eventually cycled back to itself ( \( J_1^5 = J_1 \)). Do all the 27 J matrixes have that property?&lt;/p&gt;
&lt;p&gt;Well, \( -J_1 \) was also a matrix. Its powers also have that cyclic property. Following the math through, we&amp;rsquo;d get \( -R_1 \), which is just a rotation in the opposite direction. (\( R_1^{-1} = -R_1 \)).&lt;/p&gt;
&lt;p&gt;We also have \( J_2, J_3 \) which will result in our standard \( R_2, R_3 \) matrixes, and their negatives, \( -J_2, -J_3 \implies -R_2, -R_3 \).&lt;/p&gt;
&lt;p&gt;The zero matrix also fulfils the requirements to be a J matrix, and it results in the I transformation.&lt;/p&gt;
&lt;p&gt;The other matrix are combinations of \( J_1, J_2, J_3  \), let&amp;rsquo;s see what \( J_1 + J_2 \) generates:&lt;/p&gt;
&lt;p&gt;$$ J_{12} = J_1 + J_2 = \begin{pmatrix}
0  &amp;amp;  0  &amp;amp;  1  \\
0  &amp;amp;  0  &amp;amp;  -1  \\
-1  &amp;amp;  1  &amp;amp;  1  \end{pmatrix} $$&lt;/p&gt;
&lt;p&gt;And calculating some powers:&lt;/p&gt;
&lt;p&gt;$$ J^0 = \begin{pmatrix}
1 &amp;amp; 0 &amp;amp; 0 \\
0 &amp;amp; 1 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; 1 \\
\end{pmatrix} J^1 = \begin{pmatrix}
0 &amp;amp; 0 &amp;amp; 1 \\
0 &amp;amp; 0 &amp;amp; -1 \\
-1 &amp;amp; 1 &amp;amp; 0 \\
\end{pmatrix} J^2 = \begin{pmatrix}
-1 &amp;amp; 1 &amp;amp; 0 \\
1 &amp;amp; -1 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; -2 \\
\end{pmatrix} $$&lt;/p&gt;
&lt;p&gt;$$ J^3 = \begin{pmatrix}
0 &amp;amp; 0 &amp;amp; -2 \\
0 &amp;amp; 0 &amp;amp; 2 \\
2 &amp;amp; -2 &amp;amp; 0 \\
\end{pmatrix}
J^4 = \begin{pmatrix}
2 &amp;amp; -2 &amp;amp; 0 \\
-2 &amp;amp; 2 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; 4 \\
\end{pmatrix}
J^5 = \begin{pmatrix}
0 &amp;amp; 0 &amp;amp; 4 \\
0 &amp;amp; 0 &amp;amp; -4 \\
-4 &amp;amp; 4 &amp;amp; 0 \\
\end{pmatrix} $$
$$ J^6 = \begin{pmatrix}
-4 &amp;amp; 4 &amp;amp; 0 \\
4 &amp;amp; -4 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; -8 \\
\end{pmatrix}
J^7 = \begin{pmatrix}
0 &amp;amp; 0 &amp;amp; -8 \\
0 &amp;amp; 0 &amp;amp; 8 \\
8 &amp;amp; -8 &amp;amp; 0 \\
\end{pmatrix}
J^8 = \begin{pmatrix}
8 &amp;amp; -8 &amp;amp; 0 \\
-8 &amp;amp; 8 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; 16 \\
\end{pmatrix} $$
$$ J^9 = \begin{pmatrix}
0 &amp;amp; 0 &amp;amp; 16 \\
0 &amp;amp; 0 &amp;amp; -16 \\
-16 &amp;amp; 16 &amp;amp; 0 \\
\end{pmatrix} $$&lt;/p&gt;
&lt;p&gt;Very odd. So, \( J^9 = J^1 2^{n/2} \)&lt;/p&gt;
&lt;p&gt;$$ \begin{aligned}
J^0 &amp;amp;  = I \\
J^1 &amp;amp;  = J \\
J^2 &amp;amp; = -I -(-\delta_{12} + -\delta_{21} + \delta_{33})  \\
J^3 &amp;amp; = -2 J \\
J^4 &amp;amp; = 2I + 2(-\delta_{12} + -\delta_{21} + \delta_{33}) \\
J^5 &amp;amp; = 4J \\
J^6 &amp;amp; = -4I - 4(-\delta_{12} + -\delta_{21} + \delta_{33}) \\
J^7 &amp;amp; = -8J \\
J^8 &amp;amp; = 8I + 8(-\delta_{12} -\delta_{21} + \delta_{33}) \\
J^9 &amp;amp; = 16 J \end{aligned} $$&lt;/p&gt;
&lt;p&gt;Curiouser and Curiouser. We can sneakily pull out a couple of things. The \(J^1, J^3, J^5, J^7, J^9 \) terms look like our taylor expanded friend \( \sin(x) \). (Ignoring the \( 2^{n/2} \)). We also have two different groupings of \( \cos(x) \), the I and the weird off elements thing (let&amp;rsquo;s call it \( K = (-\delta_{12} -\delta_{21} + \delta_{33}) \).&lt;/p&gt;
&lt;p&gt;So, ignoring all the \( 2^{n/2} \) elements, we know the solution will look something of the form:&lt;/p&gt;
&lt;p&gt;$$ R_12 = J \sin(\theta) + I \cos(\theta) + K \cos(\theta)$$
$$ = \begin{pmatrix}
0 &amp;amp; 0 &amp;amp; \sin(\theta)  \\
0 &amp;amp; 0 &amp;amp; -\sin(\theta)  \\
-\sin(\theta) &amp;amp; \sin(\theta) &amp;amp; 0 \end{pmatrix} + \begin{pmatrix}
\cos(\theta) &amp;amp; 0 &amp;amp; 0  \\
0 &amp;amp; \cos(\theta) &amp;amp; 0  \\
0 &amp;amp; 0 &amp;amp; \cos(\theta) \end{pmatrix} + \begin{pmatrix}
0 &amp;amp; -\cos(\theta) &amp;amp; 0  \\
-\cos(\theta) &amp;amp; 0 &amp;amp; 0  \\
0 &amp;amp; 0 &amp;amp; \cos(\theta) \end{pmatrix}$$&lt;/p&gt;
&lt;p&gt;$$ = \begin{pmatrix}
\cos(\theta) &amp;amp; -\cos(\theta) &amp;amp; \sin(\theta)  \\
-\cos(\theta) &amp;amp; \cos(\theta) &amp;amp; -\sin(\theta)  \\
-\sin(\theta) &amp;amp; \sin(\theta) &amp;amp; 2\cos(\theta) \end{pmatrix} $$&lt;/p&gt;
&lt;p&gt;Well it turns out that looks suspiciously like:&lt;/p&gt;
&lt;img src=&#34;https://blog.c0nrad.io/r_xy.png&#34; style=&#34;border: 1px solid&#34;&gt;
&lt;p&gt;Which is just rotating around X and Y by \( \theta \).&lt;/p&gt;
&lt;p&gt;And it turns out if we had been a bit smarter and multiplied the matrix by \( \sqrt{2} \) before doing the expansion, we would have gotten that!&lt;/p&gt;
&lt;p&gt;$$ J^0 = \begin{pmatrix}
1 &amp;amp; 0 &amp;amp; 0 \\
0 &amp;amp; 1 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; 1 \\
\end{pmatrix}
J^1 = \begin{pmatrix}
0 &amp;amp; 0 &amp;amp; \sqrt{2} \\
0 &amp;amp; 0 &amp;amp; -\sqrt{2} \\
-\sqrt{2} &amp;amp; \sqrt{2} &amp;amp; 0 \\
\end{pmatrix}
J^2 = \begin{pmatrix}
-.5 &amp;amp; .5 &amp;amp; 0 \\
.5 &amp;amp; -.5 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; -1 \\
\end{pmatrix} $$
$$ J^3 = \begin{pmatrix}
0 &amp;amp; 0 &amp;amp; -\sqrt{2} \\
0 &amp;amp; 0 &amp;amp; \sqrt{2} \\
\sqrt{2} &amp;amp; -\sqrt{2} &amp;amp; 0 \\
\end{pmatrix}
J^4 = \begin{pmatrix}
.5 &amp;amp; -.5 &amp;amp; 0 \\
-.5 &amp;amp; .5 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; 1 \\
\end{pmatrix}
J^5 = \begin{pmatrix}
0 &amp;amp; 0 &amp;amp; \sqrt{2} \\
0 &amp;amp; 0 &amp;amp; -\sqrt{2} \\
-\sqrt{2} &amp;amp; \sqrt{2} &amp;amp; 0 \\
\end{pmatrix} $$&lt;/p&gt;
&lt;h2 id=&#34;linear-combinations-of-generators&#34;&gt;Linear Combinations of Generators&lt;/h2&gt;
&lt;p&gt;So, the 27 matrxies are all the different combinations of rotations possible!&lt;/p&gt;
&lt;p&gt;And this answers our original questions, are the matrixes that the book gave us the unique solution. No, they&amp;rsquo;re all valid rotation groups, but in terms of standard convention yes. We have a standard definition of \( R_x(\theta) \), and \( J_1 \) and only \( J_1 \) maps to that.&lt;/p&gt;
&lt;p&gt;So now, we can build a map of all the other different rotations!&lt;/p&gt;
&lt;p&gt;$$0 \implies I, \\
J_1 \implies R_x(\theta), \\
J_2 \implies R_y(\theta), \\
J_3 \implies R_z(\theta), \\
-J_1 \implies R_x(-\theta), \\
-J_2 \implies R_y(-\theta) , \\
-J_3 \implies R_z(-\theta), \\
J_1 + J_2 \implies R_x(\theta) R_y(\theta), \\
J_1 + J_3 \implies R_x(\theta) R_z(\theta), \\
J_1 + -J_2 \implies R_x(\theta) R_y(-\theta) , \\
J_1 + -J_3 \implies R_z(\theta) R_z(-\theta) , \\
-J_1 + J_2 \implies R_x(-\theta) R_y(\theta), \\
-J_1 + J_3 \implies R_x(-\theta) R_z(\theta), \\
-J_1 + -J_2 \implies R_x(-\theta) R_y(-\theta) , \\
-J_1 + -J_3 \implies R_x(-\theta) R_z(-\theta) , \\
J_2 + J_3 \implies R_y(\theta) R_z(\theta), \\
J_2 + -J_3 \implies R_y(\theta) R_z(-\theta), \\
-J_2 + J_3 \implies R_y(-\theta) R_z(\theta), \\
-J_2 + -J_3 \implies R_y(-\theta) R_z(-\theta), \\
J_1 + J_2 + J_3 \implies R_x(\theta) R_y(\theta) R_z(\theta), \\
J_1 + J_2 + -J_3 \implies R_x(\theta) R_y(\theta) R_z(-\theta), \\
J_1 + -J_2 + J_3 \implies R_x(\theta) R_y(-\theta) R_z(\theta) , \\
J_1 + -J_2 + -J_3 \implies R_x(\theta) R_y(-\theta) R_z(-\theta), \\
-J_1 + J_2 + J_3 \implies R_x(-\theta) R_y(\theta) R_z(\theta), \\
-J_1 + J_2 + -J_3 \implies R_x(-\theta) R_y(\theta) R_z(-\theta), \\
-J_1 + -J_2 + J_3 \implies R_x(-\theta) R_y(-\theta) R_z(\theta) , \\
-J_1 + -J_2 + -J_3 \implies R_x(-\theta) R_y(-\theta) R_z(-\theta)$$&lt;/p&gt;
&lt;p&gt;We have now accounted for the 27 matrixes.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That was a fun project. It ended up being a little bit longer than planned, but it was very neat to explore.&lt;/p&gt;
&lt;p&gt;The code can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/c0nrad/group_brute&#34;&gt;https://github.com/c0nrad/group_brute&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I actually just covered a number of these topics in class (taking matrix X to an exponential e^X, linear independence definition, orthogonal, determinants), so it was pretty cool to apply them.&lt;/p&gt;
&lt;h3 id=&#34;what-went-well&#34;&gt;What went well&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Not at all related to this blog, but I recently got a surface book 3 laptop, I really like it for taking notes. The notes sync on OneNote to my laptop, so I did a lot of math on the tablet, and then copied it over to LaTeX.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-didnt-go-as-well&#34;&gt;What didn&amp;rsquo;t go as well&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The matrix library has a little error (the X,Y are swapped for certain operations). Next time I use this code I&amp;rsquo;ll need to swap the ordering of some operations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s next?&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m going to generate some of the other groups, but I probably won&amp;rsquo;t blog about it unless something exciting happens. I imagine the next blog post will be about Poincare group or spinors.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EM Particle Motion</title>
      <link>https://blog.c0nrad.io/posts/em-particle-motion/</link>
      <pubDate>Wed, 30 Sep 2020 17:26:11 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/em-particle-motion/</guid>
      <description>&lt;p&gt;Simulating a particle under the influence. (Of electric and magnetic fields).&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Basically this is just a simulation of Lorentz Force law:&lt;/p&gt;
&lt;p&gt;$$ \bm{F} = q(\bm{E} + \bm{r} \times \bm{B} ) $$&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s fun is that if you place a charge in these Electric and Magnetic field equations, the particle takes a pretty peculiar path!&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;Check it out here! Although, I kind of rushed through this, so I think I broke some of the other examples. You can click pause and change the velocity of the particle.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://emmy-viz.github.io/emmy/&#34;&gt;https://emmy-viz.github.io/emmy/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;
&lt;p&gt;I used &lt;a href=&#34;https://github.com/emmy-viz/emmy&#34;&gt;emmy&lt;/a&gt; for this project, so the code was super simple:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;sim_charged&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addPoint(new Vector(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
sim_charged&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;e_fields&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push(new VectorField(new Func(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;), new Func(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;), new Func(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;)))
sim_charged&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b_fields&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push(new VectorField(new Func(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;), new Func(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;), new Func(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;small&gt;The code adds a point charge with q=1, then adds \( \bm{E} = 2\hat{y} \) and \( \bm{B} = 2\hat{z} \).&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Technically emmy didn&amp;rsquo;t have support for magnetic fields, but that was pretty quick to add. Within the simulator there&amp;rsquo;s a step function that uses implicit euler as the integrator, so I just added the b-field force to the existing force equation.&lt;/p&gt;
&lt;h3 id=&#34;b-field-v_x--0&#34;&gt;B field, \(v_x = 0\)&lt;/h3&gt;
&lt;p&gt;So a particle under the force of a B-Field with no initial velocity:
&lt;img style=&#34;border: 1px solid&#34; src=&#34;https://blog.c0nrad.io/b_field_real.gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s moves in a circle!&lt;/p&gt;
&lt;h3 id=&#34;b--e-field-v_x--0&#34;&gt;B &amp;amp; E field, \(v_x = 0\)&lt;/h3&gt;
&lt;p&gt;If we add an E field, things get weird. It bounces up and down along the axis.&lt;/p&gt;
&lt;p&gt;That is not what I would have guessed the motion would be.&lt;/p&gt;
&lt;img style=&#34;border: 1px solid&#34; src=&#34;https://blog.c0nrad.io/v0_real.gif&#34;&gt;
&lt;h3 id=&#34;b--e-field-v_x--3&#34;&gt;B &amp;amp; E field, \(v_x = 3\)&lt;/h3&gt;
&lt;img style=&#34;border: 1px solid&#34; src=&#34;https://blog.c0nrad.io/v3_real.gif&#34;&gt;
&lt;p&gt;\(v_x = 3\) is to the right along the line it&amp;rsquo;s currently on.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s neat that the particle stays below the plane. Because in the next one&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;b--e-field-v_x---1&#34;&gt;B &amp;amp; E field, \(v_x = -1\)&lt;/h3&gt;
&lt;p&gt;This particle moves above the plane! And it&amp;rsquo;s interesting to note I &amp;ldquo;pushed&amp;rdquo; it with an initial velocity of -1, but the E and B field said no no and moved it to the right.&lt;/p&gt;
&lt;img style=&#34;border: 1px solid&#34; src=&#34;https://blog.c0nrad.io/v_minus1_real.gif&#34;&gt;
&lt;h3 id=&#34;b--e-field-v_x--2&#34;&gt;B &amp;amp; E field, \(v_x = 2\)&lt;/h3&gt;
&lt;p&gt;When v=2, the particle pinches at the bottom of it&amp;rsquo;s motion, and then goes back up.&lt;/p&gt;
&lt;img style=&#34;border: 1px solid&#34; src=&#34;https://blog.c0nrad.io/v2_real.gif&#34;&gt;
&lt;h2 id=&#34;what-went-well&#34;&gt;What went well?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m happy I setup Makefiles for all my projects. Having &amp;ldquo;make run&amp;rdquo; and &amp;ldquo;make deploy&amp;rdquo; for each projects makes development so much easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-did-not-go-well&#34;&gt;What did not go well?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I quickly copied some code (specifically the code for drawing vectorfields), and I didn&amp;rsquo;t change all the &amp;ldquo;e_field&amp;rdquo; to &amp;ldquo;b_field&amp;rdquo; and had a weird issue to debug. It ended up being two different issues in one. (the vectorfields were returning NaN).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;Nothing for this project. I might clean up emmy in the future though. It&amp;rsquo;s cool that adding magnetic fields was so easy.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d really like to move to relatavistic EM tensors. But, probably not going to do that anytime soon.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Klein Gordon Eqn via Connected Springs</title>
      <link>https://blog.c0nrad.io/posts/connect-springs/</link>
      <pubDate>Sat, 12 Sep 2020 14:35:23 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/connect-springs/</guid>
      <description>&lt;p&gt;Simulations Klein Gordon Eqn as a set of connected springs.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m currently reading &lt;a href=&#34;https://www.amazon.com/No-Nonsense-Quantum-Field-Theory-Student-Friendly/dp/3948763011&#34;&gt;No-Nonsense Quantum Field Theory&lt;/a&gt;. I like it a lot more than the other QFT books I have (purely because it&amp;rsquo;s dumbed down significantly.)&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a chunky book, and is doing an amazing job of introducing some pretty complex topics, but in a way that makes some intuitive sense.&lt;/p&gt;
&lt;p&gt;I finally got to one of the free field equations in the book, and I figured it&amp;rsquo;d be fun to codify a dumbed down version of the equation.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;First some background material before we talk about the equation.&lt;/p&gt;
&lt;p&gt;This will be pretty hand wavey. (Partly because it takes a decent amount of background knowledge to get to this point, and partly because I don&amp;rsquo;t understand that much).&lt;/p&gt;
&lt;h3 id=&#34;fields&#34;&gt;Fields&lt;/h3&gt;
&lt;p&gt;But in QFT, everything is treated as a &amp;ldquo;Field&amp;rdquo;. Fields are super simple to understand if you&amp;rsquo;re a programmer. Basically fields are functions that take in an X, Y, Z, and return a number. You can imagine having a function that gives you the temperature in the room based off the X, Y, Z coordinates.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s two complications to add to fields.&lt;/p&gt;
&lt;h3 id=&#34;special-relativity&#34;&gt;Special Relativity&lt;/h3&gt;
&lt;p&gt;First off, in quantum field theory the fields (and emergent particle excitations) will be moving near the speed of light, so we need to take into account special relativity.&lt;/p&gt;
&lt;p&gt;Special relativity is the idea that all reference frames are equally valid, and the speed of light is a constant for everyone. These two rules create some inconsistencies in the old way of thinking about space and time. If I&amp;rsquo;m moving near the speed of light and hold up a flash light, the light to me will appear to me to be going \( c = 300,000,000\frac{m}{s} \) . But to someone who is watching me go near the speed of light, my flashlight light will also look like it&amp;rsquo;s going \( c \) (not \( 2  c \) as we would have expected). That&amp;rsquo;s pretty weird.&lt;/p&gt;
&lt;p&gt;They key is that &amp;ldquo;time&amp;rdquo; isn&amp;rsquo;t quite what we thought, and it appears to be intimately related to space (hence spacetime).&lt;/p&gt;
&lt;p&gt;At any time we are moving through some combination of space or time. (And that sum is equal to a constant). For us humans, we almost exclusively move through &amp;ldquo;time&amp;rdquo;. But if you&amp;rsquo;re moving near the speed of light, you move mostly through space, and less through time. It&amp;rsquo;s said that photons are &amp;ldquo;timeless&amp;rdquo; because they move purely through space, and not through time. (since they are traveling at the speed of light.) I don&amp;rsquo;t think it&amp;rsquo;s too insightful to take that literally though.&lt;/p&gt;
&lt;p&gt;So, when dealing with things moving near the speed of light, we need to be careful that we respect the sum of space and time such that it&amp;rsquo;s constant with all frames. That constant is:&lt;/p&gt;
&lt;p&gt;$$ (\Delta s)^2 = (c \Delta t)^2 - (\Delta x)^2 - (\Delta y)^2 - (\Delta z)^2 $$&lt;/p&gt;
&lt;p&gt;This is known as the spacetime interval.&lt;/p&gt;
&lt;p&gt;That notation can be cumbersome, so scientist instead created a construct known as a four-vector:&lt;/p&gt;
&lt;p&gt;$$ x_\mu = \begin{pmatrix} ct \\ x \\ y \\ z \\ \end{pmatrix}
$$&lt;/p&gt;
&lt;p&gt;Now space and time are on the same footing. \( x_0, x_1, x_2, x_3 \) are just components of a vector&lt;/p&gt;
&lt;p&gt;They also define something called the Minkowski metric:&lt;/p&gt;
&lt;p&gt;$$ \eta = \begin{pmatrix} 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\ 0 &amp;amp; -1 &amp;amp; 0 &amp;amp; 0 \\  0 &amp;amp; 0 &amp;amp; -1 &amp;amp; 0 \\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; -1 \end{pmatrix}
$$&lt;/p&gt;
&lt;p&gt;So instead we can say:&lt;/p&gt;
&lt;p&gt;$$ (\Delta s)^2 = x_\mu \eta^{\mu \nu} x_\nu $$&lt;/p&gt;
&lt;p&gt;We also need a derivative (velocity) of space time. This can be defined as:&lt;/p&gt;
&lt;p&gt;$$ \partial_\mu = \frac{\partial}{\partial \eta^{\mu \nu} x_\nu } = \frac{\partial}{\partial x^\mu } = \begin{pmatrix} \frac{\partial}{c \partial t} \\ - \frac{\partial}{\partial x} \\ - \frac{\partial}{\partial y} \\ - \frac{\partial}{\partial z} \\ \end{pmatrix}$$&lt;/p&gt;
&lt;h3 id=&#34;types-of-fields&#34;&gt;Types of Fields&lt;/h3&gt;
&lt;p&gt;There can also be different types of Fields! For the programmer, this just means that those functions can return something other than a float!&lt;/p&gt;
&lt;p&gt;For example we can have a vector field, this means that at each X, Y, Z, we&amp;rsquo;ll get back a Vector{X: 1, Y: 3, Z: 3}. This could be useful for example if you want to model wind at each point in space. We know that window is blowing in some direction, so at each point you put a vector there to represent how fast and in which direction the wind is blowing.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s one last important type of Field (besides scalar (float), and Vector), and that&amp;rsquo;s a spinor field. Spinors are very interesting, and of extreme importance for our current map of reality, but we won&amp;rsquo;t be talking about them in this post. They can be represented by two complex numbers, and they &amp;ldquo;spin&amp;rdquo; onto each other, they&amp;rsquo;re very weird, and not easy to visualize. But all fermions (matter particles), are represented by spinor fields, so I&amp;rsquo;m sure I&amp;rsquo;ll write about them one day.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll only talk about scalar fields. (The Higgs field is an example of a scalar field, but that doesn&amp;rsquo;t matter).&lt;/p&gt;
&lt;h3 id=&#34;lagrangian&#34;&gt;Lagrangian&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ll write a full post about this another day, but Lagrangian mechanics is another formulation of physics that can be used to derive equations of motions based off the idea that &amp;ldquo;nature is lazy&amp;rdquo;. If you accept the assumption that nature wants to minimize the &amp;ldquo;Action&amp;rdquo; of a system (usually defined classically as Kinetic (T) - Potential (V) energy), you can figure out the laziest path possible, and that&amp;rsquo;s the correct one!&lt;/p&gt;
&lt;p&gt;For example when you throw a ball in the air, why doesn&amp;rsquo;t the ball go any higher or lower in it&amp;rsquo;s arc? What&amp;rsquo;s to stop it from going at a slightly higher or lower in it&amp;rsquo;s trajectory if it going to end in the same spot? There&amp;rsquo;s an infinite amount of paths that it could go.&lt;/p&gt;
&lt;p&gt;You can get the same answers using Newtons formulation. Normally for simple systems newton&amp;rsquo;s methods are easier \( (\bm{F} = m \bm{a}) \), but in other situations, the Lagrangian (or another formulation called Hamiltonian mechanics) are easier to use!&lt;/p&gt;
&lt;p&gt;Back to the ball, if you assume nature is lazy and wants to minimize the Action (T-V), you&amp;rsquo;ll also get the correct path. It&amp;rsquo;s very similar to Fermat&amp;rsquo;s principle which showed that light takes the path of least time.&lt;/p&gt;
&lt;p&gt;In everyday usage of Lagrangian, you figure out the Lagrangian \( L \) and then plug it into the Euler-Lagrange Equation:&lt;/p&gt;
&lt;p&gt;$$ \frac{\partial L}{\partial q} - \frac{d}{dt} \left( \frac{\partial L}{\partial \dot{q}} \right) = 0 $$&lt;/p&gt;
&lt;p&gt;For relativistic fields, a slightly different version of the Euler-Lagrange equation is used:&lt;/p&gt;
&lt;p&gt;$$ \frac{\partial \mathcal{L}}{\partial \phi} - \partial_\mu \left( \frac{\partial \mathcal{L}}{\partial (\partial_\mu \phi)} \right) = 0 $$&lt;/p&gt;
&lt;p&gt;They look pretty similar, except \( \phi \) is used instead of position. And instead of \( \dot{q} \) as velocity, the relativistic derivative is used \( \partial_\mu \phi \).&lt;/p&gt;
&lt;h2 id=&#34;klein-gordon-equation&#34;&gt;Klein Gordon Equation&lt;/h2&gt;
&lt;p&gt;The Klein Gordon is the simplest of the free field wave equations. Free field just means &amp;ldquo;non-interacting&amp;rdquo;. The Klein Gordon equation describes how scalar fields evolve over time.&lt;/p&gt;
&lt;p&gt;For example, you could imagine using the Klein Gordon equation to understand how temperature mixes around in a room over time. Except instead of temperature you use relativistic quantum scalar fields.&lt;/p&gt;
&lt;h3 id=&#34;the-lagrangian&#34;&gt;The Lagrangian&lt;/h3&gt;
&lt;p&gt;The Lagrangian for the klein gordon equation is the following. Don&amp;rsquo;t ask how to figure it out (I don&amp;rsquo;t know). If I understand correctly, people in the past figured out the Klein-Gordon equation, and then worked back to get the Lagrangian (normally it&amp;rsquo;s the other way, but the quantum world is weird and non-intuitive).&lt;/p&gt;
&lt;p&gt;$$ \mathcal{L} = \frac{1}{2} ( \partial_\mu \phi \partial^\mu \phi - m^2 \phi^2 ) $$&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a weird equation, but it kind of intuitively makes sense if we pull it apart. Remember L is of the form of kinetic - potential. And the first term kind of looks like kinetic energy. It&amp;rsquo;s the velocity of the field squared, similar to \( \frac{1}{2} m v^2 \). And the second term is the potential which is \( - \frac{1}{2} m^2 \phi^2 \). For a spring the potential is \(-\frac{1}{2}kx^2 \). Not that different.&lt;/p&gt;
&lt;p&gt;You may notice that the \( \mu \) is upstairs on one of the partial derivatives, and downstairs on another partial derivative. That&amp;rsquo;s to satisfy the relativistic spacetime interval we talked about earlier. \( (\Delta s)^2 = x_\mu \eta^{\mu \nu} x_\nu = x_\mu x^\mu \).&lt;/p&gt;
&lt;h3 id=&#34;klein-gordon-equation-1&#34;&gt;Klein Gordon Equation&lt;/h3&gt;
&lt;p&gt;So, we plug the Lagrangian into the Euler-Lagrange for fields and get back the &lt;strong&gt;Klein Gordon Equation&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;$$ (\partial_\mu \partial^\mu + m^2) \phi = 0 $$&lt;/p&gt;
&lt;p&gt;What does it mean? Well it can kind of be thought of as a set of springs where each spring is also attached to the spring next to it.&lt;/p&gt;
&lt;p&gt;If we expand the Lagrangian (in one direction x) we get:&lt;/p&gt;
&lt;p&gt;$$ \frac{1}{2} \left( \left(\frac{\partial}{c \partial t} \phi\right)^2  - \left(\frac{\partial \phi}{\partial x} \right)^2 -m^2 \phi^2\right) $$&lt;/p&gt;
&lt;p&gt;The first term, \( \left(\frac{\partial}{c \partial t} \phi\right)^2 \), is the kinetic energy of the harmonic oscillators. It&amp;rsquo;s related to the &amp;ldquo;change of the field over time&amp;rdquo; similar to the velocity of the field.&lt;/p&gt;
&lt;p&gt;The second term, \( - \left(\frac{\partial \phi}{\partial x} \right)^2 \), is subtracted, meaning it&amp;rsquo;s a potential, and deals with the change of the field in relation to space. So the parts of the field that are significantly higher than nearby points will be brought down. It&amp;rsquo;s similar to rubber bands connected to neighboring elements of the field.&lt;/p&gt;
&lt;p&gt;The last term \( -m^2 \phi^2 \) is the potential energy of the individual elements of the field, similar to a spring. If \( \phi \) is high at some point, it will be brought down quickly.&lt;/p&gt;
&lt;p&gt;So overall the Klein Gordon kind of seems like an array of springs that are connected to each other!&lt;/p&gt;
&lt;p&gt;We can easily program that!&lt;/p&gt;
&lt;h3 id=&#34;simulation&#34;&gt;Simulation&lt;/h3&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;video controls src=&#34;https://blog.c0nrad.io/k1j10.mp4&#34; style=&#34;width: 75%;&#34;  loop &gt;&lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;So, each of the little &amp;ldquo;*&amp;rdquo; are a mass element attached to a string. I start the simulation by pulling one of the springs up 10 units and then releasing it. You can see all the resulting waves.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s pretty cool to watch all the resulting frequencies of waves that are created by a single pluck. Another day I might perform some Fast Fourier Transforms and watch which frequencies become dominate based off of different parameters and interactions.&lt;/p&gt;
&lt;p&gt;Also, I connected the left and right side of the springs. So it warps around. It&amp;rsquo;s actually a &amp;ldquo;circle&amp;rdquo; of connected springs.&lt;/p&gt;
&lt;h4 id=&#34;tunning-k-and-j&#34;&gt;Tunning K and J&lt;/h4&gt;
&lt;p&gt;There&amp;rsquo;s two main constants to tune. The first K, is the standard spring constant. The second (J) is the strength of the band between the springs.&lt;/p&gt;
&lt;h5 id=&#34;k10-j1&#34;&gt;K=10, J=1&lt;/h5&gt;
&lt;p&gt;The individual springs dominate the bands between the springs.&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;video controls src=&#34;https://blog.c0nrad.io/k10j1.mp4&#34; style=&#34;width: 75%;&#34;  loop &gt;&lt;/video&gt;
&lt;/div&gt;
&lt;h5 id=&#34;k1-j10&#34;&gt;K=1, J=10&lt;/h5&gt;
&lt;p&gt;The bands between springs dominates over the spring constant.&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;video controls src=&#34;https://blog.c0nrad.io/k1j10.mp4&#34; style=&#34;width: 75%;&#34;  loop &gt;&lt;/video&gt;
&lt;/div&gt;
&lt;h5 id=&#34;k5-j5&#34;&gt;K=5, J=5&lt;/h5&gt;
&lt;p&gt;The two terms are equal:&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;video controls src=&#34;https://blog.c0nrad.io/k5l5.mp4&#34; style=&#34;width: 75%;&#34;  loop &gt;&lt;/video&gt;
&lt;/div&gt;
&lt;h4 id=&#34;two-plucks&#34;&gt;Two Plucks&lt;/h4&gt;
&lt;p&gt;Two plucks in the field:&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;video controls src=&#34;https://blog.c0nrad.io/2k1j10.mp4&#34; style=&#34;width: 75%;&#34;  loop &gt;&lt;/video&gt;
&lt;/div&gt;
&lt;h2 id=&#34;what-went-well&#34;&gt;What went well&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Everything went pretty well. I used semi-implicit euler as my integrator, the standard terminal ansi escape codes for drawing the display, the code is pretty small.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Somewhat unrelated, but the fact that \( cos(kx - wt) \) is what we use to model waves for some many phenomena, and that the minkowski metric can be written as -1,1,1,1 or, (x-t) just seems too beautiful. The fact that waves travel both through time and space was always very weird to me. At any point you can travel either through time or space and get to the same &amp;ldquo;spot&amp;rdquo;. The fact that relativity puts them together like that makes so much sense. I absolutely love it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;future&#34;&gt;Future&lt;/h2&gt;
&lt;p&gt;I think it&amp;rsquo;d be super cool to extract out the resulting frequencies from each pluck.&lt;/p&gt;
&lt;p&gt;More importantly, it&amp;rsquo;s time to move to the most important equation&amp;hellip; the Dirac Equation. Time to understand spinors.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spherical Bug</title>
      <link>https://blog.c0nrad.io/posts/spherical-bug/</link>
      <pubDate>Wed, 09 Sep 2020 09:16:42 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/spherical-bug/</guid>
      <description>&lt;p&gt;Discussion of one of my longest living software bugs.&lt;/p&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;Many moons ago I built a little tool to visualize the electron orbitals of hydrogen:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.c0nrad.io/hydrogenjs&#34;&gt;https://blog.c0nrad.io/hydrogenjs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At the time I thought it was correct, but on reddit and HN a few people mentioned that it didn&amp;rsquo;t look correct. People quoted &amp;ldquo;rotational symmetry&amp;rdquo; but someone else (who had a degree in physics) said it looked fine. From my experience in computer security, normally there&amp;rsquo;s a lot of people who don&amp;rsquo;t know what they&amp;rsquo;re talking about, so I wasn&amp;rsquo;t really sure what&amp;rsquo;s right or wrong.&lt;/p&gt;
&lt;p&gt;Well, thankfully someone who did know what they were talking about opened a github issue on the code and explained the issue a little more clearly, (and pointed out a separate issue!).&lt;/p&gt;
&lt;p&gt;The issue made a little more sense, and after downloading some mobile app that also showed the states, I could see that my diagrams were indeed a little bit different.&lt;/p&gt;
&lt;p&gt;So I messed around quite a bit, it looked wrong, but I had no idea why. I tried different integration strategies, different ranges, different strategies for normalizing the probabilities. Nothing seemed to work.&lt;/p&gt;
&lt;p&gt;So then last weekend I re-wrote the whole thing in Javascript (&lt;a href=&#34;https://github.com/c0nrad/hydrogenjs)&#34;&gt;https://github.com/c0nrad/hydrogenjs)&lt;/a&gt;. It still didn&amp;rsquo;t work.&lt;/p&gt;
&lt;p&gt;I verified all the equations:&lt;/p&gt;
&lt;p&gt;(This page is very slow, it calculates all the equations dynamically):
&lt;a href=&#34;https://blog.c0nrad.io/hydrogenjs#formulas&#34;&gt;https://blog.c0nrad.io/hydrogenjs#formulas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And they all looked fine.&lt;/p&gt;
&lt;p&gt;Eventually I reached out to one of my professors here at college (I went back to college!), and he suggested that maybe something to do with complex wavefunctions?&lt;/p&gt;
&lt;h1 id=&#34;the-problem--solution&#34;&gt;The problem / solution&lt;/h1&gt;
&lt;p&gt;It ended up being something very dumb. It turns out that not everyone uses phi/theta the same way for spherical coordinates. I was using phi/theta the way Griffiths uses it in his Quantum Mechanics book uses them, but my 3D library threats phi/theta in reverse. (phi=theta, theta=phi).&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s frustrating that the charts looked relativity okay, had there been giant gaps or something it would have been obvious something was wrong, but only on some of the states did it look obviously wrong.&lt;/p&gt;
&lt;p&gt;Anyways, once I made the one line change, it worked fine.&lt;/p&gt;
&lt;p&gt;A little frustrating, but also exciting. This had been bugging me for almost 4 months now.&lt;/p&gt;
&lt;p&gt;But now it&amp;rsquo;s live, and a full dynamic javascript version:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.c0nrad.io/hydrogenjs&#34;&gt;https://blog.c0nrad.io/hydrogenjs&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;next&#34;&gt;Next&lt;/h1&gt;
&lt;p&gt;It&amp;rsquo;s possible i&amp;rsquo;ll be doing some research with one my professors here at MTU. So many one of my models will have &amp;ldquo;practical&amp;rdquo; use! We&amp;rsquo;ll see.&lt;/p&gt;
&lt;p&gt;Until then, I have a huge list of things I want to program, I plan on doing one this weekend, see ya then!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Scattering Angles</title>
      <link>https://blog.c0nrad.io/posts/scattering-angles/</link>
      <pubDate>Sun, 30 Aug 2020 12:14:51 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/scattering-angles/</guid>
      <description>&lt;p&gt;Calculating scattering angles from fully elastic spherical collision.&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;video controls src=&#34;https://blog.c0nrad.io/collisions.mp4&#34; style=&#34;width: 75%;&#34; autoplay loop &gt;&lt;/video&gt;
&lt;/div&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;In one of my &lt;a href=&#34;https://blog.c0nrad.io/posts/calculating-collisions-2/&#34;&gt;first blog posts&lt;/a&gt;, I talked about the difficulty I had with calculating the resulting angles from a collision of two spheres.&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;video controls src=&#34;https://blog.c0nrad.io/bad_sphere_angle.mp4&#34; style=&#34;width: 75%;&#34; autoplay loop &gt;&lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;I could bounce objects off each other, but not at an angle.&lt;/p&gt;
&lt;p&gt;Well, fast forward to today (5 months later), I&amp;rsquo;m now in school for physics (undergrad)! And a little bit better prepared to tackle the problem.&lt;/p&gt;
&lt;p&gt;I reached out to my professor of classical mechanics about the above problem, and he suggested I read Ch. 14 of Taylor&amp;rsquo;s Mechanics on Collision Theory. The chapter was pretty interesting, and it was stuff I wanted to learn sooner or later. I&amp;rsquo;m hoping soon I can start modeling particle collisions (a long term goal of mine, I&amp;rsquo;m about halfway through &amp;ldquo;Elementary Particles&amp;rdquo; by Griffiths).&lt;/p&gt;
&lt;p&gt;Anyways, in Taylor&amp;rsquo;s book, example 14.5 talks about hard sphere scattering, and it turns out that the angle of incidence and reflection are equal. Kind of reminds me of bouncing photons off a medium.&lt;/p&gt;
&lt;p&gt;To be honest, I don&amp;rsquo;t quite understand why the angles should be equal. There&amp;rsquo;s probably some beautiful action/Lagrangian minimization that shows that it must be the path. I&amp;rsquo;ll solve that another day.&lt;/p&gt;
&lt;p&gt;But, poking around some more, I found out that &lt;a href=&#34;https://en.wikipedia.org/wiki/Elastic_collision#Two-dimensional&#34;&gt;wikipedia&lt;/a&gt; lists the equations I needed:&lt;/p&gt;
&lt;p&gt;$$ \bm{v_1 \prime} = \bm{v_1} - \frac{2m_2}{m_1 + m_2} \frac{ &amp;lt; \bm{v_1} - \bm{v_2}, \bm{x_1} - \bm{x_2}&amp;gt;}{ || \bm{x_1} - \bm{x_2} ||^2} ( \bm{x_1} - \bm{x_2}) $$&lt;/p&gt;
&lt;p&gt;$$ \bm{v_2 \prime} = \bm{v_1} - \frac{2m_1}{m_1 + m_2} \frac{ &amp;lt; \bm{v_2} - \bm{v_1}, \bm{x_2} - \bm{x_1}&amp;gt;}{ || \bm{x_2} - \bm{x_1} ||^2} ( \bm{x_2} - \bm{x_1}) $$&lt;/p&gt;
&lt;p&gt;With this, I could put a bunch of balls into a container and watch them bounce! I think I might use this in the future to do some Statistical Mechanics/Boltzman entropy modeling fun later:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/bouncy.gif&#34; alt=&#34;bouncy&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;scattering&#34;&gt;Scattering&lt;/h2&gt;
&lt;p&gt;Anyways, I figured it&amp;rsquo;d be fun to build something similar to Rutherford&amp;rsquo;s Scattering Experiment:&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;video controls src=&#34;https://blog.c0nrad.io/collisions.mp4&#34; style=&#34;width: 75%;&#34; autoplay loop &gt;&lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;(&lt;a href=&#34;https://github.com/scatter&#34;&gt;Code&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;It turned out pretty nice.&lt;/p&gt;
&lt;p&gt;From this I was able to plot the scattering angle against the impact parameter (b, how much offset the two items are).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/scatter.png&#34; alt=&#34;scatter&#34;&gt;
(&lt;a href=&#34;https://github.com/scatter&#34;&gt;Code&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Pretty neat stuff. It&amp;rsquo;s cool how often stuff bounces back. I imagine this is probably similar to what Rutherford saw all those years ago.&lt;/p&gt;
&lt;h3 id=&#34;what-was-difficult&#34;&gt;What was difficult&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In terminal, character height is twice as much as character width, so the points appears to move much faster in one direction. So instead the renderer now treats one character height as 2 units of length&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m using a very simple time-stepping integrator, and some of the incident angles are pretty sensitive, so if the ball moves to fast I&amp;rsquo;ll get nonsense collision angles since the circles will be on top of each other
&lt;ul&gt;
&lt;li&gt;The correct thing to do would be to reverse the simulation till the two spheres are at the point of collision, and then calculate the angles&lt;/li&gt;
&lt;li&gt;Being lazy, I just set the timestep to 1000 frames/second, in the future I&amp;rsquo;ll go back and do it correct&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Otherwise not much. I wish I understood the math behind the collisions better.&lt;/p&gt;
&lt;h3 id=&#34;what-went-well&#34;&gt;What went well&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I really prefer doing graphics in terminal compared to rendering in 3d with webgl, being able to quickly iterate is very nice.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;future&#34;&gt;Future&lt;/h3&gt;
&lt;p&gt;Probably nothing for this project. Up next I want to calculate the Clebsh-Gordan coefficients. Eventually I&amp;rsquo;ll come back to this for elementary particle collisions. First will probably be relativistic collisions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hydrogen Spectral Diagram</title>
      <link>https://blog.c0nrad.io/posts/spectral/</link>
      <pubDate>Sat, 29 Aug 2020 10:59:09 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/spectral/</guid>
      <description>&lt;p&gt;Terminal application showing the spectral lines for electron transitions in hydrogen.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;I thought it would be fun to create a little colorful application showing the spectral lines of hydrogen.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;Electrons in hydrogen can be at different energy levels. The energy levels are designated by \( n \), and have the energy:&lt;/p&gt;
&lt;p&gt;$$ E_n = -\left[ \frac{m_e}{2\hbar^2} \left( \frac{e^2}{4 \pi \epsilon_0} \right)^2 \right] \frac{1}{n^2} $$&lt;/p&gt;
&lt;p&gt;When an electron jumps from one level to another (such as n=3 to n=1), a photon is emitted with the energy equal to the change in energy states.&lt;/p&gt;
&lt;p&gt;We also know that the energy of the photon is related to it&amp;rsquo;s frequency (and therefor wavelength).&lt;/p&gt;
&lt;p&gt;$$ E = h f $$&lt;/p&gt;
&lt;p&gt;$$ c = \lambda f $$&lt;/p&gt;
&lt;p&gt;$$ \therefore \lambda = \frac{h c}{E} $$&lt;/p&gt;
&lt;p&gt;So, we can iterate through each of the energy levels for an electron in hydrogen and see what types of photons they will let out. Some of those photons will be in the visible light spectrum!&lt;/p&gt;
&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;
&lt;p&gt;I built a little Go app to build the spectral diagram. &lt;a href=&#34;https://github.com/c0nrad/spectral&#34;&gt;https://github.com/c0nrad/spectral&lt;/a&gt;. Here&amp;rsquo;s the output of the program:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/spectral.png&#34; alt=&#34;Spectral Diagram&#34;&gt;&lt;/p&gt;
&lt;p&gt;For the transitions, if the resulting wavelength was in the visible wavelength I printed it with it&amp;rsquo;s corresponding color.&lt;/p&gt;
&lt;p&gt;I thought that there would be more color! I didn&amp;rsquo;t realize that only the Balmer series (n=2) had color!&lt;/p&gt;
&lt;h2 id=&#34;what-went-well&#34;&gt;What went well?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GoLang&amp;rsquo;s big.Float was useful for high precision floats.&lt;/li&gt;
&lt;li&gt;For the display I used the ANSI escape characters for cursor position and color. Works super smoothly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;other-thoughts&#34;&gt;Other thoughts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I need a better way to store the &amp;ldquo;units&amp;rdquo; along with my variables. I name the variables based on their units, but that&amp;rsquo;s dumb, I wish the unit type information was stored with the value, but it&amp;rsquo;s kind of overkill to build some struct for a small project like this.
&lt;ul&gt;
&lt;li&gt;But it&amp;rsquo;d be super nice to be able to just convert types without having to hardcode JoulesToEV and such.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;closing-remarks&#34;&gt;Closing Remarks&lt;/h1&gt;
&lt;p&gt;None really, it was a fun project. I wish the hydrogen spectrum had more colors! Next up I&amp;rsquo;m thinking of calculating Clebsh-Gordan coefficients. My quantum angular momentum/spin addition is not as good as it should be.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Interference</title>
      <link>https://blog.c0nrad.io/posts/interference/</link>
      <pubDate>Tue, 18 Aug 2020 18:53:54 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/interference/</guid>
      <description>&lt;p&gt;Double Slit Interference Pattern demo.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Some fun news, I&amp;rsquo;m officially going back to college for Physics!&lt;/p&gt;
&lt;p&gt;I got my first homework assignment, and one of the questions was on double slit interference. I figured I&amp;rsquo;d make a little demo.&lt;/p&gt;
&lt;h2 id=&#34;double-slit-interference&#34;&gt;Double Slit Interference&lt;/h2&gt;
&lt;p&gt;The double slit experiment was one of the most famous experiments in history. I don&amp;rsquo;t want to cover it here since it&amp;rsquo;s been covered a million times.&lt;/p&gt;
&lt;p&gt;But it blows my mind that scientist have done the experiment by firing single electrons and it still worked. Nature is crazy.&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;So I made a little tool to play with some values of the experiment.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a diagram of the setup:&lt;/p&gt;
&lt;img style=&#34;border: 1px solid&#34; src=&#34;https://blog.c0nrad.io/inter.png&#34;&gt;
&lt;p&gt;I assume there&amp;rsquo;s two point light sources, and instead of using the standard \( d sin(\theta) = m \lambda \) equation for finding the maxima, I calculated the wavelength of each source independently, and then just add the phase to calculate intensity.&lt;/p&gt;
&lt;p&gt;Source:
&lt;a href=&#34;https://github.com/c0nrad/interference&#34;&gt;https://github.com/c0nrad/interference&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;simulation&#34;&gt;Simulation&lt;/h2&gt;
&lt;iframe src=&#34;https://blog.c0nrad.io/interference&#34; style=&#34;border: 1px solid; width: 100%; height: 300px&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.c0nrad.io/interference&#34;&gt;Raw Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some fun things to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The chart color changes based on wavelength.&lt;/li&gt;
&lt;li&gt;It kind of blows my mind that the interference pattern appears in the [mm] scale, but the wavelengths are in the nm scale.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;things-that-went-well&#34;&gt;Things that went well&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Javascript&amp;rsquo;s precision wasn&amp;rsquo;t high enough at first, specially since the wall is 4m away and the wavelength is in the nanometer scale. So the nanometer components were being truncated. I ended up using some library called decimal.js that worked well.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;open-questions&#34;&gt;Open questions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How does the intensity drop off as the fringes get further away from the middle? It looks like a \( sinc \) function, but not sure.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;future&#34;&gt;Future&lt;/h2&gt;
&lt;p&gt;Probably nothing. It was a fun little exercise. Although it ended up taking the better part of a day to complete. (I was playing with Preact for a bit, but I love angular&amp;rsquo;s two-way data-binding. So I switched back.)&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve also been working on a computer algebra system (called &lt;a href=&#34;https://github.com/c0nrad&#34;&gt;Meth.js&lt;/a&gt;). I&amp;rsquo;m hoping it soon gets to the point where I can just feed it a couple of equations and some input with units, and it&amp;rsquo;ll figure out any other value I&amp;rsquo;d be interested in calculating.&lt;/p&gt;
&lt;p&gt;Toodles.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Matrix Inversion</title>
      <link>https://blog.c0nrad.io/posts/mat-inv/</link>
      <pubDate>Fri, 07 Aug 2020 18:37:01 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/mat-inv/</guid>
      <description>&lt;p&gt;Some fun inverting matrixes.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m currently reading through Griffiths&amp;rsquo; Particle Physics book, and problem 3.7 ask you to find the inverse of this matrix:&lt;/p&gt;
&lt;p&gt;$$ \Lambda = \begin{vmatrix}
\gamma &amp;amp; -\gamma\beta &amp;amp; 0 &amp;amp; 0 \\
-\gamma\beta &amp;amp; \gamma &amp;amp; 0 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 \\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 \end{vmatrix} $$&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s been awhile since I took Linear Algebra, I wasn&amp;rsquo;t sure if it was even possible to easily invert a matrix. Something about \( det(A) \)?.&lt;/p&gt;
&lt;p&gt;I figured it&amp;rsquo;d be a fun problem to solve pragmatically. So I jumped to wiki and found this boss equation:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/cayley.png&#34; alt=&#34;cayley&#34;&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Invertible_matrix#Cayley%E2%80%93Hamilton_method&#34;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not even going to try and replicated that in LaTeX. But it looks cool.&lt;/p&gt;
&lt;p&gt;Off to coding!&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Well the code is done:
&lt;a href=&#34;https://github.com/c0nrad/matInv/blob/master/matrix.ts&#34;&gt;https://github.com/c0nrad/matInv/blob/master/matrix.ts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I ended up not using Cayley-Hamilton equation.&lt;/p&gt;
&lt;p&gt;Turns out instead you can take the &amp;ldquo;adjugate&amp;rdquo; of the matrix and multiply it by the inverse of the determinate. This is related to &lt;a href=&#34;https://en.wikipedia.org/wiki/Cramer%27s_rule#Finding_inverse_matrix&#34;&gt;Cramer&amp;rsquo;s Rule&lt;/a&gt;. (No idea what that is.)&lt;/p&gt;
&lt;p&gt;The adjugate is the co-factor of the matrix (again, don&amp;rsquo;t really know what that is), but you can calculate it by taking a bunch of little determinates of the matrix. The determinate is sort of the area &amp;ldquo;scaling&amp;rdquo; factor of a matrix. Highly recommend the &lt;a href=&#34;https://www.youtube.com/watch?v=Ip3X9LOh2dk&amp;amp;vl=en&#34;&gt;3Blue1Brown&lt;/a&gt; video on the subject.&lt;/p&gt;
&lt;p&gt;The code is kind of cool, it uses a &lt;a href=&#34;https://github.com/c0nrad/matInv/blob/master/matrix.ts#L143&#34;&gt;recursive solution&lt;/a&gt; to find the determinate, and should work fine on larger matrixes (&amp;lsquo;fine&amp;rsquo; as in correct, not fast, it&amp;rsquo;s a slow algorithm). To do the recursive det&amp;rsquo;s I made up this matrix operator &amp;lsquo;splice&amp;rsquo; that&amp;rsquo;ll return a new matrix without the specified row and col. No idea if it&amp;rsquo;s original, but it worked super well.&lt;/p&gt;
&lt;h2 id=&#34;solving-the-problem&#34;&gt;Solving the problem&lt;/h2&gt;
&lt;p&gt;Sadly, I should have spent 1 extra second thinking before I rushed to programming a solution. Programming won&amp;rsquo;t help me here (unless I was to use a symbolic system).&lt;/p&gt;
&lt;p&gt;The solution to this problem plays on the relation of \( \gamma \beta \) in a pretty clever way.&lt;/p&gt;
&lt;p&gt;(I tried to be clever with the numerical solver and substitute in primes and try to deduce the relation, but I quickly gave up.)&lt;/p&gt;
&lt;p&gt;To invert between position vectors, you just switch the sign! It&amp;rsquo;s actually pretty neat that it works.&lt;/p&gt;
&lt;p&gt;$$ x\prime = \gamma (x - vt) $$
$$ t\prime = \gamma(t-\frac{v}{c^2}x) $$&lt;/p&gt;
&lt;p&gt;With:&lt;/p&gt;
&lt;p&gt;$$ \gamma = \frac{1}{\sqrt{1-\frac{v^2}{c^2}}} $$&lt;/p&gt;
&lt;p&gt;Then to switch back:&lt;/p&gt;
&lt;p&gt;$$ x = \gamma (x\prime + v t\prime) $$
$$ t = \gamma (t\prime + \frac{v}{c^2} x\prime) $$&lt;/p&gt;
&lt;p&gt;So the actual matrix of inversion is:&lt;/p&gt;
&lt;p&gt;$$ \Lambda^{-1} = \begin{vmatrix}
\gamma &amp;amp; \gamma\beta &amp;amp; 0 &amp;amp; 0 \\
\gamma\beta &amp;amp; \gamma &amp;amp; 0 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 \\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 \end{vmatrix} $$&lt;/p&gt;
&lt;p&gt;And if you multiple them together, you get \( \bm{I} \)&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Two seconds of thinking could have saved me 2hrs of programming. But it was a fun exercise. &lt;a href=&#34;https://i.imgflip.com/1ubz5z.jpg&#34;&gt;No ragrets&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vector Calculus Part 3: Electric Dipole</title>
      <link>https://blog.c0nrad.io/posts/vector-3-dipole/</link>
      <pubDate>Tue, 21 Jul 2020 18:37:01 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/vector-3-dipole/</guid>
      <description>&lt;p&gt;More fun with vector calc/electromagnetism.&lt;/p&gt;
&lt;h2 id=&#34;electric-dipole&#34;&gt;Electric Dipole&lt;/h2&gt;
&lt;div style=&#34;width: 100%; text-align: center&#34;&gt;
&lt;canvas width=&#34;700&#34; height=&#34;600&#34; id=&#34;canvas_dipole&#34;&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;p&gt;So in the above diagram there&amp;rsquo;s a positive and negative charge, and the little floaty red dots are &amp;ldquo;test charges&amp;rdquo;. (You may need to zoom in with mouse scroll)&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m trying to figure out the best way to visualize electric fields. I think this is better than the &lt;a href=&#34;https://blog.c0nrad.io/posts/vector-2-viz/#vector-field&#34;&gt;previous attempt&lt;/a&gt;, but still not great.&lt;/p&gt;
&lt;p&gt;I worry that it will give the impression that there are things moving in the electric field.&lt;/p&gt;
&lt;p&gt;Some other ideas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have it like a gif, where every second it resets&lt;/li&gt;
&lt;li&gt;Have the test points leave a &amp;ldquo;path&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Keep it simple, only show 2D slices&lt;/li&gt;
&lt;li&gt;Go back to vectors, and keep them all the same size, but change alpha based on magnitude&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some inspiration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/LB8Rhcb4eQM?t=200&#34;&gt;https://youtu.be/LB8Rhcb4eQM?t=200&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/rB83DpBJQsE?t=154&#34;&gt;https://youtu.be/rB83DpBJQsE?t=154&lt;/a&gt; (I like how the length is based on the magnitude)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I thought about using a density, but E is a vector field, and so needs to display direction.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll see. But progress is being made!&lt;/p&gt;
&lt;script src=&#34;https://cdn.jsdelivr.net/gh/c0nrad/vector/examples/dipole/app_v1.js&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>Vector Calculus Part 2: Visualization</title>
      <link>https://blog.c0nrad.io/posts/vector-2-viz/</link>
      <pubDate>Mon, 20 Jul 2020 21:04:09 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/vector-2-viz/</guid>
      <description>&lt;p&gt;Playing with three.js to do some vector visualizations.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;So I started building out a toolkit for visualizing the vector library.&lt;/p&gt;
&lt;p&gt;Eventually I&amp;rsquo;d like to create a little playpen where you can add different types of electrostatic objects (points, lines, surfaces, volumes), and you can see their effect on the E vector field.&lt;/p&gt;
&lt;p&gt;Until then, I&amp;rsquo;m trying to figure out how to best display stuff!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m happy with the progress, but not particularly happy with the results.&lt;/p&gt;
&lt;h3 id=&#34;vector-addition&#34;&gt;Vector Addition&lt;/h3&gt;
&lt;div style=&#34;text-align: center&#34; &gt;
&lt;canvas id=&#34;canvas_add&#34; width=&#34;600&#34; height=&#34;400&#34;&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s two vectors being added together. Blue + Green = Red.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;canvas_add&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;canvas_add&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HTMLCanvasElement&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;viz&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Viz&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;canvas_add&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;origin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a_color&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000ff&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b_color&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00ff00&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c_color&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff0000&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;drawVector&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;origin&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a_color&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;drawVector&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;origin&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b_color&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;drawVector&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;origin&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c_color&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;drawVector&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b_color&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;drawVector&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a_color&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;dot-product&#34;&gt;Dot Product&lt;/h2&gt;
&lt;div style=&#34;text-align: center&#34; &gt;
&lt;canvas id=&#34;canvas_dotproduct&#34; width=&#34;600&#34; height=&#34;400&#34;&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;p&gt;I do not like any type of visualization I could find for dot product. I&amp;rsquo;m going to think more about this, but I think the best way to understand dot product is to just look at the math:&lt;/p&gt;
&lt;p&gt;$$ \bm{a} \cdot \bm{b} = | \bm{a}| |\bm{b}| cos(\theta) $$&lt;/p&gt;
&lt;p&gt;The length of the two vectors multiplied, times the cos of the angle between the two. So the closer aligned the two vectors are, the bigger the dot product.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to note that the dot product results a scalar, not a vector.&lt;/p&gt;
&lt;h2 id=&#34;cross-product&#34;&gt;Cross Product&lt;/h2&gt;
&lt;div style=&#34;text-align: center&#34; &gt;
    &lt;canvas id=&#34;canvas_crossproduct&#34; width=&#34;600&#34; height=&#34;400&#34;&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;canvas_dotproduct&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;canvas_dotproduct&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HTMLCanvasElement&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v_dotproduct&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;viz&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Viz&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;canvas_dotproduct&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dotproduct&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dotProduct&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;v_dotproduct&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;drawVector&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;origin&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a_color&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;v_dotproduct&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;drawVector&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;origin&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b_color&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The cross product is pretty similar to the dot product, but it returns a vector that is orthogonal to the two original vectors.&lt;/p&gt;
&lt;p&gt;$$ \bm{a} \times \bm{b} = | \bm{a}| |\bm{b}| sin(\theta) \hat{\bm{n}} $$&lt;/p&gt;
&lt;p&gt;I think you can say that the magnitude of the vector is equivalent to the area of the parallelogram of two vectors? Which makes sense, because you can determine the area of a triangle using a similar formula:&lt;/p&gt;
&lt;p&gt;$$ Area_{triangle} = \frac{1}{2} * a * b * sin(C) $$&lt;/p&gt;
&lt;h2 id=&#34;vector-field&#34;&gt;Vector Field&lt;/h2&gt;
&lt;div style=&#34;text-align: center&#34; &gt;
&lt;canvas id=&#34;canvas_vf1&#34; width=&#34;600&#34; height=&#34;400&#34;&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;p&gt;My first attempt at plotting a vector field, I &lt;em&gt;really&lt;/em&gt; don&amp;rsquo;t like this one. It&amp;rsquo;s super hard to glean what it&amp;rsquo;s trying to say.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vf1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;VectorField&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Func&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x* y&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Func&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Func&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;canvas_vf1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;canvas_vf1&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HTMLCanvasElement&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;viz_vf1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;viz&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Viz&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;canvas_vf1&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;viz_vf1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;drawVectorField&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vf1&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;viz_vf1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;drawVectorField&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;curl&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vf1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00ff00&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m happy I have my toolkit all set up to start experimenting, but disappointed at the results so far. The graphs are very messy and hard to understand. I might &lt;del&gt;steal&lt;/del&gt; borrow some visualization techniques from 3blue1brown, I&amp;rsquo;m guessing he&amp;rsquo;s tackled 3D visualizations of vector fields at some point, and his stuff is amazing.&lt;/p&gt;
&lt;script src=&#34;https://cdn.jsdelivr.net/gh/c0nrad/vector/examples/vector/app.js&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>Vector Calculus</title>
      <link>https://blog.c0nrad.io/posts/vector-calculus/</link>
      <pubDate>Sun, 19 Jul 2020 10:10:01 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/vector-calculus/</guid>
      <description>&lt;p&gt;Progress on a vector calculus library in javascript.&lt;/p&gt;
&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;I took a break from the numerical calculations book to try and apply some of the techniques I learned so far.&lt;/p&gt;
&lt;p&gt;(Also I applied to a few Ph.D. programs in computational physics, and I need to review some of the basics I&amp;rsquo;ve forgotten, so I figured this would be a good opportunity.)&lt;/p&gt;
&lt;p&gt;And I&amp;rsquo;ve wanted to build an Electromagnetism simulation for awhile, so I&amp;rsquo;ve been reading &lt;a href=&#34;https://www.amazon.com/Introduction-Electrodynamics-David-J-Griffiths/dp/1108420419/ref=sr_1_2?dchild=1&amp;amp;keywords=electromagnetism+griffiths&amp;amp;qid=1595167901&amp;amp;sr=8-2&amp;amp;tag=techblast0f-20&#34;&gt;Griffith&amp;rsquo;s E&amp;amp;M book&lt;/a&gt;. I think I actually bought this book for college 8 years ago, but I never read it. Unfortunately all my books are in storage.&lt;/p&gt;
&lt;p&gt;Reading it page by page and doing the examples has been pretty fun. I&amp;rsquo;m even learning that I didn&amp;rsquo;t understand a few concepts as well as I thought (line integrals are the dot product of the line vector, not the magnitude vector!). Which is always (frustrating at first), but exciting afterwards.&lt;/p&gt;
&lt;p&gt;(Rant: I really wish there was a &amp;ldquo;Project Euler&amp;rdquo; but for physics. I don&amp;rsquo;t really enjoy doing physics problems on paper. Every time I solve a problem on paper it seems like a waste. Had I instead codified the solution at least I&amp;rsquo;d have something when I was done. Now I just have notebooks of messy handwriting. Not to mention I don&amp;rsquo;t really trust my math when the equations get long, it&amp;rsquo;s too easy for me to mess up and accidentally cross of a term. I wish more math was done on a computer, but the ph.d. won&amp;rsquo;t be that way, so I need to practice by hand.)&lt;/p&gt;
&lt;p&gt;But afterwards I codified some of the stuff I had learned:&lt;/p&gt;
&lt;h2 id=&#34;vectorjs&#34;&gt;vector.js&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/c0nrad/vector&#34;&gt;https://github.com/c0nrad/vector&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Chapter 1 is all about vectors and some calculus (and coordinate systems). A perfect thing to put into code.&lt;/p&gt;
&lt;p&gt;I ended up implementing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vectors
&lt;ul&gt;
&lt;li&gt;basic operations, dot and cross product, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;vector fields
&lt;ul&gt;
&lt;li&gt;basic operations, &amp;ldquo;evaluate&amp;rdquo; at a point, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;vector operators
&lt;ul&gt;
&lt;li&gt;Gradient&lt;/li&gt;
&lt;li&gt;Divergence&lt;/li&gt;
&lt;li&gt;Curl&lt;/li&gt;
&lt;li&gt;LaPlacian&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Integrals (numerical)
&lt;ul&gt;
&lt;li&gt;integrate (standard, simpsons)&lt;/li&gt;
&lt;li&gt;integrate vector-field along line/path (simpsons)&lt;/li&gt;
&lt;li&gt;integrate vector-field surface (flux) (center)&lt;/li&gt;
&lt;li&gt;integrate volume (center)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Examples
&lt;ul&gt;
&lt;li&gt;Divergence Theorem&lt;/li&gt;
&lt;li&gt;Stokes&amp;rsquo; Theorem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All in all it was pretty fun, and super neat that divergence/stokes actually worked.&lt;/p&gt;
&lt;h3 id=&#34;vector-calculus-operators&#34;&gt;Vector Calculus Operators&lt;/h3&gt;
&lt;h4 id=&#34;gradient&#34;&gt;Gradient&lt;/h4&gt;
&lt;p&gt;The gradient is a nify little operator that is somewhat similar to a &amp;ldquo;3D slope&amp;rdquo;. After taking the operator of a function, it&amp;rsquo;ll return a vector that points &amp;ldquo;uphill&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;$$ \nabla T = \frac{\partial T}{\partial x}  \hat{\bm{x}} + \frac{\partial T}{\partial y}  \hat{\bm{y}} + \frac{\partial T}{\partial z}  \hat{\bm{z}} $$&lt;/p&gt;
&lt;p&gt;So if you had something like:&lt;/p&gt;
&lt;p&gt;$$ A = 3x^2 + 5yz $$&lt;/p&gt;
&lt;p&gt;And you took the gradient you&amp;rsquo;d get:&lt;/p&gt;
&lt;p&gt;$$ \nabla A = 6x \hat{\bm{x}} + 5z \hat{\bm{y}} + 5y \hat{\bm{z}} $$&lt;/p&gt;
&lt;h4 id=&#34;divergence&#34;&gt;Divergence&lt;/h4&gt;
&lt;p&gt;The divergence is a measure of the &amp;ldquo;inward&amp;rdquo; or &amp;ldquo;outward&amp;rdquo; flow of a vector field at a point. You can think of it like a measure of a facet or a drain in a body of water.&lt;/p&gt;
&lt;p&gt;$$ \nabla \cdot \bm{v} = \frac{\partial \bm{v_x}}{\partial x} + \frac{\partial \bm{v_y}}{\partial y} + \frac{\partial \bm{v_z}}{\partial z} $$&lt;/p&gt;
&lt;p&gt;Notice that it takes a vector field, and output a scalar function.&lt;/p&gt;
&lt;p&gt;An example:&lt;/p&gt;
&lt;p&gt;$$ \bm{v} = 6x^2 \hat{\bm{x}} + 5zy \hat{\bm{y}} + 5yz \hat{\bm{z}} $$&lt;/p&gt;
&lt;p&gt;$$ \nabla \cdot \bm{v} = \frac{\partial (6x^2)}{\partial x} + \frac{\partial (5zy)}{\partial y} + \frac{\partial (5zy)}{\partial z} =12x + 5z + 5y $$&lt;/p&gt;
&lt;h4 id=&#34;curl&#34;&gt;Curl&lt;/h4&gt;
&lt;p&gt;The curl has a pretty apt name, it&amp;rsquo;s the measure of how much a vector field &amp;ldquo;curls&amp;rdquo; or &amp;ldquo;swirls&amp;rdquo; around a point.&lt;/p&gt;
&lt;p&gt;The curl can be calculated by:&lt;/p&gt;
&lt;p&gt;$$ \nabla \times \bm{v} = \det \begin{vmatrix}
\hat{\bm{x}} &amp;amp; \hat{\bm{y}} &amp;amp; \hat{\bm{z}} \\
\partial / \partial x  &amp;amp; \partial / \partial y &amp;amp; \partial / \partial z \\
v_x &amp;amp; v_y &amp;amp; v_z
\end{vmatrix}  = \hat{\bm{x}} \left(\frac{\partial v_z}{\partial y}-\frac{\partial v_y}{\partial z} \right) + \hat{\bm{y}} \left(\frac{\partial v_x}{\partial z}-\frac{\partial v_z}{\partial x} \right) + \hat{\bm{z}} \left(\frac{\partial v_y}{\partial x}-\frac{\partial v_x}{\partial y} \right) $$&lt;/p&gt;
&lt;p&gt;A little bit messier. Thank you computers for never making me have to calculate these by hand.&lt;/p&gt;
&lt;h3 id=&#34;divergence-theorem&#34;&gt;Divergence Theorem&lt;/h3&gt;
&lt;p&gt;The divergence theorem (also known as Green&amp;rsquo;s/Gauss&amp;rsquo;s theorem), is a nifty little vector calculus theorem that states the following:&lt;/p&gt;
&lt;p&gt;$$ \int_{\nu} ( \nabla \cdot \bm{v}) d \tau = \oint_S \bm{v} \cdot d\bm{a} $$&lt;/p&gt;
&lt;p&gt;The math looks harder than the concept it&amp;rsquo;s trying to explain.&lt;/p&gt;
&lt;p&gt;On the left, it&amp;rsquo;s taking the volume integral of the divergence of a vector field. In english, it&amp;rsquo;s is a measure of how much the vector field is flowing in or out of the volume.&lt;/p&gt;
&lt;p&gt;On the right, it&amp;rsquo;s the surface integral of the flux in/out of the border. In english, it&amp;rsquo;s measuring how much of the vector field is flowing in or out of the border.&lt;/p&gt;
&lt;p&gt;The equation is saying something so obvious that it&amp;rsquo;s almost non-sensical. If there&amp;rsquo;s a change of volume of stuff on the inside, it must either have came from through the surface border.&lt;/p&gt;
&lt;p&gt;You can imagine if you cut out a cube in the ocean and measured how much &amp;ldquo;ocean&amp;rdquo; was in the cube at any point. If there&amp;rsquo;s more &amp;ldquo;ocean&amp;rdquo; in the cube, you know that it must have come into our imaginary cube from one of the cube sides.&lt;/p&gt;
&lt;p&gt;To implement this with my new nifty library:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;VectorField&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Func&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;y^2&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Func&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2*x*y + z^2&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Func&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2 * y * z&amp;#34;&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;integrate_volume_cube&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;divergence&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;)).&lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;closeTo&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;.0001&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;integrate_surface_cube&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;)).&lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;closeTo&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;.1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/c0nrad/vector/blob/master/src/integrals.test.ts#L51&#34;&gt;code&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;stokes-theorem&#34;&gt;Stoke&amp;rsquo;s Theorem&lt;/h3&gt;
&lt;p&gt;The second nifty vector calculus theorem, stoke&amp;rsquo;s theorem has to do with the curl of a vector field.&lt;/p&gt;
&lt;p&gt;$$ \int_{S} ( \nabla \times \bm{v}) \cdot d \bm{a} = \oint_P \bm{v} \cdot d\bm{l} $$&lt;/p&gt;
&lt;p&gt;(Quick note, those dots in the equation are not for &amp;ldquo;funz&amp;rdquo; the specifically mean dot-product.)&lt;/p&gt;
&lt;p&gt;Again, the equation looks more complex that it really is.&lt;/p&gt;
&lt;p&gt;On the left, we take the surface integral of the curl of some vector field. This is a measure of the overall swirling along some surface.&lt;/p&gt;
&lt;p&gt;On the right we have the line integral along a path of the vector field. The \( P \) means that we are following the perimeter of the surface. Since it&amp;rsquo;s the dot product, it&amp;rsquo;s measuring how much the vector field is &amp;ldquo;aligned&amp;rdquo; with our perimeter path through the vector field.&lt;/p&gt;
&lt;p&gt;So, the right is almost a shortcut to the left side. (It kind of reminds me of the fundamental theorem of calculus (or fundamental theorem of gradients)).&lt;/p&gt;
&lt;p&gt;Basically instead of measuring the &amp;ldquo;curl&amp;rdquo; at every point, you can just trace the outside perimeter and call it good enough.&lt;/p&gt;
&lt;p&gt;In code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;VectorField&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Func&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Func&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2*x*z + 3 * y^2&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Func&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4 y z^2&amp;#34;&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;integrate_surface&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;curl&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;)).&lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;closeTo&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;.1&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
]

&lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;integrate_path&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;path&lt;/span&gt;)).&lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;closeTo&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;.00001&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/c0nrad/vector/blob/master/src/integrals.test.ts#L60&#34;&gt;code&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;That&amp;rsquo;s all, but next up I think I might work on a library with three.js to do some quick visualizations of the above. We&amp;rsquo;ll see.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Numerical Integration Pt. 1</title>
      <link>https://blog.c0nrad.io/posts/numerical-integration/</link>
      <pubDate>Sat, 11 Jul 2020 23:12:13 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/numerical-integration/</guid>
      <description>&lt;p&gt;Some exploration into numerical integration.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s insane how good Gauss-Legendre quadrature is at integrating functions numerically. With just a few points from a dataset it calculates the integral to an absurd amount of precision.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m legit having a good time implementing all these computational physics algorithms. When building out some of my previous physics simulators I just wrote some naive algorithms to perform these tasks (such as a rectangle integrator). It&amp;rsquo;s cool to see just how much better a tool like Gauss-Legendre is comparatively.&lt;/p&gt;
&lt;p&gt;In this post we&amp;rsquo;ll compare the most popular numerical integrators&lt;/p&gt;
&lt;h3 id=&#34;comparison-of-integrators&#34;&gt;Comparison of Integrators&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/c0nrad/csim/blob/master/examples/integrate/integrate_example.png?raw=true&#34;&gt;&lt;img src=&#34;https://github.com/c0nrad/csim/blob/master/examples/integrate/integrate_example.png?raw=true&#34; alt=&#34;Integrator Comparison&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a href=&#34;https://github.com/c0nrad/csim/blob/master/examples/integrate/integrate_example.png?raw=true&#34;&gt;Image&lt;/a&gt; | &lt;a href=&#34;https://github.com/c0nrad/csim/blob/master/examples/integrate/integrate_example.go&#34;&gt;Source&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The above chart shows the error for four different functions, using four different integrators, across a number of sample points (N) from the original functions. It took me most of the day to make this image.&lt;/p&gt;
&lt;p&gt;The four functions are:&lt;/p&gt;
&lt;p&gt;$$ f_{topleft} = \int_{-1}^{1} \frac{1}{1+x} dx $$&lt;/p&gt;
&lt;p&gt;$$ f_{topright} = \int_{-10}^{10} 2 x^4 + 3 x^3 + 4 x^2 + 5 x + 6 dx $$&lt;/p&gt;
&lt;p&gt;$$ f_{bottemleft} = \int_{0}^{1} sin(x^2) dx $$&lt;/p&gt;
&lt;p&gt;$$ f_{bottomright} = \int_{0}^{2} e^{-2x} dx $$&lt;/p&gt;
&lt;h3 id=&#34;integrators&#34;&gt;Integrators&lt;/h3&gt;
&lt;p&gt;Four different integrators were compared, rectangle, trapezoidal, simpson, gauss-legendre.&lt;/p&gt;
&lt;h4 id=&#34;rectangle&#34;&gt;Rectangle&lt;/h4&gt;
&lt;p&gt;The simplest and most logical. Taken directly from the definition of the Integral. It just splits a function into a number of very small rectangles and adds them up.&lt;/p&gt;
&lt;h4 id=&#34;trapezoidal&#34;&gt;Trapezoidal&lt;/h4&gt;
&lt;p&gt;A logical extension to the rectangle method. Sometimes the top of the rectangle&amp;rsquo;s isn&amp;rsquo;t flat, so instead treat the top linearly, and use trapezes to model the chunks instead of rectangles.&lt;/p&gt;
&lt;h4 id=&#34;simpsons-rule&#34;&gt;Simpson&amp;rsquo;s Rule&lt;/h4&gt;
&lt;p&gt;The next logical extension, instead of treating the top of the rectangles as linear, treat them as cubic.&lt;/p&gt;
&lt;h4 id=&#34;gauss-legendre&#34;&gt;Gauss-Legendre&lt;/h4&gt;
&lt;p&gt;I am honestly blown away by how accurate this function is.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m going to dedicate part two to just this algorithm.&lt;/p&gt;
&lt;p&gt;This model is different than the rest. The algorithm is used to determine the spacing of the different chunks along with weights for the sample points.&lt;/p&gt;
&lt;h2 id=&#34;offtopic-function-interceptor&#34;&gt;Offtopic: Function Interceptor&lt;/h2&gt;
&lt;p&gt;I also wanted to prove that none of the integrators were cheating by calling the base function more than the other integrators. (It turns out this was a little tricky with edge conditions, but the details are boring).&lt;/p&gt;
&lt;p&gt;So I needed a way to determine how many times a function was called. I wrote this little funcintercept class that was pretty neat. It intercepts every call the function and records the argument it receives by wrapping the original function in a closure.&lt;/p&gt;
&lt;p&gt;I imagine I&amp;rsquo;ll probably use a similar construct for caching/memoization.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;A short post, I need to go to bed. But I&amp;rsquo;m excited to learn more of the theory of how gauss-legendre performs so well.&lt;/p&gt;
&lt;p&gt;(I also need to implement a root&amp;rsquo;s finding algorithm, I&amp;rsquo;m hard coding some of the legendre roots :nervous-face:. But excited to get that working too)&lt;/p&gt;
&lt;p&gt;Cheers&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FuncIntercept&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;In&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewIntercept&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;FuncIntercept&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FuncIntercept&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;In&lt;/span&gt;: make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FuncIntercept&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;csim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Func&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;csim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Func&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;In&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FuncIntercept&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Unique&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;In&lt;/span&gt;)
}

&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// example usage
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewIntercept&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;oldFunc&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unique&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; {
    panic(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Missed a call!&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Numerical Differentiation</title>
      <link>https://blog.c0nrad.io/posts/numerical-differentiation/</link>
      <pubDate>Fri, 10 Jul 2020 20:01:46 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/numerical-differentiation/</guid>
      <description>&lt;p&gt;Some exploration into numerical differentiation.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I just picked up a new book: &lt;a href=&#34;https://www.amazon.com/Concepts-Computational-Physics-Benjamin-Stickler/dp/3319272632/&#34;&gt;Basic Concepts in Computational Physics&lt;/a&gt;. I&amp;rsquo;ve been planning on building simulators for EM and Relativity. But after doing some research on how other people built them, I realized I should probably learn some of the basics of computational physics first. Other people seem to use FDTD (Finite-Difference Time-Domain) for simulations, and I have no idea what that is.&lt;/p&gt;
&lt;p&gt;To the &lt;s&gt;drawing&lt;/s&gt; learning board!&lt;/p&gt;
&lt;p&gt;The first chapter was on Numerical Differentiation. Here&amp;rsquo;s some fancy charts and explanations I made after implementing the chapter in code.&lt;/p&gt;
&lt;h2 id=&#34;differentiation&#34;&gt;Differentiation&lt;/h2&gt;
&lt;p&gt;Differentiation is about finding the slope of some function. In middle/high school we learned that we could find the slope of a linear line by:&lt;/p&gt;
&lt;p&gt;$$ m = \frac{y_2 - y_1}{x_2 - x_1} $$&lt;/p&gt;
&lt;p&gt;But not all functions are that easy to differentiate. And sometimes you&amp;rsquo;re lazy and don&amp;rsquo;t want to figure it out. Or sometimes you only have some data and not the underlying function. Turns out you can use computers to get pretty good estimations!&lt;/p&gt;
&lt;h3 id=&#34;forward-backward-center-numerical-differentiation&#34;&gt;Forward, Backward, Center Numerical Differentiation&lt;/h3&gt;
&lt;p&gt;In high school calculus we learned that:&lt;/p&gt;
&lt;p&gt;$$ f^\prime(x) = \lim_{h\to\infty} \frac{f(x+h) - f(x)}{h} $$&lt;/p&gt;
&lt;p&gt;And the idea behind numerical differentiation isn&amp;rsquo;t that different. But instead of taking the limit, we just make h very small. When h is very small, we just assume the line is linear and use the equation for finding the slope of a linear line.&lt;/p&gt;
&lt;p&gt;But, we need to make a choice. Let&amp;rsquo;s say we want to find the slope at \( x_i \) should we use \( x_{i-1}, x_{i} \) as the two points? Or \( x_{i}, x_{i+1} \) or maybe \( x_{i-1}, x_{i+1} \)?&lt;/p&gt;
&lt;p&gt;$$ f^\prime_{forward}(x_i) = \frac{ f(x_{i+1}) - f(x_i) }{h} $$
$$ f^\prime_{backward}(x_i) = \frac{ f(x_{x}) - f(x_{i-1}) }{h} $$
$$ f^\prime_{center}(x_i) = \frac{ f(x_{i+1}) - f(x_{i-1}) }{2h} $$&lt;/p&gt;
&lt;p&gt;It turns out the answer is the last one (called Center), but we can go one step further and prove that using the point before and after is the best using Taylor series!&lt;/p&gt;
&lt;h4 id=&#34;determining-the-error-using-forward-backward-center-numerical-differentiation&#34;&gt;Determining the error using Forward, Backward, Center Numerical Differentiation&lt;/h4&gt;
&lt;p&gt;We can actually prove that the center method has the least amount of error.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s Taylor expand \( x_{i-1} \) and \(x_{i+1} \). So we&amp;rsquo;re using f(x_i) as our base point and estimating \( x_{i-1} \) and \(x_{i+1} \).&lt;/p&gt;
&lt;p&gt;$$ f(x_{i-1}) = f(x_{i}) - h f^\prime(x_i) + \frac{h^2}{2}f^{\prime\prime}(x_i) - \frac{h^3}{6}f^{\prime\prime\prime}(x_i) + &amp;hellip; $$
$$ f(x_{i+1}) = f(x_{i}) + h f^\prime(x_i) + \frac{h^2}{2}f^{\prime\prime}(x_i) + \frac{h^3}{6}f^{\prime\prime\prime}(x_i) + &amp;hellip; $$&lt;/p&gt;
&lt;p&gt;With&lt;/p&gt;
&lt;p&gt;$$ h = x_{i+1} - x_i = x_i - x_{x-1} $$&lt;/p&gt;
&lt;p&gt;Now we can re-arrange some stuff from the \( f(x_{x-1}) \) equation to determine the error for the Forward Differentiation method:&lt;/p&gt;
&lt;p&gt;$$ \begin{array}{llll} f^\prime_{forward}(x_i)
&amp;amp; = \frac{ f(x_{i+1}) - f(x_i) }{h} \\
&amp;amp; = \frac{ (f(x_{i}) + h f^\prime(x_i) + \frac{h^2}{2}f^{\prime\prime}(x_i) + \frac{h^3}{6}f^{\prime\prime\prime}(x_i) + &amp;hellip;) - f(x_i)}{h} \\
&amp;amp; = f^\prime(x_i) + \frac{h}{2}f^{\prime\prime}(x_i) + \frac{h^2}{6}f^{\prime\prime\prime}(x_i) + &amp;hellip; \\
&amp;amp; \sim  f^\prime(x_i) + \mathcal{O}(h) \end{array} $$&lt;/p&gt;
&lt;p&gt;Doing the same for Center we get:&lt;/p&gt;
&lt;p&gt;$$ \begin{array}{llll} f^\prime_{center}(x_i)
&amp;amp; = \frac{ f(x_{i+1}) - f(x_{i-1}) }{2h} \\
&amp;amp; = \frac{ (f(x_{i}) + h f^\prime(x_i) + \frac{h^2}{2}f^{\prime\prime}(x_i) + \frac{h^3}{6}f^{\prime\prime\prime}(x_i) + &amp;hellip;) - (f(x_{i}) - h f^\prime(x_i) + \frac{h^2}{2}f^{\prime\prime}(x_i) - \frac{h^3}{6}f^{\prime\prime\prime}(x_i) + &amp;hellip;) }{2h} \\
&amp;amp; = f^\prime(x_i) - \frac{h^2}{6}f^{\prime\prime\prime}(x_i) + &amp;hellip; \\
&amp;amp; \sim  f^\prime(x_i) + \mathcal{O}(h^2) \end{array} $$&lt;/p&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;
            Forward Difference
        &lt;/td&gt;
        &lt;td&gt;
    $$ f^\prime_{forward}(x_i) = \frac{ f(x_{i+1}) - f(x_i) }{h} $$
        &lt;/td&gt;
        &lt;td&gt;
            $$ \mathcal{O}(h) $$
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            Backward Difference
        &lt;/td&gt;
        &lt;td&gt;
    $$ f^\prime_{backward}(x_i) = \frac{ f(x_{x}) - f(x_{i-1}) }{h} $$
        &lt;/td&gt;
        &lt;td&gt;
            $$ \mathcal{O}(h) $$
        &lt;/td&gt;
    &lt;/tr&gt;
     &lt;tr&gt;
        &lt;td&gt;
            Center Difference
        &lt;/td&gt;
        &lt;td&gt;
    $$ f^\prime_{center}(x_i) = \frac{ f(x_{i+1}) - f(x_{i-1}) }{2h} $$
        &lt;/td&gt;
        &lt;td&gt;
            $$ \mathcal{O}(h^2) $$
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The error can be a little confusing to understand, but it&amp;rsquo;s saying that if we want 100x better resolution on forward or backward methods, we&amp;rsquo;d need to split our \( h \) into 100x smaller buckets.&lt;/p&gt;
&lt;p&gt;Whereas for the center method, if we want a 100x improvement, we only need to split our \( h \) buckets by 10. 10*10 = 100.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see this in practice!&lt;/p&gt;
&lt;h3 id=&#34;forward-backward-center-using-different-h-sizes&#34;&gt;Forward Backward Center using different H sizes&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/c0nrad/csim/blob/master/examples/diff_modes/multiple_h.png?raw=true&#34;&gt;&lt;img src=&#34;https://blog.c0nrad.io/multiple_h.png&#34; alt=&#34;diff_modes&#34;&gt;&lt;/a&gt;
(&lt;a href=&#34;https://github.com/c0nrad/csim/blob/master/examples/diff_modes/multiple_h.png&#34;&gt;Image&lt;/a&gt; | &lt;a href=&#34;https://github.com/c0nrad/csim/blob/master/examples/diff_modes/diff_modes.go&#34;&gt;Code&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Here I take the derivative of \( sin(x) \) using the forward, backward and center methods using different buckets of h. You can see that the Center method is significantly better.&lt;/p&gt;
&lt;h2 id=&#34;random-derivative-examples&#34;&gt;Random Derivative Examples&lt;/h2&gt;
&lt;p&gt;The numeric differentiator is just plain cool how simple it is!&lt;/p&gt;
&lt;p&gt;Here I use Numerical Differentiation to plot the derivatives of the following equations:&lt;/p&gt;
&lt;p&gt;$$ f_1(x) = sin(x) $$
$$ f_2(x) = 5x -3 $$
$$ f_3(x) = e^x $$
$$ f_4(x) = cos(2x) + e^{-\frac{x^2}{2}} sin(10x) $$&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/c0nrad/csim/blob/master/examples/diff_examples/diff_examples.png?raw=true&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/c0nrad/csim/master/examples/diff_examples/diff_examples.png&#34; alt=&#34;diff_examples&#34;&gt;&lt;/a&gt;
(&lt;a href=&#34;https://github.com/c0nrad/csim/blob/master/examples/diff_modes/multiple_h.png&#34;&gt;Image&lt;/a&gt; | &lt;a href=&#34;https://github.com/c0nrad/csim/blob/master/examples/diff_examples/diff_examples.go&#34;&gt;Code&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;legendre-polynomials&#34;&gt;Legendre Polynomials&lt;/h2&gt;
&lt;p&gt;In my &lt;a href=&#34;https://blog.c0nrad.io/posts/hydrogen-pt1/&#34;&gt;electron orbitals simulator&lt;/a&gt; I had to calculate the Legendre Polynomials (using Rodrigues&amp;rsquo; Formula):&lt;/p&gt;
&lt;p&gt;$$ P_l(x) = \frac{1}{2^l l!} \left(\frac{d}{dx}\right)^l (x^2 - 1)^l $$&lt;/p&gt;
&lt;p&gt;Knowing that I&amp;rsquo;d have to calculate the derivative of this function was one of the reasons I decided to &lt;a href=&#34;https://blog.c0nrad.io/posts/ginac-on-macos/&#34;&gt;check out GiNaCs&lt;/a&gt; in the first place. (GiNaCs has a symbolic differentiator).&lt;/p&gt;
&lt;p&gt;But now with a Numeric Differentiator, I have no need for the symbolic executioner! (Obviously not fully true, it&amp;rsquo;s still &lt;em&gt;extremely&lt;/em&gt; nice to have the symbols).&lt;/p&gt;
&lt;p&gt;But, damn, it is so satisfying generating the polynomials like this in Go. I&amp;rsquo;m in shock that it even works to be honest. I heavily abuse function closure&amp;rsquo;s to store state. (It&amp;rsquo;s function closure&amp;rsquo;s all the way down):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LegendrePoly&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Func&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;prefix&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pow&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, float64(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Factorial&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;))

	&lt;span style=&#34;color:#a6e22e&#34;&gt;inner&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inner&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;D&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prefix&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But with some plotting, we can verify it works!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/c0nrad/csim/blob/master/examples/legendre/legendre.png?raw=true&#34;&gt;&lt;img src=&#34;https://github.com/c0nrad/csim/blob/master/examples/legendre/legendre.png?raw=true&#34; alt=&#34;Legendre&#34;&gt;&lt;/a&gt;
( &lt;a href=&#34;https://github.com/c0nrad/csim/blob/master/examples/legendre/legendre.png?raw=true&#34;&gt;Image&lt;/a&gt; | &lt;a href=&#34;https://github.com/c0nrad/csim/blob/master/examples/legendre/legendre.go&#34;&gt;Code&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;How cool is that!&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Numeric differentiation ended up being way cooler than I thought it would be.&lt;/p&gt;
&lt;p&gt;Up next is numeric integration! I had to build a numeric integrator for a previous game engine, I&amp;rsquo;m excited to see how wrong I was.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shor&#39;s Algorithm</title>
      <link>https://blog.c0nrad.io/posts/shors/</link>
      <pubDate>Fri, 10 Jul 2020 09:26:38 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/shors/</guid>
      <description>&lt;p&gt;Shor&amp;rsquo;s algorithm is probably the most well known quantum algorithm. But it turns out I didn&amp;rsquo;t understand it as well as I thought.&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;m somewhat giving up on this problem. I got a working version, but I&amp;rsquo;m not happy with it.&lt;/p&gt;
&lt;p&gt;Spoiler, I thought the hard part of Shor&amp;rsquo;s algorithm would be the Quantum Fourier Transform. It turns out the hard problem is multiplying two numbers!&lt;/p&gt;
&lt;p&gt;Anyways, this post will give a super introductory look into RSA, Shor&amp;rsquo;s algorithm, and some rants about multiplication.&lt;/p&gt;
&lt;h2 id=&#34;shors&#34;&gt;Shor&amp;rsquo;s&lt;/h2&gt;
&lt;p&gt;This was the first Quantum Algorithm I heard about (my background is computer security). Using Shor&amp;rsquo;s algorithm you can factor large numbers. Which at the surface seems pretty unexciting, but then we remember that a lot of the world&amp;rsquo;s security is based on the fact that it&amp;rsquo;s hard to factor numbers. Factoring numbers is of huge importance.&lt;/p&gt;
&lt;h3 id=&#34;rsa&#34;&gt;RSA&lt;/h3&gt;
&lt;p&gt;RSA (and other asymmetric algorithms) are pretty cool. It&amp;rsquo;s a way to securely communicate with someone you&amp;rsquo;ve never met before, while others are listening. To prove to yourself how cool it is, try this thought experiment:&lt;/p&gt;
&lt;p&gt;Lets say you found yourself in jail, and you knew a terrible secret, and you wanted to notify a news agency of the terrible secret. But the guards are reading your letters. You&amp;rsquo;ve never met the news agency before. Can you hide a message in letters that only the news agency would find?&lt;/p&gt;
&lt;p&gt;Or a more real example, imagine you&amp;rsquo;re sitting at home, ordering something online from amazon.com, you need to give amazon.com your credit card, but there&amp;rsquo;s probably 10-20 computers/routers in between you and the amazon.com servers that will be reading every message you send as it goes to amazon. Can you securely send your credit card?&lt;/p&gt;
&lt;p&gt;The following ideas will not work, because the guard/servers will know what to look for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Hey amazon, look at the first letter of every sentence&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Hey amazon, use the following encryption algorithm with this key: abc123&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With no prior knowledge it&amp;rsquo;s pretty difficult (but not impossible). This is why RSA (and other asymmetric algorithms) are pretty cool.&lt;/p&gt;
&lt;p&gt;Instead you rely on the fact that it&amp;rsquo;s hard to factor prime numbers (and some number theory), it&amp;rsquo;s possible.&lt;/p&gt;
&lt;h3 id=&#34;rsa-algorithm&#34;&gt;RSA Algorithm&lt;/h3&gt;
&lt;p&gt;(This is a purposely wrong/simplified algorithm, it only carry&amp;rsquo;s the spirit of RSA for simplicity.)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If I want to send amazon a message I can take two large prime numbers and multiply them together N = p*q. Using the original p and q I can do some number theory to generate a D, and E, which are two other numbers that have special inverse properties. I then throw away p  and q. Since no one can determine what p and q are, my algorithm  (specifically my D number) is safe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then I send amazon/friend my E number (along with N). E is the public key. Since it&amp;rsquo;s a public key it can be sent/seen by anyone, (including the attackers)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Amazon/friend can then take a private message they want to send me and perform the following math:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$ ciphertext = message^E mod N  $$&lt;/p&gt;
&lt;p&gt;And send me the ciphertext.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;The only way to decrypt the ciphertext and get back the message is if you have the other number (D).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$ message = ciphertext^D mod N $$&lt;/p&gt;
&lt;p&gt;I now have the private message they sent me. They either sent their public key, or if they were smart they would have sent a &amp;ldquo;symmetric private key&amp;rdquo; that we could use with another symmetric cryptographic algorithm such as AES. (RSA is very computationally expensive. Much easier to use AES if you can)&lt;/p&gt;
&lt;p&gt;At this point we have sent a secure message and can easily send more secure messages. And the guards can intercept every message, and have no idea what is going on.&lt;/p&gt;
&lt;h3 id=&#34;breaking-rsa&#34;&gt;Breaking RSA&lt;/h3&gt;
&lt;p&gt;But, using shor&amp;rsquo;s algorithm you can figure out the factors of N. The D/E numbers are based off the original p and q numbers (N = p*q). Using the D number you can decrypt any message.&lt;/p&gt;
&lt;p&gt;So, if the guard/server had a quantum computer that ran shor&amp;rsquo;s algorithm, they could decode all the messages by factoring N and computing the D number.&lt;/p&gt;
&lt;h3 id=&#34;shors-algorithm&#34;&gt;Shor&amp;rsquo;s Algorithm&lt;/h3&gt;
&lt;p&gt;Shor&amp;rsquo;s algorithm is pretty nifty too. The quantum computer doesn&amp;rsquo;t just factor the numbers, you have to reframe the problem. That&amp;rsquo;s the genius behind shor&amp;rsquo;s algorithm.&lt;/p&gt;
&lt;p&gt;Instead you convert the problem such that it has a cyclic answer. Then you take the Quantum Fourier Transform, do some more math, and the factors pop out.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;math&amp;rdquo; that the quantum algorithm solves is \( a^{x} mod N \), where N is the prime number, a is some random number, and &amp;ldquo;x&amp;rdquo; is the number in super position. We have to find the period of this function. (How long until the function repeats itself).&lt;/p&gt;
&lt;p&gt;Normally to find the period you have to check the function over and over until it repeats. Classically this could take a very very very long time, but with a quantum computer we can try all the inputs at once, and then extract the pattern (thanks to QFT).&lt;/p&gt;
&lt;p&gt;Once you find the period of the function, you simply take the GCD of two numbers to get the factors:&lt;/p&gt;
&lt;p&gt;$$ f1 = GCD(N, a^{period/2} + 1) $$
$$ f2 = GCD(N, a^{period/2} - 1) $$&lt;/p&gt;
&lt;p&gt;These equations are based on Euler&amp;rsquo;s Theorem. f1 and f2 are our two factors. (So for 15, 3 and 5).&lt;/p&gt;
&lt;h2 id=&#34;why-multiplication-is-hard&#34;&gt;Why Multiplication Is Hard&lt;/h2&gt;
&lt;p&gt;I did not expect this. But it turns out the hard part of this was the multiplication!&lt;/p&gt;
&lt;p&gt;Multiplication requires a bunch of intermediate steps, and this quickly explodes the number of qubits you need to do computation. In the classical circuit you can destroy intermediate results and re-use them. But not so much in the quantum computer, every step must be reversable if you want it to be a real quantum gate. Multiplying a 3bit number by 3 bit number quickly went to more than 10 qubits, and then I gave up. (It&amp;rsquo;s probably horribly inefficient, but I couldn&amp;rsquo;t find any simple solutions).&lt;/p&gt;
&lt;p&gt;My quantum computer is horribly inefficient overall too, and even at 10qubits it&amp;rsquo;s very very slow. (if I optimized/cached some of the matrix code, I could speed it up to probably 16 qubits). But, it&amp;rsquo;s just disappointing to be thwarted by something so simple. I have a new appreciate for multiplication.&lt;/p&gt;
&lt;h2 id=&#34;slightly-cheating&#34;&gt;Slightly cheating&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/shor.png&#34; alt=&#34;shor&#34;&gt;&lt;/p&gt;
&lt;p&gt;So, instead the shor&amp;rsquo;s algorithm implemented above is just something I copied from &lt;a href=&#34;https://www.amazon.com/Programming-Quantum-Computers-Essential-Algorithms/dp/1492039683&#34;&gt;Programming Quantum Computers Essential Algorithms&lt;/a&gt;. It only works for 15 with a co-prime of 2.&lt;/p&gt;
&lt;p&gt;One day I&amp;rsquo;d like to revisit this, but I need to take a break.&lt;/p&gt;
&lt;h3 id=&#34;factor-via-grovers&#34;&gt;Factor Via Grovers&lt;/h3&gt;
&lt;p&gt;I also thought I would be sneaky and just factor the number&amp;rsquo;s using Grover&amp;rsquo;s algorithm, but again it&amp;rsquo;s taken me longer than I would like to build a non-wasteful circuit that does multiplication.&lt;/p&gt;
&lt;p&gt;But it seems reasonable that if there was an efficient multiplication, I could just create a quantum circuit with two registers A and B, and my oracle function would be &lt;i&gt;return A*B == N&lt;/i&gt;. Then it would only require PI * Sqrt(N)/4 iterations.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Overall the last few days were frustrating. But progress was made. I&amp;rsquo;m super happy that my little quantum computer can even solve a specific case of shor&amp;rsquo;s, but disappointed I couldn&amp;rsquo;t go further at this time.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll be taking a quick break from Quantum Computing to learn more of the basics. I just picked up a book on numerical methods, I think I&amp;rsquo;ll have some fun with that.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Simulating Quantum Fourier Transform</title>
      <link>https://blog.c0nrad.io/posts/qft/</link>
      <pubDate>Tue, 07 Jul 2020 11:01:25 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/qft/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m pretty excited. I&amp;rsquo;m somewhat in disbelief that it even works. But I was able to implement Quantum Fourier Transform on my little &lt;a href=&#34;https://github.com/c0nrad/qrad&#34;&gt;quantum computation simulator&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;video controls src=&#34;https://blog.c0nrad.io/iqft.mp4&#34; style=&#34;width: 100%;&#34; autoplay loop &gt;&lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;In the above simulation, the simulator is stepping through the circuit step by step.&lt;/p&gt;
&lt;p&gt;Each step is called a &amp;ldquo;moment&amp;rdquo;. The wires are the little qubits, and the boxes are the quantum gates.&lt;/p&gt;
&lt;p&gt;Each step in the circuit is represented by a 2**4 matrix (4 because there are 4 qubits). Most of the work involved in this simulator is constructing those matrixes corresponding to each step. For each step you multiply that matrix against the systems overall state. Just like that you&amp;rsquo;re simulating quantum systems.&lt;/p&gt;
&lt;p&gt;The bottom left is the amplitude and phases of the different states. Normally the phases are displayed a little differently, but it&amp;rsquo;s on a terminal so I just used a bar chart to represent them. (They&amp;rsquo;re complex numbers).&lt;/p&gt;
&lt;h2 id=&#34;fourier-transform&#34;&gt;Fourier Transform&lt;/h2&gt;
&lt;p&gt;I went to school for electrical engineering, and a big part of those four years was learning about the applications of fourier transforms. I never thought I&amp;rsquo;d be using it again, and I definitely did not expect to be using it for quantum computation. But it turns out it&amp;rsquo;s incredibly useful and fundamental to many quantum algorithms.&lt;/p&gt;
&lt;p&gt;The math for fourier transforms looks scary, but the concept is pretty simple.&lt;/p&gt;
&lt;p&gt;It turns out that in some cases, knowing the frequencies of a signal greatly simplifies a system.&lt;/p&gt;
&lt;p&gt;For example, if you had a sound signal made up of the combination of two sin waves, and you wanted to represent it by some function like f(t), it&amp;rsquo;d be a pretty &amp;ldquo;verbose&amp;rdquo; function. If you wanted to recreate the wave, you&amp;rsquo;d need to sample a lot of points to make any sense of it.&lt;/p&gt;
&lt;img src=&#34;https://blog.c0nrad.io/fourier.png&#34;&gt;
&lt;p&gt;But if I told you the function was just a combination of two sin waves at frequency 150 and 350, you only need those two frequencies to recreate the function.&lt;/p&gt;
&lt;p&gt;Using the fourier transform, you can get the frequencies of some signal.&lt;/p&gt;
&lt;h2 id=&#34;usage-of-quantum-fourier-transform&#34;&gt;Usage of Quantum Fourier Transform&lt;/h2&gt;
&lt;p&gt;In Quantum Computation you can&amp;rsquo;t just &amp;ldquo;ask&amp;rdquo; the quantum system what state it is in. You can only ask a few yes or no questions. (This is due to fundamental limits of nature, not limits of engineering).&lt;/p&gt;
&lt;p&gt;So a lot of the effort in creating quantum algorithms is &amp;ldquo;massaging&amp;rdquo; the problem in a way that allows us to ask a few specific questions.&lt;/p&gt;
&lt;p&gt;One trick that quantum algorithm designers like to use is to pose the question in a way that the answer repeats at some frequency, then take the fourier transform of those answers, and then just pluck out the frequency (solution).&lt;/p&gt;
&lt;p&gt;One example of this is Shor&amp;rsquo;s algorithm, an algorithm for factoring large numbers. Normally factoring large numbers is extremely difficult (believed near impossible), but can massage that problem into a similar problem that has a cyclic solution, implement it on a quantum computer, then use QFT to pluck out that frequency (solution).&lt;/p&gt;
&lt;p&gt;(I&amp;rsquo;m currently trying to implement Shor&amp;rsquo;s algorithm, but the cyclic algorithm (a**x mod N) is a little difficult on a quantum computer, but slowly getting there)&lt;/p&gt;
&lt;h2 id=&#34;simulator&#34;&gt;Simulator&lt;/h2&gt;
&lt;p&gt;The simulator was written using &lt;a href=&#34;https://github.com/mum4k/termdash&#34;&gt;https://github.com/mum4k/termdash&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a neat little library for displaying charts in terminal.&lt;/p&gt;
&lt;p&gt;A little overkill, but it&amp;rsquo;s nice to step through and see the phase and amplitudes evolve with time.&lt;/p&gt;
&lt;h2 id=&#34;crack-pot-idea&#34;&gt;Crack Pot Idea&lt;/h2&gt;
&lt;p&gt;Implementing a**x mod N on a quantum circuit has been surprisingly difficult. Also implementing CRC4. I don&amp;rsquo;t like having to think.&lt;/p&gt;
&lt;p&gt;One crack pot idea i&amp;rsquo;d like to test out is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if I wrote some algorithm to sample the functions (a**xmodN / CRC4) and create a truth table for those functions.&lt;/li&gt;
&lt;li&gt;Using that I can create some matrix that represents the function&lt;/li&gt;
&lt;li&gt;Then maybe I can take the &amp;ldquo;Reverse Kronocker product&amp;rdquo;(?) or brute force I, X, and CNOTs gates together until I find the circuit that makes up that matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No more thinking when I have a function I want on a quantum computer. We&amp;rsquo;ll see.&lt;/p&gt;
&lt;p&gt;(My double-down crack pot idea: maybe I could use grover&amp;rsquo;s algorithm to generate them for me. quantum algorithms building quantum algorithms). We&amp;rsquo;ll see.&lt;/p&gt;
&lt;h2 id=&#34;improvements-to-qrad&#34;&gt;Improvements to QRAD&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;QFT/iQFT&lt;/li&gt;
&lt;li&gt;Basic arithmetic&lt;/li&gt;
&lt;li&gt;The simulator using &lt;a href=&#34;https://github.com/mum4k/termdash&#34;&gt;https://github.com/mum4k/termdash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;things-that-were-frustratingtook-longer-than-planned&#34;&gt;Things that were frustrating/took longer than planned&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kind of silly, but I get my endianness mixed up a bit. Should the MSB (most significant bit), but on the top or the bottom of the circuit?
&lt;ul&gt;
&lt;li&gt;Eventually I need to pick a convention and stick with it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I thought that QFT would be the hard part of shor&amp;rsquo;s, but turns out it&amp;rsquo;s that a**xmodN. There&amp;rsquo;s some resources online, but it&amp;rsquo;s going to require some time understanding the solutions, they don&amp;rsquo;t look trivial.
&lt;ul&gt;
&lt;li&gt;There&amp;rsquo;s plenty of solutions that work for specific cases, but I want to be able to just say Factor(33) and have the circuit pop out&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;future&#34;&gt;Future&lt;/h2&gt;
&lt;p&gt;Next up I&amp;rsquo;m working on a couple of things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement Shor&amp;rsquo;s algorithm&lt;/li&gt;
&lt;li&gt;Implement the quantum hash cracker using grover&amp;rsquo;s algorithm&lt;/li&gt;
&lt;li&gt;Quantum Registers&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Quantum Teleportation Algorithm</title>
      <link>https://blog.c0nrad.io/posts/quantum-teleportation/</link>
      <pubDate>Fri, 03 Jul 2020 13:24:22 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/quantum-teleportation/</guid>
      <description>&lt;p&gt;This post is split into two parts. The first section is my motivation, and some background on the upgrades I made to my quantum simulator. The second part is implementing the Quantum Teleportation algorithm.&lt;/p&gt;
&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Recently I&amp;rsquo;m been playing more with Quantum Computing.&lt;/p&gt;
&lt;p&gt;Quantum Computing fits nicely into my current goals of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;learning more about the universe&lt;/li&gt;
&lt;li&gt;learning something practical&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A long time ago I built a &lt;a href=&#34;https://github.com/c0nrad/qrad&#34;&gt;little Quantum Computer Simulator&lt;/a&gt; for a internal company &amp;ldquo;hackathon&amp;rdquo;. At the time I worked at a database company, so I implemented &lt;a href=&#34;https://en.wikipedia.org/wiki/Grover%27s_algorithm&#34;&gt;Grover&amp;rsquo;s algorithm&lt;/a&gt;. (Grover&amp;rsquo;s Algorithm can be used to find an element in an unsorted array. Normally you&amp;rsquo;d have to search every element in the array until you get a match, but using a quantum computer, you can do it significantly faster (supposedly O(Sqrt(N)), but for smaller data sets I was able to do it in one pass. I&amp;rsquo;ll be talking about Grover&amp;rsquo;s algorithm at some point in the near future :), see next paragraph).&lt;/p&gt;
&lt;p&gt;I decided my next &amp;ldquo;long term&amp;rdquo; project will be to build a Quantum Hash Cracking algorithm. After thinking more about it, I&amp;rsquo;m pretty sure I can do it with Grover&amp;rsquo;s algorithm. But since it&amp;rsquo;s a simulated quantum computer, I can only simulate a couple of qubits, I so think I&amp;rsquo;ll actually be &amp;ldquo;cracking&amp;rdquo; CRC4. We&amp;rsquo;ll see. Maybe if I can get it working I can finagle IBM/GOOG into letting me verify CRC-16 or something on one of their quantum computers.&lt;/p&gt;
&lt;h2 id=&#34;upgrades-to-qrad&#34;&gt;Upgrades to QRAD&lt;/h2&gt;
&lt;p&gt;But the quantum hash-cracker is a little ways off. First I want to dust off the &lt;a href=&#34;https://github.com/c0nrad/qrad&#34;&gt;old simulator&lt;/a&gt;. The old simulator was heavily based on the book &lt;a href=&#34;https://www.amazon.com/Quantum-Computing-Computer-Scientists-Yanofsky/dp/0521879965?tag=techblast0f-20&#34;&gt;Quantum Computing for Computer Scientist&lt;/a&gt;. A great book if you have a CS background and want to get your hands dirty.&lt;/p&gt;
&lt;p&gt;But, after playing with IBM&amp;rsquo;s Qiskit, Google&amp;rsquo;s Cirq and Algassert&amp;rsquo;s Quirk, and I love how they do certain things. Specifically how they approach circuit building, so I rebuilt part of my simulator. Specifically:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Added &amp;ldquo;Moments&amp;rdquo;, a better way to organize gates&lt;/li&gt;
&lt;li&gt;Circuit Diagrams, so I can see what the circuits look like&lt;/li&gt;
&lt;li&gt;Arbitrary number of Control gates, CCCCCCCCNOT gates&lt;/li&gt;
&lt;li&gt;Measure/collapse independent Qubits, previously I could only collapse the entire state&lt;/li&gt;
&lt;li&gt;Treat circuit more like a state machine, append a bunch of moments, and then later execute the circuit, or resume execution&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;implementing-quantum-teleportation&#34;&gt;Implementing Quantum Teleportation&lt;/h2&gt;
&lt;p&gt;That algorithm I chose to implement first was Quantum Teleportation. Quantum Teleportation sounds super badass (and it is decently cool), but maybe not &amp;ldquo;super badass&amp;rdquo;. The math is pretty cool, and I&amp;rsquo;m guessing there&amp;rsquo;s some practical usage that I&amp;rsquo;m not aware of.&lt;/p&gt;
&lt;p&gt;Quantum Teleportation allows you to transfer the state of one qubit, to another qubit. In the classical world, this sounds super lame. But there&amp;rsquo;s some hurdles in the quantum world that make this difficult, hence why it&amp;rsquo;s a neat algorithm.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s something called No-Cloning Theorem, which states you can&amp;rsquo;t copy the state of a qubit to another qubit (due to limits on Quantum Information). You also can&amp;rsquo;t &amp;ldquo;peek&amp;rdquo; inside the state of a qubit. The qubit could be in any number of an infinite set of positions, but we can only ask it one single &amp;ldquo;yes or no&amp;rdquo; question.&lt;/p&gt;
&lt;h3 id=&#34;how-it-works&#34;&gt;How it works&lt;/h3&gt;
&lt;p&gt;Alice wants to send Bob the state of one of her qubits. Why? No idea.&lt;/p&gt;
&lt;p&gt;And for some reason she can&amp;rsquo;t just send Bob the Qubit. But they are able to share an Entangled Qubit. (Maybe Eve is able to generate a set of entangled Qubits and send one to Bob and one to Alice).&lt;/p&gt;
&lt;p&gt;Alice must then perform some actions both her original qubit and her entangled qubit. After performing the actions she will measure the state of her two qubits (destroying the qubit she wants to transfer).&lt;/p&gt;
&lt;p&gt;Alice then sends Bob the results of her measurements. (two classical bits). Using those two classical bits, Bob can construct the original state of Alice&amp;rsquo;s first Qubit.&lt;/p&gt;
&lt;h3 id=&#34;the-circuits&#34;&gt;The circuits&lt;/h3&gt;
&lt;p&gt;If you want to see a very neat demo of the algorithm, check out Algassert&amp;rsquo;s online quantum editor for &lt;a href=&#34;https://algassert.com/quirk#circuit=%7B%22cols%22:%5B%5B1,%22H%22%5D,%5B1,%22%E2%80%A2%22,1,1,%22X%22%5D,%5B%22%E2%80%A6%22,%22%E2%80%A6%22,1,1,%22%E2%80%A6%22%5D,%5B%22%E2%80%A6%22,%22%E2%80%A6%22,1,1,%22%E2%80%A6%22%5D,%5B%22~87lj%22%5D,%5B%22Bloch%22%5D,%5B%22%E2%80%A2%22,%22X%22%5D,%5B%22H%22%5D,%5B%22Measure%22,%22Measure%22%5D,%5B1,%22%E2%80%A2%22,1,1,%22X%22%5D,%5B%22%E2%80%A2%22,1,1,1,%22Z%22%5D,%5B1,1,1,1,%22Bloch%22%5D,%5B1,1,1,1,%22~f7c0%22%5D%5D,%22gates%22:%5B%7B%22id%22:%22~87lj%22,%22name%22:%22message%22,%22circuit%22:%7B%22cols%22:%5B%5B%22e%5E-iYt%22%5D,%5B%22X%5Et%22%5D%5D%7D%7D,%7B%22id%22:%22~f7c0%22,%22name%22:%22received%22,%22matrix%22:%22%7B%7B1,0%7D,%7B0,1%7D%7D%22%7D%5D%7D&#34;&gt;quantum teleportation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my significantly less sexy circuit diagram:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/teleportation.png&#34; alt=&#34;equal speed, equal mass&#34;&gt;&lt;/p&gt;
&lt;p&gt;Code:
&lt;a href=&#34;https://github.com/c0nrad/qrad/blob/master/circuits/teleportation/teleportation.go&#34;&gt;https://github.com/c0nrad/qrad/blob/master/circuits/teleportation/teleportation.go&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;the-maths&#34;&gt;The maths&lt;/h3&gt;
&lt;p&gt;The coolest part of the whole thing (in my opinion) is the maths. Following along in &lt;a href=&#34;https://www.amazon.com/Quantum-Computation-Information-10th-Anniversary/dp/1107002176/ref=sr_1_3?dchild=1&amp;amp;keywords=quantum+information&amp;amp;qid=1593801365&amp;amp;sr=8-3&amp;amp;tag=techblast0f-20&#34;&gt;Quantum Computation and Information Theory&lt;/a&gt; (supposedly the bible in the field, haven&amp;rsquo;t finished it yet though, so no opinion yet), there&amp;rsquo;s a single line that pretty much describes the entire algorithm:&lt;/p&gt;
&lt;p&gt;$$ |\psi\rangle = \frac{1}{2} [ |00 \rangle (\alpha|0\rangle + \beta|1\rangle) + |01 \rangle(\alpha|1\rangle + \beta |0\rangle) + |10\rangle (\alpha|0\rangle - \beta|1\rangle) + |11\rangle(\alpha|1\rangle - \beta|0\rangle) ]$$&lt;/p&gt;
&lt;p&gt;It can be a little tricky to read. Here&amp;rsquo;s a cheat sheet.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There&amp;rsquo;s three qubits in this system. The first two belong to Alice, the last to Bob&lt;/li&gt;
&lt;li&gt;The qubits can be identified by the weird \( |00\rangle, |1\rangle \) symbols.
&lt;ul&gt;
&lt;li&gt;These are called &amp;ldquo;ket&amp;rsquo;s&amp;rdquo; (After Dirac&amp;rsquo;s Bra-Ket notation, used a lot in quantum mechanics)&lt;/li&gt;
&lt;li&gt;So the qubits belonging to Alice look like \( |00\rangle,  |01\rangle,  |10\rangle,  |11\rangle \) and the Qubit belonging to Bob look like \( |0\rangle, |1\rangle \)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Alice&amp;rsquo;s qubit that she wanted to transmit started in the state \( \alpha|0\rangle + \beta |1\rangle \), but in this equation the \( \alpha \) and \( \beta \) are on the final qubit (Bob&amp;rsquo;s qubit), and in four different configurations.
&lt;ul&gt;
&lt;li&gt;Each of the four configurations has an equal probability&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\( |00\rangle,  |01\rangle,  |10\rangle,  |11\rangle \) are the four states that alice can measure. So, if she measures 0, 1, if means that Bob&amp;rsquo;s qubit must be in the state \( \alpha|1\rangle + \beta|0\rangle \)
&lt;ul&gt;
&lt;li&gt;This means that Bob needs to invert the \( |1\rangle \) and \(|0\rangle \) to get back Alice&amp;rsquo;s original state (to invert Bob just needs to apply an X gate to his qubit)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Getting the qubits into the form of that equation isn&amp;rsquo;t too hard either. It just takes some carefully placed Hadamard and CNOT gates.&lt;/p&gt;
&lt;p&gt;After all of that, Alice can transfer a Qubit to Bob! And Bob should have an exact match of the original Qubit alice had.&lt;/p&gt;
&lt;h3 id=&#34;difficulties&#34;&gt;Difficulties&lt;/h3&gt;
&lt;p&gt;Things that were more difficult to implement than planned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I can&amp;rsquo;t tell if I&amp;rsquo;m being dumb, or thinking about it the wrong way. But constructing the unitary matrixies for each moment is surprisingly complex when there&amp;rsquo;s &amp;ldquo;gaps&amp;rdquo; and multiple CONTROLs.
&lt;ul&gt;
&lt;li&gt;My solution is extremely janky, and I do not trust it. Almost all the time I spent over the last few days was writing an algorithm to generate arbitrary matrixies with an arbitrary number of gaps and control gates. I asked on reddit if anyone knew how to do this, and they said I could Tensor Product the control gates, but I don&amp;rsquo;t believe that to be true. But something I need to look into, because that would be super nice if I could.&lt;/li&gt;
&lt;li&gt;(Edit, some more people responded, I can&amp;rsquo;t use Tensor products. Not going crazy)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Collapsing a single qubit. First you have to measure if the qubit should be &amp;ldquo;1&amp;rsquo; or &amp;ldquo;0&amp;rdquo;, and then collapsing all the states that depend on that qubit, and then re-normalizing. I also had the Qubits reversed in my diagram which led to some very confusing bugs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Anyways just some fun stuff I&amp;rsquo;ve been up to. Being 100% honest, I&amp;rsquo;m not always the best at responding (sorry), but if you have any questions or comments feel free to reach out! &lt;a href=&#34;mailto:c0nrad@c0nrad.io&#34;&gt;c0nrad@c0nrad.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m hoping I&amp;rsquo;ll have the Quantum Hash Cracking algorithm out soon. But in the meantime I still need to learn some other stuff first, so probably a few more algorithms first.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Florida</title>
      <link>https://blog.c0nrad.io/posts/florida/</link>
      <pubDate>Mon, 29 Jun 2020 12:06:58 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/florida/</guid>
      <description>&lt;p&gt;We moved to Florida! Made a little video.&lt;/p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/oQp7shFk2p8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Electron Wavefunctions for Hydrogen Part 2</title>
      <link>https://blog.c0nrad.io/posts/hydrogen-pt2/</link>
      <pubDate>Sat, 20 Jun 2020 14:37:31 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/hydrogen-pt2/</guid>
      <description>&lt;p&gt;Part 2 of calculating the electron wavefunctions for hydrogen.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.c0nrad.io/hydrogen/&#34;&gt;View Visualization&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;
&lt;p&gt;It&amp;rsquo;s done! (Technically it was done a month ago, I just never wrote about it).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.c0nrad.io/hydrogen/&#34;&gt;View Visualization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/Physics/comments/gt1set/interactive_electron_orbitals_of_hydrogen/&#34;&gt;https://www.reddit.com/r/Physics/comments/gt1set/interactive_electron_orbitals_of_hydrogen/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source code can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/c0nrad/hydrogen&#34;&gt;https://github.com/c0nrad/hydrogen&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;technical-implementation-notes&#34;&gt;Technical Implementation Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I ended up just sampling the wave functions, and saving it to a JSON file for the web component to read
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/c0nrad/hydrogen/blob/master/hydrogen.cpp#L199&#34;&gt;https://github.com/c0nrad/hydrogen/blob/master/hydrogen.cpp#L199&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Originally each point was a three.js sphere, but that ran way to slow, so I got to try vertex/fragement shaders for the first time! (using a THREE.cloud)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/c0nrad/hydrogen/blob/master/docs/index.html#L44&#34;&gt;https://github.com/c0nrad/hydrogen/blob/master/docs/index.html#L44&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The little control panel is actually pretty neat. Just a few lines of code
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/c0nrad/hydrogen/blob/master/docs/app.ts#L24&#34;&gt;https://github.com/c0nrad/hydrogen/blob/master/docs/app.ts#L24&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall super happy with it!&lt;/p&gt;
&lt;h2 id=&#34;future&#34;&gt;Future&lt;/h2&gt;
&lt;p&gt;Done with this project, but already onto the next! Stay tuned!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Reflections on 6 months solo SaaS startup</title>
      <link>https://blog.c0nrad.io/posts/reflections-6months/</link>
      <pubDate>Tue, 16 Jun 2020 07:59:02 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/reflections-6months/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s crazy to think my startup is already over 6 months old. This post is some informal reflections on that period.&lt;/p&gt;
&lt;p&gt;To set the context for people who are not me, this was my first foray into startups. The startup is pretty lean (it&amp;rsquo;s a saas security startup), only on the verge of profitability. Single digit customers.&lt;/p&gt;
&lt;p&gt;A lot of this may sound complain-y, they&amp;rsquo;re definitely first world problems. But they are things I wish I had fully internalized.&lt;/p&gt;
&lt;h2 id=&#34;nobody-cares&#34;&gt;Nobody cares&lt;/h2&gt;
&lt;p&gt;It sounds very negative, and I don&amp;rsquo;t mean it in a bad way. But I think it applies to many aspects of building the startup.&lt;/p&gt;
&lt;p&gt;People want a tool that solves the problem. No one cares about the effort involved in creating little features. No one cares about the story, no one cares how it works. They just want to be re-assured it will work, so they can focus on their 1000 other problems.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s nothing wrong with that, it&amp;rsquo;s just important to remember.&lt;/p&gt;
&lt;p&gt;The fact that no one cares also has positive aspects! I was worried about my two hours of planned downtime when I was doing a large migration. Literally no one cared. I think my startup could have been down for a few days, and no one would of cared that much. Unfortunately or fortunately I focused a lot on reliability (which was kind of wasted effort now that I realize it).&lt;/p&gt;
&lt;h2 id=&#34;careful-with-free-trials&#34;&gt;Careful with free trials&lt;/h2&gt;
&lt;p&gt;I thought it would be cool if I had a free sandbox plan. Let people kick the tires. When they see the amazing value they&amp;rsquo;ll upgrade!&lt;/p&gt;
&lt;p&gt;Not so much.&lt;/p&gt;
&lt;p&gt;The free sandbox offering attracted over 1000 businesses. Super neat! The only problem was&amp;hellip; no one upgraded to paying plans. So I&amp;rsquo;m supporting 1000 customers on my platform. Goodbye life savings (kidding, but it does cost non-trivial money).&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t want to dive into the specifics of content-security-policy report-uri, but having a sandbox account created weird dynamics/incentives. My startup focuses on making this specific security tool easier. And I charge based on &amp;ldquo;usage&amp;rdquo; of the feature. But by making this security tool easier, there was less need for usage. So every feature I included made the Sandbox account a better solution, no need to upgrade for more usage.&lt;/p&gt;
&lt;p&gt;So I had 1000+ people using the platform, and they had no incentive to upgrade. And every feature I released solidified that SANDBOX was all your need. I could of limited key features, but I hate it when other companies do that, and it wasn&amp;rsquo;t obvious to me what features to limit. It also feels dis-honest. Instead I&amp;rsquo;d rather focus on making the best product. So instead I went with a free trial period and made the choice to discontinue SANDBOX accounts. (If you were a sandbox user of Csper, against I apologize, but it had to be done).&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s way less usage, but now people pay for the service. And I&amp;rsquo;m not fronting the bill for &amp;gt;1000 customers (which I can not do for long since i&amp;rsquo;m self bootstrapped).&lt;/p&gt;
&lt;h2 id=&#34;seo--pipeline--ads&#34;&gt;SEO / Pipeline / Ads&lt;/h2&gt;
&lt;p&gt;It sounds so obvious now, but wasn&amp;rsquo;t fully fully internalized when I started.&lt;/p&gt;
&lt;p&gt;People aren&amp;rsquo;t just going to &amp;ldquo;stumble&amp;rdquo; onto your product.&lt;/p&gt;
&lt;p&gt;When Csper was released, I made sure it could handle a lot of load. I was worried that it would spread like wildfire. So I made sure everything could scale. Autoscaling k8s, autoscaling database. I setup observability on everything to debug issues, tracing, logging, monitoring dashboards, etc.&lt;/p&gt;
&lt;p&gt;Long story short, almost no one showed up.&lt;/p&gt;
&lt;p&gt;SEO / Marketing are the name of the game. (not an endorsement), but getting setup with SEM rush to track my SEO (specifically content marketing).&lt;/p&gt;
&lt;h2 id=&#34;people-like-open-source-a-lot&#34;&gt;People like &amp;ldquo;open source&amp;rdquo;&amp;hellip; a lot&lt;/h2&gt;
&lt;p&gt;I built a similar open source product about 5-6 years ago. It&amp;rsquo;s crazy how fast people will refer an open source product compared to a paid product.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a huge marketing advantage I never really considered. The product today is SIGNIFICANTLY better than the 5-6 year old product, yet people still share links to my old defunct product.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;open source&amp;rdquo; seems to trump reliability. I&amp;rsquo;m probably the same way, so I can&amp;rsquo;t complain too much. Just interesting to watch it happen.&lt;/p&gt;
&lt;p&gt;I was very tempted to shift to &amp;ldquo;open source&amp;rdquo; and then have a paid plan. But, never did.&lt;/p&gt;
&lt;h2 id=&#34;on-the-plus-working-for-yourself-is-amazing&#34;&gt;On the plus, working for yourself is&amp;hellip; amazing&lt;/h2&gt;
&lt;p&gt;I loved all my previous jobs. For better or worse, work is usually the center of my life.&lt;/p&gt;
&lt;p&gt;But, there&amp;rsquo;s something about waking up in the morning, making yourself some coffee, and pouring your heart into something you own. For awhile I would shoot out of bed at 6am (without an alarm) because I was so excited to get to work. I&amp;rsquo;d work for 12 hours, and then do it all again, and I was excited about it.&lt;/p&gt;
&lt;p&gt;And it&amp;rsquo;s so nice knowing where everything is. At some point I had to do a decent sized migration across 125 files. Knowing how everything works and where it is makes every project nice and fun. No hidden side effects.&lt;/p&gt;
&lt;h2 id=&#34;delayed-reward&#34;&gt;Delayed reward&lt;/h2&gt;
&lt;p&gt;More of a psychological thing. But it&amp;rsquo;s hard to remove the feeling of working hard and getting a reward.&lt;/p&gt;
&lt;p&gt;I did two large migrations on Csper. One was a re-write of &amp;ldquo;projects&amp;rdquo; and &amp;ldquo;organizations&amp;rdquo; to consolidate billing and other stuff. It was like 4500 lines of code over 125 files. Then doing all the data base migrations and testing&amp;hellip; It was a lot of work to make sure it all worked correctly. And it was a bit stressful.&lt;/p&gt;
&lt;p&gt;After the release went smoothly, it was a hurah! But, it&amp;rsquo;s not like I would instantly get any new customers.&lt;/p&gt;
&lt;p&gt;After the migration is done, I&amp;rsquo;m still just staring at my computer, nothing has changed.&lt;/p&gt;
&lt;p&gt;Being generous, let&amp;rsquo;s say the different of consolidated billings increased conversions by 5%, I&amp;rsquo;d have to wait awhile to see that impact. I don&amp;rsquo;t think I even got a new customer that week.&lt;/p&gt;
&lt;p&gt;It can be dis-heartening when you work super hard, but then nothing happens. It was a mental barrier to separate that.&lt;/p&gt;
&lt;h2 id=&#34;its-a-bit-of-a-rollercoaster&#34;&gt;It&amp;rsquo;s a bit of a rollercoaster&lt;/h2&gt;
&lt;p&gt;It seems like when things go bad, a lot of things go bad at once. A customer will leave, the firefox extension store will remove my addon, some feature will be acting up, and your competitors just signed a big deal.&lt;/p&gt;
&lt;p&gt;That emotional buffer is important. I should have remembered to leave some room in my emotional tank to take hits. Wearing thin and then taking a couple of hits is not fun.&lt;/p&gt;
&lt;p&gt;In the movies/books/interwebs every startup is successful. When you see people working hard, it&amp;rsquo;s like &amp;ldquo;no duh, the payoff and reward will be huge!&amp;rdquo; But in real life you have to face that most likely it will fail. When do you cut your losses? When you take a number of hits at once, those questions go to the front of your mind.&lt;/p&gt;
&lt;h2 id=&#34;lonely&#34;&gt;Lonely&lt;/h2&gt;
&lt;p&gt;Probably the biggest downside to this adventure so far is not working on a team. I miss is celebrating wins. Giving yourself a high five when a customer signs up is cool, but experiences are better shared with someone.&lt;/p&gt;
&lt;p&gt;My girlfriend and I recently worked out a system where I get a twinkie when I get a new customer. Which is very nice. We celebrate the wins, but there&amp;rsquo;s something about a group working towards a goal and achieving that goal.&lt;/p&gt;
&lt;h2 id=&#34;bug-fixes-are-meh&#34;&gt;Bug Fixes are&amp;hellip; meh&lt;/h2&gt;
&lt;p&gt;Previously as an engineer I would hate publishing bugs in my code. Where&amp;rsquo;s the attention to craft!&lt;/p&gt;
&lt;p&gt;But now being honest about my todo list, most bugs don&amp;rsquo;t matter &lt;em&gt;that&lt;/em&gt; much. The chance of defering a customer from paying because of a bug here and there is pretty small. (I mean, it depends on the bug, and you should try super hard not to have bugs. It&amp;rsquo;s no excuse for being sloppy).&lt;/p&gt;
&lt;p&gt;But, I have a bug tracker pretty full of little bugs here and there. But when I assign dollar values to them, SEO/marketing is almost always more important than fixing a bug.&lt;/p&gt;
&lt;p&gt;If an article attracts two new customers, and a weird edge case defers one customer, by the numbers it&amp;rsquo;s better to focus on the article. When you&amp;rsquo;re a non-bootstrapped solo startup, you have to run towards the money. You also can&amp;rsquo;t make everyone happy.&lt;/p&gt;
&lt;h2 id=&#34;others&#34;&gt;Others&lt;/h2&gt;
&lt;p&gt;Some things that I already knew, and thankful that I did:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Staging/prod. Staging saved my butt a number of times. And made things way less stressful when doing big changes. Worth every penny.&lt;/li&gt;
&lt;li&gt;k8s on gke was pretty nice. it took a day or two to get my infra setup, and then I never really thought about it. it just scales here and there.&lt;/li&gt;
&lt;li&gt;Single command deploys, and lots of makefiles. Any command that could be useful later I store in a makefile. i never want to think about things.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Things that were surprisingly frustrating:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Browser extension review processes!
&lt;ul&gt;
&lt;li&gt;Chrome takes weeks and weeks to review extensions&lt;/li&gt;
&lt;li&gt;Firefox is super picky about making sure that they can compile your code and it exactly matches what&amp;rsquo;s in the app store&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SaaS trails/charges. You rely on a number of services for your startup, and they start to add up. Some companies are also very sneaky about not emailing you before they charge your credit card. There was one company that charged me for 6 months without sending a single email.
&lt;ul&gt;
&lt;li&gt;I should of been reviewing my credit card statements, but when you&amp;rsquo;re already working long days, it&amp;rsquo;s near the bottom of the chopping block. At the end of the day, writing another article for SEO is more important than checking a hypothetical&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kind of weird point, but I tried advertising on linkedin/google/facebook/twitter. I left with a very negative view of all the platforms and try very hard not to read from them anymore. Everyone knows that those platforms are about advertising, but it wasn&amp;rsquo;t until I was trying to shove my agenda down other peoples throats did I realize how disgusting it was. Now I see all the other businesses doing what I was doing, pushing their own agenda. I want no part of anyone else&amp;rsquo;s agenda. I was probably doing ads wrong, but I saw no drop in signups after I stopped them. I&amp;rsquo;m going to fully focus on SEO instead. I feel good about that, when people have a problem, they&amp;rsquo;ll google for it, and my company will be there.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Overall, building Csper has been a interesting experience. Maybe less interesting than I would have hoped (I think I spend too much time on HN, startups are idolized a lot for some reason). At the end of the day I&amp;rsquo;m just shuffling bits and trying to make people happy. But definitely no regrets so far.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Electron Wavefunctions for Hydrogen Part 1</title>
      <link>https://blog.c0nrad.io/posts/hydrogen-pt1/</link>
      <pubDate>Thu, 28 May 2020 10:22:30 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/hydrogen-pt1/</guid>
      <description>&lt;p&gt;The code/math behind calculating the electron wavefunctions for hydrogen.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;I never thought I would have so much fun programming in C++ again. I can&amp;rsquo;t believe how much I miss operator overloading and templates.&lt;/p&gt;
&lt;p&gt;Being able to write &lt;code&gt;ex c = a + b;&lt;/code&gt; where a and b are custom types is so nice.&lt;/p&gt;
&lt;p&gt;The goal of my next project is creating an interactive display for the electron wavefunctions of hydrogen.&lt;/p&gt;
&lt;p&gt;I decided to do this project using &lt;a href=&#34;https://blog.c0nrad.io/posts/ginac-on-macos&#34;&gt;GiNaC&lt;/a&gt;, and the visualizations will be in three.js (webGL).&lt;/p&gt;
&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;
&lt;p&gt;So far I think I have most of the math done:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/c0nrad/hydrogen/blob/3f4287907ba50e661e1f77d419c4a6da0c77fb96/hydrogen.cpp&#34;&gt;Hydrogen Wave Function Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not 100% sure on the correctness of the final step (HydrogrenWaveFunction), I probably won&amp;rsquo;t know till I plot them.&lt;/p&gt;
&lt;p&gt;But, holy crap GiNaC is cool. I love that I can symbolically create expressions. It makes verifying them much easier. And I can take the derivative of expressions!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/hydrogen-output.png&#34; alt=&#34;hydrogen&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;h3 id=&#34;schrödinger-equation-in-spherical-coordinates&#34;&gt;Schrödinger Equation in Spherical Coordinates&lt;/h3&gt;
&lt;p&gt;To find the wavefunctions of hydrogen, you start at the same place you always start at&amp;hellip; the Schrödinger Equation!&lt;/p&gt;
&lt;p&gt;$$ i \hbar \frac{\partial \Psi}{\partial t} = - \frac{\hbar^2}{2m} \Delta^{2} \Psi + V \Psi $$&lt;/p&gt;
&lt;p&gt;For all the examples I&amp;rsquo;ve been learning about so far, we&amp;rsquo;ve been using X,Y,Z as the coordinate system. But for hydrogen (and other realistic systems), it makes sense to move to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Spherical_coordinate_system&#34;&gt;spherical coordinate system&lt;/a&gt;. This is because most real world potentials are proportional to a radius around some origin.&lt;/p&gt;
&lt;p&gt;Unfortunately the equation (time-independent Schrödinger Equation in spherical coordinates) gets a bit more complex:&lt;/p&gt;
&lt;p&gt;$$ - \frac{\hbar^2}{2m} [ \frac{1}{r^2}  \frac{ \partial }{\partial r} ( r^2 \frac{\partial \psi}{\partial r}) +   \frac{1}{r^2 \sin{\theta}} \frac{\partial}{\partial \theta} ( \sin{\theta} \frac{\partial \psi}{\partial \theta})    +     \frac{1}{r^2 \sin^2{\theta}} ( \frac{\partial^2 \psi}{\partial \phi^2}) ] + V \psi = E \psi $$&lt;/p&gt;
&lt;h3 id=&#34;hydrogen-solution&#34;&gt;Hydrogen Solution&lt;/h3&gt;
&lt;p&gt;In Hydrogen there&amp;rsquo;s one proton and one electron. The proton is significantly more massive than the electron. We just pin the proton at the middle and assume the electron floats around. Using Coulomb&amp;rsquo;s law, we can state that the potential energy of our system will be:&lt;/p&gt;
&lt;p&gt;$$ V(r) = -4 \frac{e^2}{4 \pi \epsilon_0 } \frac{1}{r} $$&lt;/p&gt;
&lt;p&gt;If you do all the math (and by &amp;lsquo;do the math&amp;rsquo;, I mean nod along in your text book while crying softly to yourself since you don&amp;rsquo;t really understand what&amp;rsquo;s going on), you&amp;rsquo;ll eventually find that the solutions for a bound electron to hydrogen to be:&lt;/p&gt;
&lt;p&gt;$$ \psi_{nlm}(r, \theta, \phi) = \sqrt{ \left(\frac{2}{na}\right)^3  \frac{(n-l-1)!}{2n (n+l)!}} e^{-r/na} \left( \frac{2r}{na}\right)^{l} \left[L_{n-l-1}^{2l+1}(2r/na)\right] Y_l^m(\theta, \phi) $$&lt;/p&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\( L_{q}^{p} \) is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Laguerre_polynomials&#34;&gt;Associated Laguerre Polynomial&lt;/a&gt;, defined by:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ L_q^p(x) = \frac{x^{-p} e^x}{q!}\left(\frac{d}{dx}\right)^d (e^{-x}x^{p+q}) $$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;\( a \) is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Bohr_radius&#34;&gt;Bohr Radius&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;\( Y_l^m(\theta, \phi) \) is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Spherical_harmonics&#34;&gt;spherical harmonics&lt;/a&gt;, defined by:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ Y_l^m(\theta, \phi) = \sqrt{ \frac{(2l+1)}{4 \pi} \frac{(l-m)!}{(l+m)!}} e^{i m \phi} * P^m_l(\cos{\theta}) $$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\( P^m_l(x) \) is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Associated_Legendre_polynomials&#34;&gt;associated Legendre Polynomials&lt;/a&gt;, defined by:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ P^m_l(x) = (-1)^m (1-x^2)^{m/2} \left( \frac{d}{dx} \right)^m P_l(x) $$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\( P_l(x) \) is the Legendre Polynomial, generated by the Rodrigues Formula:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ P_l(x) = \frac{1}{2^l l!} \left(\frac{d}{dx}\right)^l (x^2 - 1)^l $$&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;n&lt;/th&gt;&lt;th&gt;l&lt;/th&gt;&lt;th&gt;m&lt;/th&gt;&lt;th&gt; $$  \psi_{nlm}(r, \theta, \phi) $$ &lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt; $$ \frac{ \exp(-\frac{r}{a}) \sqrt{\frac{1}{a^{3}}}}{\sqrt{\pi}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt; $$ \frac{1}{4} \frac{ \sqrt{8} \sqrt{\frac{1}{a^{3}}} \exp(-\frac{1}{2} \frac{r}{a})}{\sqrt{\pi}}-\frac{1}{16} \frac{ \sqrt{8} \sqrt{\frac{1}{a^{3}}} \exp(-\frac{1}{2} \frac{r}{a}) r}{ \sqrt{\pi} a} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt; $$ \frac{1}{48} \frac{ \cos(\theta) \sqrt{24} \sqrt{3} r \exp(-\frac{1}{2} \frac{r}{a}) \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt; $$ -\frac{1}{24} \frac{ \sqrt{24} \sqrt{\frac{3}{8}} \exp(i \phi-\frac{1}{2} \frac{r}{a}) r \sqrt{1-\cos(\theta)^{2}} \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt; $$ -\frac{10}{729} \frac{ \exp(-\frac{1}{3} \frac{r}{a}) \sqrt{243} r \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a}+\frac{10}{243} \frac{ \exp(-\frac{1}{3} \frac{r}{a}) \sqrt{243} \sqrt{\frac{1}{a^{3}}}}{\sqrt{\pi}}+\frac{2}{2187} \frac{ \exp(-\frac{1}{3} \frac{r}{a}) \sqrt{243} r^{2} \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a^{2}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt; $$ \frac{2}{729} \frac{ \cos(\theta) \sqrt{3} \sqrt{\frac{1}{a^{3}}} r \sqrt{486} \exp(-\frac{1}{3} \frac{r}{a})}{ \sqrt{\pi} a}-\frac{1}{2187} \frac{ \cos(\theta) \sqrt{3} \sqrt{\frac{1}{a^{3}}} r^{2} \sqrt{486} \exp(-\frac{1}{3} \frac{r}{a})}{ \sqrt{\pi} a^{2}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt; $$ -\frac{4}{729} \frac{ \sqrt{\frac{1}{a^{3}}} \sqrt{\frac{3}{8}} \exp(i \phi-\frac{1}{3} \frac{r}{a}) r \sqrt{1-\cos(\theta)^{2}} \sqrt{486}}{ a \sqrt{\pi}}+\frac{2}{2187} \frac{ \sqrt{\frac{1}{a^{3}}} \sqrt{\frac{3}{8}} \exp(i \phi-\frac{1}{3} \frac{r}{a}) r^{2} \sqrt{1-\cos(\theta)^{2}} \sqrt{486}}{ a^{2} \sqrt{\pi}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt; $$ -\frac{1}{21870} \frac{ \sqrt{2430} \exp(-\frac{1}{3} \frac{r}{a}) r^{2} \sqrt{5} \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a^{2}}+\frac{1}{7290} \frac{ \cos(\theta)^{2} \sqrt{2430} \exp(-\frac{1}{3} \frac{r}{a}) r^{2} \sqrt{5} \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a^{2}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt; $$ -\frac{2}{3645} \frac{ \cos(\theta) \sqrt{2430} \sqrt{\frac{1}{a^{3}}} \exp(-\frac{1}{3} \frac{r}{a}+i \phi) r^{2} \sqrt{\frac{5}{24}} \sqrt{1-\cos(\theta)^{2}}}{ \sqrt{\pi} a^{2}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt; $$ -\frac{2}{3645} \frac{ \cos(\theta)^{2} \sqrt{2430} \exp(-\frac{1}{3} \frac{r}{a}+{(2 i)} \phi) r^{2} \sqrt{\frac{5}{96}} \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a^{2}}+\frac{2}{3645} \frac{ \sqrt{2430} \exp(-\frac{1}{3} \frac{r}{a}+{(2 i)} \phi) r^{2} \sqrt{\frac{5}{96}} \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a^{2}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id=&#34;building-functions-by-differentiation&#34;&gt;Building Functions by Differentiation&lt;/h3&gt;
&lt;p&gt;What&amp;rsquo;s super cool about a number of those functions is that they&amp;rsquo;re built using an arbitrary differentiation. \( \left(\frac{d}{dx}\right)^l \).&lt;/p&gt;
&lt;p&gt;This is the real reason I chose to use GiNaCs, so I could perform these derivatives symbolically.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ex RodriguesFormula(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;symbol &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; l)
{
    GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ex diffed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;pow(GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;pow(x, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, l);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;normal(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;pow(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, l) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;factorial(l)) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;diff(diffed, x, l));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;legendre-polynomials&#34;&gt;Legendre Polynomials&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Legendre_polynomials&#34;&gt;Legendre polynomials&lt;/a&gt; (and everything built up from it) are cool because they are orthogonal.&lt;/p&gt;
&lt;p&gt;This means they can be used to form a basis, and when combining these functions together, they don&amp;rsquo;t interfere with each other.&lt;/p&gt;
&lt;p&gt;This is particularly useful when constructing fourier series, since you can use a set of orthogonal vectors to describe any function. (Commonly Cos / Sin are used, which are also orthogonal. If you look at a chart of Cos/Sin from -pi to pi, and multiply them together and add up the areas, you can convince yourself they equal zero).&lt;/p&gt;
&lt;h3 id=&#34;what-are-n-l-and-m&#34;&gt;What are n, l, and m?&lt;/h3&gt;
&lt;p&gt;The easiest one to describe is &amp;ldquo;n&amp;rdquo;, the &lt;code&gt;principal quantum number&lt;/code&gt;. This is the energy state of the wave function. Any wave function with a similar n has the same energy.&lt;/p&gt;
&lt;p&gt;The higher the n, the further away the electron is from the nucleus (the proton).&lt;/p&gt;
&lt;p&gt;The energy is given by the Bohr formula (which is impressively simple given the wavefunctions we were looking at)&lt;/p&gt;
&lt;p&gt;$$ E_n = \frac{E_1}{n^2} $$&lt;/p&gt;
&lt;p&gt;\( E_1 = -13.6 eV\), which means that it requires -13.6eV to push an electron completely away from a proton.&lt;/p&gt;
&lt;p&gt;l is the &lt;code&gt;Azimuthal Quantum Number&lt;/code&gt;, and m is the &lt;code&gt;Magnetic Quantum Number&lt;/code&gt;, they both related to the angular momentum of the electron. I might talk more about them in a future blog post.&lt;/p&gt;
&lt;h2 id=&#34;up-next&#34;&gt;Up Next&lt;/h2&gt;
&lt;p&gt;Now that all the math is in &lt;a href=&#34;https://github.com/c0nrad/hydrogen/blob/3f4287907ba50e661e1f77d419c4a6da0c77fb96/hydrogen.cpp&#34;&gt;code&lt;/a&gt; up next is to start plotting the results of these functions. I&amp;rsquo;m not sure how exactly I want to tackle it, but I think I&amp;rsquo;ll just random sample a number of points, decide to keep them based off their probability, wait till I get a few hundred each and then just plot those points in three.js.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GiNaC on Macos</title>
      <link>https://blog.c0nrad.io/posts/ginac-on-macos/</link>
      <pubDate>Wed, 27 May 2020 18:43:40 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/ginac-on-macos/</guid>
      <description>&lt;p&gt;A quick guide on getting started with GiNaC on macos.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;I decided to start my next project which will be calculating the &amp;ldquo;orbitals&amp;rdquo; of electrons in Hydrogen.&lt;/p&gt;
&lt;p&gt;I was going to write it in Go, but calculating the Rodrigues formula and the associated Legendre Functions require performing an arbitrary polynomial derivative, and I couldn&amp;rsquo;t find a good symbolic differentiator in GoLang. (And I&amp;rsquo;d like to see the results, not use a numerical differentiator).&lt;/p&gt;
&lt;p&gt;Turns out there&amp;rsquo;s a good library in C/C++ that some particle physicists use called &lt;a href=&#34;https://www.ginac.de/tutorial/#Introduction&#34;&gt;GiNaCs&lt;/a&gt;. It has nice clean docs, and one of the starter examples was generating the &lt;a href=&#34;https://en.wikipedia.org/wiki/Hermite_polynomials&#34;&gt;hermite polynomials&lt;/a&gt;! (Which is similar to what I needed to do! (In that it&amp;rsquo;s built off of differentiating \( e^{-x} \) some amount of times.)&lt;/p&gt;
&lt;h2 id=&#34;installing-ginacs&#34;&gt;Installing GiNaCs&lt;/h2&gt;
&lt;p&gt;On Macos it&amp;rsquo;s extremely easy! First you need to install &lt;a href=&#34;https://www.ginac.de/CLN/&#34;&gt;CLN&lt;/a&gt; (Class Library for Numbers), and then GiNaC. But they&amp;rsquo;re both in homebrew!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install cln ginac
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s possible you&amp;rsquo;ll need to install xcode if you haven&amp;rsquo;t already. This is so gcc(clang) is setup. To install it you just run &lt;code&gt;xcode-select --install&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-vscode&#34;&gt;Setting up VSCode&lt;/h2&gt;
&lt;p&gt;Then I setup my IDE (I use Visual Code):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set the C++ Standard to gnu++17. The commit messages within GiNaCs made it look like they&amp;rsquo;re working on c++20 so I assume they&amp;rsquo;re already on 17.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/c-standard.png&#34; alt=&#34;c-standard&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Set the include paths&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/c-include-path.png&#34; alt=&#34;c-include-path&#34;&gt;&lt;/p&gt;
&lt;p&gt;To find the exact version for your include paths, open up terminal, and &lt;code&gt;cd&lt;/code&gt; into the package directories (/usr/local/Cellar) to find the correct version numbers.&lt;/p&gt;
&lt;p&gt;After this intelitype should work.&lt;/p&gt;
&lt;h2 id=&#34;build-the-example&#34;&gt;Build the example&lt;/h2&gt;
&lt;p&gt;I had to modify the default example a little bit. It was complaining about not knowing which version of &lt;code&gt;pow&lt;/code&gt; to use. So I just removed the namespaces (which I wanted to do anyways as I&amp;rsquo;m getting back into C++ and remember what belongs to what package)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;ginac/ginac.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ex HermitePoly(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;symbol &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n)
{
    GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ex HKer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exp(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pow(x, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;normal(GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;pow(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;diff(HKer, x, n) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; HKer);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;symbol z(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;z&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
        std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;H_&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(z) == &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; HermitePoly(z, i) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To build I ran:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;g++ -std&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gnu++17 hermitePoly.cpp -o hermitePoly -L/usr/local/Cellar/ginac/1.7.9/lib -lginac -L/usr/local/Cellar/cln/1.3.6/lib -lcln
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, you&amp;rsquo;ll need to know your exact package versions. For me it was ginac=1.7.9 and cln=1.3.6 on May 27th, 2020.&lt;/p&gt;
&lt;p&gt;And then to execute your hard work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./hermitePoly
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I keep everything in a Makefile, so really I just type &amp;ldquo;make&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Makefile&#34; data-lang=&#34;Makefile&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; build 
	./hermitePoly

&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; 
	g++ -std&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gnu++17 hermitePoly.cpp -o hermitePoly -L/usr/local/Cellar/ginac/1.7.9/lib -lginac -L/usr/local/Cellar/cln/1.3.6/lib -lcln
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I can&amp;rsquo;t believe how easy it was, I&amp;rsquo;m excited to start calculating the orbitals!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quantum Infinite Well</title>
      <link>https://blog.c0nrad.io/posts/quantum-infinite-well/</link>
      <pubDate>Fri, 22 May 2020 12:30:26 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/quantum-infinite-well/</guid>
      <description>&lt;p&gt;Calculating the stationary states of an electron in a quantum infinite well.&lt;/p&gt;
&lt;iframe class=&#34;full-width&#34; src=&#34;https://qsimp.github.io/qsimp/examples/infinite_well/&#34; style=&#34;border: 1px solid; height: 800px&#34; &gt;&lt;/iframe&gt;
&lt;br&gt;
(Or visit URL: &lt;a href=&#34;https://qsimp.github.io/qsimp/examples/infinite_well/&#34;&gt;https://qsimp.github.io/qsimp/examples/infinite_well/&lt;/a&gt;)
&lt;h2 id=&#34;particle-in-a-well&#34;&gt;Particle in a well&lt;/h2&gt;
&lt;p&gt;The above charts are calculations for a hypothetical electron stuck in a well.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a 1-dimensional well, and sides of the well are infinite in height.&lt;/p&gt;
&lt;p&gt;This model is kind of similar to a standard bouncy ball being placed into a hole, and we watch it slide back and fourth, unable to ever escape the hole. (And the hole has no friction).&lt;/p&gt;
&lt;p&gt;But there&amp;rsquo;s a couple of startling differences between the bouncy ball and particle in the well.&lt;/p&gt;
&lt;p&gt;If we imagine the bouncy ball in the well, it can have pretty much any velocity as it bounces back and forth between the sides of the walls. It could be moving at 1m/s, 10m/s, .00001 m/s. Anything works.&lt;/p&gt;
&lt;p&gt;But for our hypothetical particle, this is not possible. Not all &amp;ldquo;velocities&amp;rdquo; (or more correctly, energies) are allowed. The particle must be in a particular state, or a linear combination of states (more on linear combinations later).&lt;/p&gt;
&lt;p&gt;The hypothetical particle also can&amp;rsquo;t &amp;ldquo;sit still&amp;rdquo;. It must be at one of the energy states (or a linear combination of those states).&lt;/p&gt;
&lt;h2 id=&#34;schrödinger-equation&#34;&gt;Schrödinger Equation&lt;/h2&gt;
&lt;p&gt;In classical mechanics, we can calculate the position of the ball by using Newton&amp;rsquo;s \( F=ma \) and the equations of motion.&lt;/p&gt;
&lt;p&gt;Quantum mechanics has a similar function called the Schrödinger Equation. Using it we can learn about the particle as we go forward/backwards in time.&lt;/p&gt;
&lt;p&gt;$$ i \hbar \frac{\partial \Psi}{\partial t} = - \frac{\hbar^2}{2m} \frac{\partial^2 \Psi}{\partial x^2} + V \Psi $$&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt; \( \Psi \) is the wavefunction &lt;/li&gt;
    &lt;li&gt; \( \hbar \) is plank&#39;s constant (over 2pi) &lt;/li&gt;
    &lt;li&gt; \( m \) is the mass of the particle &lt;/li&gt;
    &lt;li&gt; \( i \) is an imaginary i (complex number) &lt;/li&gt;
    &lt;li&gt; \( V \) is the potential function  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;potential-function&#34;&gt;Potential Function&lt;/h3&gt;
&lt;p&gt;To &amp;ldquo;solve&amp;rdquo; the Schrödinger for a particular system, you need the Potential Energy function. The easiest Potential function to get started with is the Infinite Well.&lt;/p&gt;
&lt;p&gt;$$ V(x) = \begin{cases} 0, &amp;amp; 0 &amp;lt;= x &amp;lt;= a \\
\infty, &amp;amp; \text{otherwise} \end{cases}  $$&lt;/p&gt;
&lt;p&gt;It just says that the particle must stay in the well. There&amp;rsquo;s no escaping the well.&lt;/p&gt;
&lt;p&gt;Then, with that potential function, we can plug it into the Schrödinger and determine a function that &amp;ldquo;fits&amp;rdquo;. We eventually get:&lt;/p&gt;
&lt;p&gt;$$ \Psi_n (x, t) = \sqrt{ \frac{2}{a}} \sin{(\frac{n \pi}{a} x )} e^{-i (n^2 \pi^2 \hbar) / (2
m a^2 ) t} $$&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt; \( \Psi \) is the wavefunction &lt;/li&gt;
    &lt;li&gt; \( n \) is the specific stationary states &lt;/li&gt;
    &lt;li&gt; \( a \) is the width of the well &lt;/li&gt;
    &lt;li&gt; \( x \) is the &#34;position&#34; of the wave within the well &lt;/li&gt;
    &lt;li&gt; \( i \) is an imaginary i (complex number) &lt;/li&gt;
    &lt;li&gt; \( \hbar \) is plank&#39;s constant (over 2pi) &lt;/li&gt;
    &lt;li&gt; \( m \) is the mass of the electron &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;stationary-states&#34;&gt;Stationary States&lt;/h4&gt;
&lt;p&gt;Each one of the \( n \) states is an energy level that the particle can be in. But oddly in the quantum mechanics world, the particle will usually occupy a mix of different energy levels at the same time!&lt;/p&gt;
&lt;p&gt;But, when we try to figure out what energy state the particle is in, it will collapse to only one of the states.&lt;/p&gt;
&lt;p&gt;The probability of finding a particle in a particular state is ( |c_n|^2 ):&lt;/p&gt;
&lt;p&gt;$$ \Psi (x, t) = \sum_{n=1}^{\infty} c_n \sqrt{ \frac{2}{a}} \sin{(\frac{n \pi}{a} x )} e^{-i (n^2 \pi^2 \hbar) / (2 m a^2 ) t} $$&lt;/p&gt;
&lt;p&gt;Each of the states has a particular energy (as shown by the table above).&lt;/p&gt;
&lt;p&gt;The coefficients are determined by &amp;ldquo;initial wave function&amp;rdquo; such as \( \Psi (x, 0) = A x (a-x) \).  Using some Fourier series magic you can fit the equation by properly setting the \( c_n \)&amp;lsquo;s.&lt;/p&gt;
&lt;h2 id=&#34;imaginary-component&#34;&gt;Imaginary Component&lt;/h2&gt;
&lt;p&gt;In the above chart there&amp;rsquo;s two lines for every state, one for both the real and imaginary components.&lt;/p&gt;
&lt;p&gt;The imaginary component comes from the trailing \( e^i \) in the solution. The book I&amp;rsquo;m reading calls this the &amp;ldquo;time independent wiggle room&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s interesting though is that the time component doesn&amp;rsquo;t actually change the expectation values for the wave. (If we&amp;rsquo;re being 100% honest, I&amp;rsquo;m not actually sure what the time component does. It&amp;rsquo;s what I&amp;rsquo;m going to look into next. I have a feeling it&amp;rsquo;ll play a bigger role when we look at multi-particle systems that interfere with each other).&lt;/p&gt;
&lt;h2 id=&#34;expectation-values&#34;&gt;Expectation Values&lt;/h2&gt;
&lt;p&gt;Even more fun, t&amp;rsquo;s not possible to know everything about the particle in the well. We believe this to be a limitation of the universe, not our understanding of the universe.&lt;/p&gt;
&lt;p&gt;But we can still calculate &amp;ldquo;expectation&amp;rdquo; values for different properties. These properties are the result if you were to measure a bunch of particles in similar configurations and average them out.&lt;/p&gt;
&lt;p&gt;To calculate some of the expectation values we can use the following formulas:&lt;/p&gt;
&lt;h3 id=&#34;position&#34;&gt;Position&lt;/h3&gt;
&lt;p&gt;$$ \langle x \rangle = \int_{-\infty}^{\infty} \Psi^{*} [x] \Psi dx $$&lt;/p&gt;
&lt;h3 id=&#34;momentum&#34;&gt;Momentum&lt;/h3&gt;
&lt;p&gt;$$ \langle p \rangle = \int_{-\infty}^{\infty} \Psi^{*} [-i \hbar \frac{\partial}{\partial x}] \Psi dx $$&lt;/p&gt;
&lt;h3 id=&#34;uncertainty&#34;&gt;Uncertainty&lt;/h3&gt;
&lt;p&gt;We can also verify that all states adhere to the uncertainty principle:&lt;/p&gt;
&lt;p&gt;$$ \sigma_x \sigma_p \geq \frac{\hbar}{2} $$&lt;/p&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;p&gt;$$ \sigma_x = \langle x^2 \rangle - \langle x \rangle^2 $$&lt;/p&gt;
&lt;p&gt;$$ \langle x^2 \rangle = \int_{-\infty}^{\infty} \Psi^{*} [x]^2 \Psi dx $$&lt;/p&gt;
&lt;p&gt;Thankfully from the above table we can see that our calculated uncertainty is  \( \geq  \frac{\hbar}{2} \) for all states.&lt;/p&gt;
&lt;h2 id=&#34;up-next&#34;&gt;Up Next&lt;/h2&gt;
&lt;p&gt;Next up will be the quantum harmonic oscillator. I also want to learn more about how the equation evolves with time.&lt;/p&gt;
&lt;p&gt;If anything is confusing, please let me know! &lt;a href=&#34;mailto:c0nrad@c0nrad.io&#34;&gt;c0nrad@c0nrad.io&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Calculating Collisions Pt. 2</title>
      <link>https://blog.c0nrad.io/posts/calculating-collisions-2/</link>
      <pubDate>Mon, 18 May 2020 12:30:26 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/calculating-collisions-2/</guid>
      <description>&lt;p&gt;Programming the equation we derived in the &lt;a href=&#34;https://blog.c0nrad.io/posts/calculating-collisions/&#34;&gt;last post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;So in the last post we were able to generate the following equation. It can be used to determine the resulting velocities of a collision of two spheres:&lt;/p&gt;
&lt;p&gt;$$ v_{1f}^2  + v_{1f} \frac{(- 2 p_{i} m_{1} m_{2})}{m_{2} m_{1}^2 + m^2_2 m_{1}}  + \frac{p_{i}^2 m_{2} - 2 m^2_2 K_{i}}{m_{2} m_{1}^2 + m^2_2 m_{1}} =  0  $$&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;This morning I codified the equations into &lt;code&gt;simp&lt;/code&gt;, and they turned out pretty nicely!&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;video controls src=&#34;https://blog.c0nrad.io/sphere_collisions.mp4&#34; style=&#34;width: 75%;&#34; autoplay loop &gt;&lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;They line up to the math we worked out in the last blog post.&lt;/p&gt;
&lt;h3 id=&#34;vector-fun&#34;&gt;Vector Fun&lt;/h3&gt;
&lt;p&gt;In the last post I assumed that the vector math would just work out. Which ended up mostly being true.&lt;/p&gt;
&lt;p&gt;But, it took me some time to figure out what I was supposed to do with the vectors when multiplying them together.&lt;/p&gt;
&lt;p&gt;For Kinetic Energy, it almost seemed to make sense to take the dot product of the velocity vectors. Do we really want the &amp;ldquo;kinetic energy&amp;rdquo; for all the individual components? It feels weird to directly multiply two velocity vectors together.&lt;/p&gt;
&lt;p&gt;$$ K_{i} =  \frac{1}{2} m v^2  $$&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix} v_x \\ v_y \\ v_z \\ \end{bmatrix}^2 = v_x^2 + v_y^2 + v_z^2
$$&lt;/p&gt;
&lt;p&gt;But this didn&amp;rsquo;t work. When I treat kinetic energy like a scalar instead of a vector, I had to add/subtract scalars from a vector (during the quadratic equation step) which was also weird (and the results I got were less than ideal&amp;hellip;):&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;video controls src=&#34;https://blog.c0nrad.io/bad_collision.mp4&#34; style=&#34;width: 75%;&#34; autoplay loop &gt;&lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;So instead I just multiply the vectors across:&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix} v_x \\ v_y \\ v_z \\ \end{bmatrix}^2 = \begin{bmatrix} v_x^2 \\ v_y^2 \\ v_z^2 \\ \end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;And it seems to work. /shrug&lt;/p&gt;
&lt;h2 id=&#34;next-up&#34;&gt;Next up&lt;/h2&gt;
&lt;p&gt;Turns out there&amp;rsquo;s another big problem!&lt;/p&gt;
&lt;p&gt;The equations don&amp;rsquo;t take into account how the spheres are collide!&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;video controls src=&#34;https://blog.c0nrad.io/bad_sphere_angle.mp4&#34; style=&#34;width: 75%;&#34; autoplay loop &gt;&lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;Back to the drawing board. It has something to do with the normal forces, but I&amp;rsquo;m not 100% sure how the math will look yet. Stay tuned!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Calculating Collisions</title>
      <link>https://blog.c0nrad.io/posts/calculating-collisions/</link>
      <pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/calculating-collisions/</guid>
      <description>&lt;p&gt;My attempt at calculating the resulting velocities of two spheres colliding in 3D.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m currently working on a physics simulator (called &lt;code&gt;simp&lt;/code&gt;). While build the simulator I&amp;rsquo;m learning that calculating the physics is easy, but detecting and handling collisions is hard!&lt;/p&gt;
&lt;p&gt;As an example, the following is code I wrote last week for determining if a sphere and box are touching in 3D (and then attempting to handle the collision if they are). It&amp;rsquo;s complex and not even fully correct! It doesn&amp;rsquo;t handle the case of a sphere touching the corner of the box. And it still took me the better part of an entire day (I spent many hours trying to be clever instead of just handling all 6 faces of the box).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;shape&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Shape&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sphere&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;shape&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Shape&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Box&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;radius&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SphereEntity&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;radius&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dimensions&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BoxEntity&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;dimensions&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMax&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector3&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector3&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sphereMin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector3&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sphereMax&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector3&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inBounds&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector3&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMax&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;position&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dimensions&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;))
        &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;position&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dimensions&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;))

        &lt;span style=&#34;color:#a6e22e&#34;&gt;sphereMax&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;position&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;radius&lt;/span&gt;)
        &lt;span style=&#34;color:#a6e22e&#34;&gt;sphereMin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;position&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;radius&lt;/span&gt;)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;boxMin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;position&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;position&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMax&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)) {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;inBounds&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;inBounds&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inBounds&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sphereMin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sphereMin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMax&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)) {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fixed&lt;/span&gt;) {
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;position&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMax&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;radius&lt;/span&gt;)
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;velocity&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;velocity&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;))
                }

                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fixed&lt;/span&gt;) {
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;velocity&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;velocity&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;))
                }
            }

            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sphereMax&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMax&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sphereMax&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)) {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fixed&lt;/span&gt;) {
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;position&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;boxMin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;radius&lt;/span&gt;)
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;velocity&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;velocity&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;))
                }

                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fixed&lt;/span&gt;) {
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;velocity&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;velocity&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;))
                }
            }

        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;todays-problem&#34;&gt;Today&amp;rsquo;s Problem&lt;/h3&gt;
&lt;p&gt;This weekend I&amp;rsquo;ve been tackling a different but similar problem.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m trying to calculate the resulting velocity vectors of two colliding sphere&amp;rsquo;s.&lt;/p&gt;
&lt;p&gt;It seems like this should be something pretty simple? But I can&amp;rsquo;t figure out a general rule that accounts for all cases. (If there is one PLEASE comment it down below).&lt;/p&gt;
&lt;p&gt;It seems like there&amp;rsquo;d be an infinite number of solutions? (I know that&amp;rsquo;s not the case), but if two spheres bounce into each other, it seems reasonable that they could bounce off each other with a number of different velocities. Maybe one ball stops and all the momentum is transfered? Maybe they swap velocities? Maybe they swap velicities proportional to their mass?&lt;/p&gt;
&lt;p&gt;This was my attempt to use some math and figure it out.&lt;/p&gt;
&lt;h3 id=&#34;my-solution&#34;&gt;My Solution&lt;/h3&gt;
&lt;p&gt;First I started with the conservation of momentum and conservation of energy equations. We know they must be equal at the beginning and end of the collision. (We&amp;rsquo;re only using kinetic energy since there shouldn&amp;rsquo;t any change in potential at the point of collision.)&lt;/p&gt;
&lt;p&gt;$$
m_{1} v_{1i} + m_{2} v_{2i} = m_{1} v_{1f} + m_{2} v_{2f}
$$&lt;/p&gt;
&lt;p&gt;$$
\frac{1}{2} m_{1} v_{1i}^2 + \frac{1}{2} m_{2} v_{2i}^2 =  \frac{1}{2} m_{1} v_{1f}^2 +  \frac{1}{2} m_{2} v_{2f}^2
$$&lt;/p&gt;
&lt;p&gt;Since we can calculate the initial momentum \( p_{i} \) and kinetic energy \( K_{i} \), let&amp;rsquo;s substitute those into our two equations before things get messy:&lt;/p&gt;
&lt;p&gt;$$ p_{i} = m_{1} v_{1f} + m_{2} v_{2f} $$&lt;/p&gt;
&lt;p&gt;$$ K_{i} =  \frac{1}{2} m_{1} v_{1f}^2 +  \frac{1}{2} m_{2} v_{2f}^2 $$&lt;/p&gt;
&lt;p&gt;Then, we can solve both equations for \(  v_{2f} \):&lt;/p&gt;
&lt;p&gt;$$ \frac{p_{i} - m_{1} v_{1f}}{m_{2}} = v_{2f} $$
$$ \frac{K_{i} - \frac{1}{2} m_{1} v_{1f}^2}{\frac{1}{2} m_{2}} = v_{2f}^2 $$&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s join them together so we&amp;rsquo;re only left with \( v_{1f} \).&lt;/p&gt;
&lt;p&gt;$$ \frac{ (p_{i} - m_{1} v_{1f}) ^2}{m^2_2} =  \frac{K_{i} - \frac{1}{2} m_{1} v_{1f}^2}{\frac{1}{2} m_{2}} $$&lt;/p&gt;
&lt;p&gt;The only unknown left is \( v_{1f} \). Bingo! We have both \( v_{1f} \) and \( v_{1f}^2 \), so there will be multiple solutions(?). Let&amp;rsquo;s simplify:&lt;/p&gt;
&lt;p&gt;$$ \frac{ p_{i}^2 - 2 p_{i} m_{1} v_{1f} + m_{1}^2 v_{1f}^2 }{m^2_2} =  \frac{ 2K_{i} -  m_{1} v_{1f}^2}{ m_{2}} $$&lt;/p&gt;
&lt;!-- $$  m_{2} (p_{i}^2 - 2 p_{i} m_{1} v_{1f} + m_{1}^2 v_{1f}^2)  =   m^2_2 (2K_{i} -  m_{1} v_{1f}^2) $$

$$  p_{i}^2 m_{2} - 2 p_{i} m_{1} m_{2} v_{1f} + m_{2} m_{1}^2 v_{1f}^2  =    m^2_2 2K_{i} -    m^2_2 m_{1} v_{1f}^2 $$

$$  v_{1f}^2 m_{2} m_{1}^2 + v_{1f}^2 m^2_2 m_{1} - 2 p_{i} m_{1} m_{2} v_{1f} + p_{i}^2 m_{2} - m^2_2 2K_{i}  =  0  $$ --&gt;
&lt;p&gt;$$  v_{1f}^2 ( m_{2} m_{1}^2 + m^2_2 m_{1}) + v_{1f} (- 2 p_{i} m_{1} m_{2})  + (p_{i}^2 m_{2} - 2 m^2_2 K_{i}) =  0  $$&lt;/p&gt;
&lt;p&gt;$$  v_{1f}^2  + v_{1f} \frac{(- 2 p_{i} m_{1} m_{2})}{m_{2} m_{1}^2 + m^2_2 m_{1}}  + \frac{p_{i}^2 m_{2} - 2 m^2_2 K_{i}}{m_{2} m_{1}^2 + m^2_2 m_{1}} =  0  $$&lt;/p&gt;
&lt;p&gt;What does that mean? Not sure yet. Let&amp;rsquo;s solve a couple of examples and see what happens.&lt;/p&gt;
&lt;h4 id=&#34;two-equal-balls-colliding-at-equal-speed&#34;&gt;Two equal balls colliding at equal speed&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/equalmass_equalv.png&#34; alt=&#34;equal speed, equal mass&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;\( m_1 \)&lt;/th&gt;
&lt;th&gt;\(v_{1i} \)&lt;/th&gt;
&lt;th&gt;\( m_2 \)&lt;/th&gt;
&lt;th&gt;\( v_{2i} \)&lt;/th&gt;
&lt;th&gt;\( p \)&lt;/th&gt;
&lt;th&gt;\( K_i \)&lt;/th&gt;
&lt;th&gt;\(  \frac{(- 2 p_{i} m_{1} m_{2})}{m_{2} m_{1}^2 + m^2_2 m_{1}} \)&lt;/th&gt;
&lt;th&gt;\( \frac{p_{i}^2 m_{2} - 2 m^2_2 K_{i}}{m_{2} m_{1}^2 + m^2_2 m_{1}} \)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;-5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;125&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-25&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So our derived equation becomes:&lt;/p&gt;
&lt;p&gt;$$  v_{1f}^2  + v_{1f} (0) + -25 =  0  $$&lt;/p&gt;
&lt;p&gt;$$ v_{1f} = \pm 5 $$&lt;/p&gt;
&lt;p&gt;Which makes sense, two objects at equal speed and mass bounce off each other equally.&lt;/p&gt;
&lt;h4 id=&#34;two-equal-mass-balls-colliding-at-unequal-speeds&#34;&gt;Two equal mass balls colliding at unequal speeds&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/ball2_fast.png&#34; alt=&#34;equal speed, equal mass&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;\( m_1 \)&lt;/th&gt;
&lt;th&gt;\(v_{1i} \)&lt;/th&gt;
&lt;th&gt;\( m_2 \)&lt;/th&gt;
&lt;th&gt;\( v_{2i} \)&lt;/th&gt;
&lt;th&gt;\( p \)&lt;/th&gt;
&lt;th&gt;\( K_i \)&lt;/th&gt;
&lt;th&gt;\(  \frac{(- 2 p_{i} m_{1} m_{2})}{m_{2} m_{1}^2 + m^2_2 m_{1}} \)&lt;/th&gt;
&lt;th&gt;\( \frac{p_{i}^2 m_{2} - 2 m^2_2 K_{i}}{m_{2} m_{1}^2 + m^2_2 m_{1}} \)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;-15&lt;/td&gt;
&lt;td&gt;-50&lt;/td&gt;
&lt;td&gt;625&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;-75&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;$$  v_{1f}^2  + v_{1f} (10) + -75 =  0  $$&lt;/p&gt;
&lt;p&gt;So we need to apply the quadratic formula (holy crap, high school math flash back):&lt;/p&gt;
&lt;p&gt;$$ v_{1f} = \frac{ -b \pm \sqrt{ b^2 - 4 a c}}{2a} $$&lt;/p&gt;
&lt;p&gt;$$ v_{1f} = 5,-15 $$&lt;/p&gt;
&lt;p&gt;(Oddly we have two solutions. We&amp;rsquo;re going to ignore the first solution for a second). Using the conservation of momentum we get velocity of the second ball:&lt;/p&gt;
&lt;p&gt;$$ v_{2f} = -15,5 $$&lt;/p&gt;
&lt;p&gt;(Ignoring the first solution again). So they swap velocities. Neat!&lt;/p&gt;
&lt;h5 id=&#34;why-two-solutions&#34;&gt;Why Two Solutions?&lt;/h5&gt;
&lt;p&gt;At first I was very confused about why there were two solutions, and then I realized, we started this exercise with just two conservation laws, we never &amp;ldquo;said&amp;rdquo; they collided. So they could just continue along their current paths and that would satisfy the equations! (But obviously in the real world they collide).&lt;/p&gt;
&lt;h4 id=&#34;two-unequal-balls-colliding-at-equal-speed&#34;&gt;Two unequal balls colliding at equal speed&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/goliath.png&#34; alt=&#34;equal speed, equal mass&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;\( m_1 \)&lt;/th&gt;
&lt;th&gt;\( m_2 \)&lt;/th&gt;
&lt;th&gt;\(v_{1i} \)&lt;/th&gt;
&lt;th&gt;\( v_{2i} \)&lt;/th&gt;
&lt;th&gt;\( p \)&lt;/th&gt;
&lt;th&gt;\( K_i \)&lt;/th&gt;
&lt;th&gt;\(  \frac{(- 2 p_{i} m_{1} m_{2})}{m_{2} m_{1}^2 + m^2_2 m_{1}} \)&lt;/th&gt;
&lt;th&gt;\( \frac{p_{i}^2 m_{2} - 2 m^2_2 K_{i}}{m_{2} m_{1}^2 + m^2_2 m_{1}} \)&lt;/th&gt;
&lt;th&gt;\( v_{1f} \)&lt;/th&gt;
&lt;th&gt;\( v_{2f} \)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;-5&lt;/td&gt;
&lt;td&gt;-70&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;8.75&lt;/td&gt;
&lt;td&gt;-68.75&lt;/td&gt;
&lt;td&gt;-13.75&lt;/td&gt;
&lt;td&gt;-3.75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;-5&lt;/td&gt;
&lt;td&gt;-50&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;5.00&lt;/td&gt;
&lt;td&gt;-50.00&lt;/td&gt;
&lt;td&gt;-10.00&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;-5&lt;/td&gt;
&lt;td&gt;-25&lt;/td&gt;
&lt;td&gt;312.5&lt;/td&gt;
&lt;td&gt;2.00&lt;/td&gt;
&lt;td&gt;-35.00&lt;/td&gt;
&lt;td&gt;-7.00&lt;/td&gt;
&lt;td&gt;3.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So depending on the initial masses, a couple of things can happen.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When \( m_1 = 1, m_2 = 15\), \( m_1  \) will be pushed back into the reverse direction, and \(m_2 \) will continue pushing ahead.&lt;/li&gt;
&lt;li&gt;When \( m_1 = 5, m_2 = 15\), \( m_1  \) will be pushed back, and \(m_2 \) &lt;strong&gt;will stop in place!&lt;/strong&gt;. How cool!&lt;/li&gt;
&lt;li&gt;When \( m_1 = 10, m_2 ==15\), \(m_1 \) and \(m_2 \) will bounce back in opposite directions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-bigger-ball-gives-the-smaller-ball-a-gentle-love-tap&#34;&gt;A bigger ball gives the smaller ball a gentle love tap&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/love_tap.png&#34; alt=&#34;equal speed, equal mass&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;\( m_1 \)&lt;/th&gt;
&lt;th&gt;\(v_{1i} \)&lt;/th&gt;
&lt;th&gt;\( m_2 \)&lt;/th&gt;
&lt;th&gt;\( v_{2i} \)&lt;/th&gt;
&lt;th&gt;\( p \)&lt;/th&gt;
&lt;th&gt;\( K_i \)&lt;/th&gt;
&lt;th&gt;\(  \frac{(- 2 p_{i} m_{1} m_{2})}{m_{2} m_{1}^2 + m^2_2 m_{1}} \)&lt;/th&gt;
&lt;th&gt;\( \frac{p_{i}^2 m_{2} - 2 m^2_2 K_{i}}{m_{2} m_{1}^2 + m^2_2 m_{1}} \)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;175&lt;/td&gt;
&lt;td&gt;812.5&lt;/td&gt;
&lt;td&gt;-17.5&lt;/td&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;$$ v_{1f} = 10, 7.5 $$
$$ v_{2f} = 5, 12.5 $$&lt;/p&gt;
&lt;p&gt;Now that&amp;rsquo; weird. There&amp;rsquo;s two solutions that don&amp;rsquo;t match the initial conditions. But, we can eliminate one of them. If the bigger ball sneaks up on the little ball, it&amp;rsquo;s probably not going to jump over the first ball. So we know that \(v_{1f} &amp;lt; v_{2f} \). Only the second solution matches that. Therefore, the first ball transfers some of it&amp;rsquo;s momentum to the second ball, as expected.&lt;/p&gt;
&lt;p&gt;$$ v_{1f} = 7.5 $$
$$ v_{2f} = 12.5 $$&lt;/p&gt;
&lt;h3 id=&#34;open-questions&#34;&gt;Open Questions&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;When the sphere&amp;rsquo;s give each other a love tap, there&amp;rsquo;s two solutions. Why doesn&amp;rsquo;t one of the solutions equal the initial conditions?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Success!&lt;/p&gt;
&lt;p&gt;Using only two conservation laws we were able to determine the outcome of two colliding spheres. Technically we only did it in 1D, but as long as you respect the vector math, it should just work in 3D.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m going to codify the solutions into &lt;code&gt;simp&lt;/code&gt;, I&amp;rsquo;ll put the results in part 2.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>