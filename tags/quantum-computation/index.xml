<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>quantum computation on c0nrad&#39;s blog</title>
    <link>https://blog.c0nrad.io/tags/quantum-computation/</link>
    <description>c0nrad&#39;s blog (quantum computation)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jul 2020 09:26:38 -0400</lastBuildDate>
    
    <atom:link href="https://blog.c0nrad.io/tags/quantum-computation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shor&#39;s Algorithm</title>
      <link>https://blog.c0nrad.io/posts/shors/</link>
      <pubDate>Fri, 10 Jul 2020 09:26:38 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/shors/</guid>
      <description>&lt;p&gt;Shor&amp;rsquo;s algorithm is probably the most well known quantum algorithm. But it turns out I didn&amp;rsquo;t understand it as well as I thought.&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;m somewhat giving up on this problem. I got a working version, but I&amp;rsquo;m not happy with it.&lt;/p&gt;
&lt;p&gt;Spoiler, I thought the hard part of Shor&amp;rsquo;s algorithm would be the Quantum Fourier Transform. It turns out the hard problem is multiplying two numbers!&lt;/p&gt;
&lt;p&gt;Anyways, this post will give a super introductory look into RSA, Shor&amp;rsquo;s algorithm, and some rants about multiplication.&lt;/p&gt;
&lt;h2 id=&#34;shors&#34;&gt;Shor&amp;rsquo;s&lt;/h2&gt;
&lt;p&gt;This was the first Quantum Algorithm I heard about (my background is computer security). Using Shor&amp;rsquo;s algorithm you can factor large numbers. Which at the surface seems pretty unexciting, but then we remember that a lot of the world&amp;rsquo;s security is based on the fact that it&amp;rsquo;s hard to factor numbers. Factoring numbers is of huge importance.&lt;/p&gt;
&lt;h3 id=&#34;rsa&#34;&gt;RSA&lt;/h3&gt;
&lt;p&gt;RSA (and other asymmetric algorithms) are pretty cool. It&amp;rsquo;s a way to securely communicate with someone you&amp;rsquo;ve never met before, while others are listening. To prove to yourself how cool it is, try this thought experiment:&lt;/p&gt;
&lt;p&gt;Lets say you found yourself in jail, and you knew a terrible secret, and you wanted to notify a news agency of the terrible secret. But the guards are reading your letters. You&amp;rsquo;ve never met the news agency before. Can you hide a message in letters that only the news agency would find?&lt;/p&gt;
&lt;p&gt;Or a more real example, imagine you&amp;rsquo;re sitting at home, ordering something online from amazon.com, you need to give amazon.com your credit card, but there&amp;rsquo;s probably 10-20 computers/routers in between you and the amazon.com servers that will be reading every message you send as it goes to amazon. Can you securely send your credit card?&lt;/p&gt;
&lt;p&gt;The following ideas will not work, because the guard/servers will know what to look for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Hey amazon, look at the first letter of every sentence&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Hey amazon, use the following encryption algorithm with this key: abc123&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With no prior knowledge it&amp;rsquo;s pretty difficult (but not impossible). This is why RSA (and other asymmetric algorithms) are pretty cool.&lt;/p&gt;
&lt;p&gt;Instead you rely on the fact that it&amp;rsquo;s hard to factor prime numbers (and some number theory), it&amp;rsquo;s possible.&lt;/p&gt;
&lt;h3 id=&#34;rsa-algorithm&#34;&gt;RSA Algorithm&lt;/h3&gt;
&lt;p&gt;(This is a purposely wrong/simplified algorithm, it only carry&amp;rsquo;s the spirit of RSA for simplicity.)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If I want to send amazon a message I can take two large prime numbers and multiply them together N = p*q. Using the original p and q I can do some number theory to generate a D, and E, which are two other numbers that have special inverse properties. I then throw away p  and q. Since no one can determine what p and q are, my algorithm  (specifically my D number) is safe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then I send amazon/friend my E number (along with N). E is the public key. Since it&amp;rsquo;s a public key it can be sent/seen by anyone, (including the attackers)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Amazon/friend can then take a private message they want to send me and perform the following math:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$ ciphertext = message^E mod N  $$&lt;/p&gt;
&lt;p&gt;And send me the ciphertext.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;The only way to decrypt the ciphertext and get back the message is if you have the other number (D).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$ message = ciphertext^D mod N $$&lt;/p&gt;
&lt;p&gt;I now have the private message they sent me. They either sent their public key, or if they were smart they would have sent a &amp;ldquo;symmetric private key&amp;rdquo; that we could use with another symmetric cryptographic algorithm such as AES. (RSA is very computationally expensive. Much easier to use AES if you can)&lt;/p&gt;
&lt;p&gt;At this point we have sent a secure message and can easily send more secure messages. And the guards can intercept every message, and have no idea what is going on.&lt;/p&gt;
&lt;h3 id=&#34;breaking-rsa&#34;&gt;Breaking RSA&lt;/h3&gt;
&lt;p&gt;But, using shor&amp;rsquo;s algorithm you can figure out the factors of N. The D/E numbers are based off the original p and q numbers (N = p*q). Using the D number you can decrypt any message.&lt;/p&gt;
&lt;p&gt;So, if the guard/server had a quantum computer that ran shor&amp;rsquo;s algorithm, they could decode all the messages by factoring N and computing the D number.&lt;/p&gt;
&lt;h3 id=&#34;shors-algorithm&#34;&gt;Shor&amp;rsquo;s Algorithm&lt;/h3&gt;
&lt;p&gt;Shor&amp;rsquo;s algorithm is pretty nifty too. The quantum computer doesn&amp;rsquo;t just factor the numbers, you have to reframe the problem. That&amp;rsquo;s the genius behind shor&amp;rsquo;s algorithm.&lt;/p&gt;
&lt;p&gt;Instead you convert the problem such that it has a cyclic answer. Then you take the Quantum Fourier Transform, do some more math, and the factors pop out.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;math&amp;rdquo; that the quantum algorithm solves is \( a^{x} mod N \), where N is the prime number, a is some random number, and &amp;ldquo;x&amp;rdquo; is the number in super position. We have to find the period of this function. (How long until the function repeats itself).&lt;/p&gt;
&lt;p&gt;Normally to find the period you have to check the function over and over until it repeats. Classically this could take a very very very long time, but with a quantum computer we can try all the inputs at once, and then extract the pattern (thanks to QFT).&lt;/p&gt;
&lt;p&gt;Once you find the period of the function, you simply take the GCD of two numbers to get the factors:&lt;/p&gt;
&lt;p&gt;$$ f1 = GCD(N, a^{period/2} + 1) $$
$$ f2 = GCD(N, a^{period/2} - 1) $$&lt;/p&gt;
&lt;p&gt;These equations are based on Euler&amp;rsquo;s Theorem. f1 and f2 are our two factors. (So for 15, 3 and 5).&lt;/p&gt;
&lt;h2 id=&#34;why-multiplication-is-hard&#34;&gt;Why Multiplication Is Hard&lt;/h2&gt;
&lt;p&gt;I did not expect this. But it turns out the hard part of this was the multiplication!&lt;/p&gt;
&lt;p&gt;Multiplication requires a bunch of intermediate steps, and this quickly explodes the number of qubits you need to do computation. In the classical circuit you can destroy intermediate results and re-use them. But not so much in the quantum computer, every step must be reversable if you want it to be a real quantum gate. Multiplying a 3bit number by 3 bit number quickly went to more than 10 qubits, and then I gave up. (It&amp;rsquo;s probably horribly inefficient, but I couldn&amp;rsquo;t find any simple solutions).&lt;/p&gt;
&lt;p&gt;My quantum computer is horribly inefficient overall too, and even at 10qubits it&amp;rsquo;s very very slow. (if I optimized/cached some of the matrix code, I could speed it up to probably 16 qubits). But, it&amp;rsquo;s just disappointing to be thwarted by something so simple. I have a new appreciate for multiplication.&lt;/p&gt;
&lt;h2 id=&#34;slightly-cheating&#34;&gt;Slightly cheating&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/shor.png&#34; alt=&#34;shor&#34;&gt;&lt;/p&gt;
&lt;p&gt;So, instead the shor&amp;rsquo;s algorithm implemented above is just something I copied from &lt;a href=&#34;https://www.amazon.com/Programming-Quantum-Computers-Essential-Algorithms/dp/1492039683&#34;&gt;Programming Quantum Computers Essential Algorithms&lt;/a&gt;. It only works for 15 with a co-prime of 2.&lt;/p&gt;
&lt;p&gt;One day I&amp;rsquo;d like to revisit this, but I need to take a break.&lt;/p&gt;
&lt;h3 id=&#34;factor-via-grovers&#34;&gt;Factor Via Grovers&lt;/h3&gt;
&lt;p&gt;I also thought I would be sneaky and just factor the number&amp;rsquo;s using Grover&amp;rsquo;s algorithm, but again it&amp;rsquo;s taken me longer than I would like to build a non-wasteful circuit that does multiplication.&lt;/p&gt;
&lt;p&gt;But it seems reasonable that if there was an efficient multiplication, I could just create a quantum circuit with two registers A and B, and my oracle function would be &lt;i&gt;return A*B == N&lt;/i&gt;. Then it would only require PI * Sqrt(N)/4 iterations.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Overall the last few days were frustrating. But progress was made. I&amp;rsquo;m super happy that my little quantum computer can even solve a specific case of shor&amp;rsquo;s, but disappointed I couldn&amp;rsquo;t go further at this time.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll be taking a quick break from Quantum Computing to learn more of the basics. I just picked up a book on numerical methods, I think I&amp;rsquo;ll have some fun with that.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Simulating Quantum Fourier Transform</title>
      <link>https://blog.c0nrad.io/posts/qft/</link>
      <pubDate>Tue, 07 Jul 2020 11:01:25 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/qft/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m pretty excited. I&amp;rsquo;m somewhat in disbelief that it even works. But I was able to implement Quantum Fourier Transform on my little &lt;a href=&#34;https://github.com/c0nrad/qrad&#34;&gt;quantum computation simulator&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;video controls src=&#34;https://blog.c0nrad.io/iqft.mp4&#34; style=&#34;width: 100%;&#34; autoplay loop &gt;&lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;In the above simulation, the simulator is stepping through the circuit step by step.&lt;/p&gt;
&lt;p&gt;Each step is called a &amp;ldquo;moment&amp;rdquo;. The wires are the little qubits, and the boxes are the quantum gates.&lt;/p&gt;
&lt;p&gt;Each step in the circuit is represented by a 2**4 matrix (4 because there are 4 qubits). Most of the work involved in this simulator is constructing those matrixes corresponding to each step. For each step you multiply that matrix against the systems overall state. Just like that you&amp;rsquo;re simulating quantum systems.&lt;/p&gt;
&lt;p&gt;The bottom left is the amplitude and phases of the different states. Normally the phases are displayed a little differently, but it&amp;rsquo;s on a terminal so I just used a bar chart to represent them. (They&amp;rsquo;re complex numbers).&lt;/p&gt;
&lt;h2 id=&#34;fourier-transform&#34;&gt;Fourier Transform&lt;/h2&gt;
&lt;p&gt;I went to school for electrical engineering, and a big part of those four years was learning about the applications of fourier transforms. I never thought I&amp;rsquo;d be using it again, and I definitely did not expect to be using it for quantum computation. But it turns out it&amp;rsquo;s incredibly useful and fundamental to many quantum algorithms.&lt;/p&gt;
&lt;p&gt;The math for fourier transforms looks scary, but the concept is pretty simple.&lt;/p&gt;
&lt;p&gt;It turns out that in some cases, knowing the frequencies of a signal greatly simplifies a system.&lt;/p&gt;
&lt;p&gt;For example, if you had a sound signal made up of the combination of two sin waves, and you wanted to represent it by some function like f(t), it&amp;rsquo;d be a pretty &amp;ldquo;verbose&amp;rdquo; function. If you wanted to recreate the wave, you&amp;rsquo;d need to sample a lot of points to make any sense of it.&lt;/p&gt;
&lt;img src=&#34;https://blog.c0nrad.io/fourier.png&#34;&gt;
&lt;p&gt;But if I told you the function was just a combination of two sin waves at frequency 150 and 350, you only need those two frequencies to recreate the function.&lt;/p&gt;
&lt;p&gt;Using the fourier transform, you can get the frequencies of some signal.&lt;/p&gt;
&lt;h2 id=&#34;usage-of-quantum-fourier-transform&#34;&gt;Usage of Quantum Fourier Transform&lt;/h2&gt;
&lt;p&gt;In Quantum Computation you can&amp;rsquo;t just &amp;ldquo;ask&amp;rdquo; the quantum system what state it is in. You can only ask a few yes or no questions. (This is due to fundamental limits of nature, not limits of engineering).&lt;/p&gt;
&lt;p&gt;So a lot of the effort in creating quantum algorithms is &amp;ldquo;massaging&amp;rdquo; the problem in a way that allows us to ask a few specific questions.&lt;/p&gt;
&lt;p&gt;One trick that quantum algorithm designers like to use is to pose the question in a way that the answer repeats at some frequency, then take the fourier transform of those answers, and then just pluck out the frequency (solution).&lt;/p&gt;
&lt;p&gt;One example of this is Shor&amp;rsquo;s algorithm, an algorithm for factoring large numbers. Normally factoring large numbers is extremely difficult (believed near impossible), but can massage that problem into a similar problem that has a cyclic solution, implement it on a quantum computer, then use QFT to pluck out that frequency (solution).&lt;/p&gt;
&lt;p&gt;(I&amp;rsquo;m currently trying to implement Shor&amp;rsquo;s algorithm, but the cyclic algorithm (a**x mod N) is a little difficult on a quantum computer, but slowly getting there)&lt;/p&gt;
&lt;h2 id=&#34;simulator&#34;&gt;Simulator&lt;/h2&gt;
&lt;p&gt;The simulator was written using &lt;a href=&#34;https://github.com/mum4k/termdash&#34;&gt;https://github.com/mum4k/termdash&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a neat little library for displaying charts in terminal.&lt;/p&gt;
&lt;p&gt;A little overkill, but it&amp;rsquo;s nice to step through and see the phase and amplitudes evolve with time.&lt;/p&gt;
&lt;h2 id=&#34;crack-pot-idea&#34;&gt;Crack Pot Idea&lt;/h2&gt;
&lt;p&gt;Implementing a**x mod N on a quantum circuit has been surprisingly difficult. Also implementing CRC4. I don&amp;rsquo;t like having to think.&lt;/p&gt;
&lt;p&gt;One crack pot idea i&amp;rsquo;d like to test out is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if I wrote some algorithm to sample the functions (a**xmodN / CRC4) and create a truth table for those functions.&lt;/li&gt;
&lt;li&gt;Using that I can create some matrix that represents the function&lt;/li&gt;
&lt;li&gt;Then maybe I can take the &amp;ldquo;Reverse Kronocker product&amp;rdquo;(?) or brute force I, X, and CNOTs gates together until I find the circuit that makes up that matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No more thinking when I have a function I want on a quantum computer. We&amp;rsquo;ll see.&lt;/p&gt;
&lt;p&gt;(My double-down crack pot idea: maybe I could use grover&amp;rsquo;s algorithm to generate them for me. quantum algorithms building quantum algorithms). We&amp;rsquo;ll see.&lt;/p&gt;
&lt;h2 id=&#34;improvements-to-qrad&#34;&gt;Improvements to QRAD&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;QFT/iQFT&lt;/li&gt;
&lt;li&gt;Basic arithmetic&lt;/li&gt;
&lt;li&gt;The simulator using &lt;a href=&#34;https://github.com/mum4k/termdash&#34;&gt;https://github.com/mum4k/termdash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;things-that-were-frustratingtook-longer-than-planned&#34;&gt;Things that were frustrating/took longer than planned&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kind of silly, but I get my endianness mixed up a bit. Should the MSB (most significant bit), but on the top or the bottom of the circuit?
&lt;ul&gt;
&lt;li&gt;Eventually I need to pick a convention and stick with it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I thought that QFT would be the hard part of shor&amp;rsquo;s, but turns out it&amp;rsquo;s that a**xmodN. There&amp;rsquo;s some resources online, but it&amp;rsquo;s going to require some time understanding the solutions, they don&amp;rsquo;t look trivial.
&lt;ul&gt;
&lt;li&gt;There&amp;rsquo;s plenty of solutions that work for specific cases, but I want to be able to just say Factor(33) and have the circuit pop out&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;future&#34;&gt;Future&lt;/h2&gt;
&lt;p&gt;Next up I&amp;rsquo;m working on a couple of things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement Shor&amp;rsquo;s algorithm&lt;/li&gt;
&lt;li&gt;Implement the quantum hash cracker using grover&amp;rsquo;s algorithm&lt;/li&gt;
&lt;li&gt;Quantum Registers&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Quantum Teleportation Algorithm</title>
      <link>https://blog.c0nrad.io/posts/quantum-teleportation/</link>
      <pubDate>Fri, 03 Jul 2020 13:24:22 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/quantum-teleportation/</guid>
      <description>&lt;p&gt;This post is split into two parts. The first section is my motivation, and some background on the upgrades I made to my quantum simulator. The second part is implementing the Quantum Teleportation algorithm.&lt;/p&gt;
&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Recently I&amp;rsquo;m been playing more with Quantum Computing.&lt;/p&gt;
&lt;p&gt;Quantum Computing fits nicely into my current goals of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;learning more about the universe&lt;/li&gt;
&lt;li&gt;learning something practical&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A long time ago I built a &lt;a href=&#34;https://github.com/c0nrad/qrad&#34;&gt;little Quantum Computer Simulator&lt;/a&gt; for a internal company &amp;ldquo;hackathon&amp;rdquo;. At the time I worked at a database company, so I implemented &lt;a href=&#34;https://en.wikipedia.org/wiki/Grover%27s_algorithm&#34;&gt;Grover&amp;rsquo;s algorithm&lt;/a&gt;. (Grover&amp;rsquo;s Algorithm can be used to find an element in an unsorted array. Normally you&amp;rsquo;d have to search every element in the array until you get a match, but using a quantum computer, you can do it significantly faster (supposedly O(Sqrt(N)), but for smaller data sets I was able to do it in one pass. I&amp;rsquo;ll be talking about Grover&amp;rsquo;s algorithm at some point in the near future :), see next paragraph).&lt;/p&gt;
&lt;p&gt;I decided my next &amp;ldquo;long term&amp;rdquo; project will be to build a Quantum Hash Cracking algorithm. After thinking more about it, I&amp;rsquo;m pretty sure I can do it with Grover&amp;rsquo;s algorithm. But since it&amp;rsquo;s a simulated quantum computer, I can only simulate a couple of qubits, I so think I&amp;rsquo;ll actually be &amp;ldquo;cracking&amp;rdquo; CRC4. We&amp;rsquo;ll see. Maybe if I can get it working I can finagle IBM/GOOG into letting me verify CRC-16 or something on one of their quantum computers.&lt;/p&gt;
&lt;h2 id=&#34;upgrades-to-qrad&#34;&gt;Upgrades to QRAD&lt;/h2&gt;
&lt;p&gt;But the quantum hash-cracker is a little ways off. First I want to dust off the &lt;a href=&#34;https://github.com/c0nrad/qrad&#34;&gt;old simulator&lt;/a&gt;. The old simulator was heavily based on the book &lt;a href=&#34;https://www.amazon.com/Quantum-Computing-Computer-Scientists-Yanofsky/dp/0521879965?tag=techblast0f-20&#34;&gt;Quantum Computing for Computer Scientist&lt;/a&gt;. A great book if you have a CS background and want to get your hands dirty.&lt;/p&gt;
&lt;p&gt;But, after playing with IBM&amp;rsquo;s Qiskit, Google&amp;rsquo;s Cirq and Algassert&amp;rsquo;s Quirk, and I love how they do certain things. Specifically how they approach circuit building, so I rebuilt part of my simulator. Specifically:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Added &amp;ldquo;Moments&amp;rdquo;, a better way to organize gates&lt;/li&gt;
&lt;li&gt;Circuit Diagrams, so I can see what the circuits look like&lt;/li&gt;
&lt;li&gt;Arbitrary number of Control gates, CCCCCCCCNOT gates&lt;/li&gt;
&lt;li&gt;Measure/collapse independent Qubits, previously I could only collapse the entire state&lt;/li&gt;
&lt;li&gt;Treat circuit more like a state machine, append a bunch of moments, and then later execute the circuit, or resume execution&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;implementing-quantum-teleportation&#34;&gt;Implementing Quantum Teleportation&lt;/h2&gt;
&lt;p&gt;That algorithm I chose to implement first was Quantum Teleportation. Quantum Teleportation sounds super badass (and it is decently cool), but maybe not &amp;ldquo;super badass&amp;rdquo;. The math is pretty cool, and I&amp;rsquo;m guessing there&amp;rsquo;s some practical usage that I&amp;rsquo;m not aware of.&lt;/p&gt;
&lt;p&gt;Quantum Teleportation allows you to transfer the state of one qubit, to another qubit. In the classical world, this sounds super lame. But there&amp;rsquo;s some hurdles in the quantum world that make this difficult, hence why it&amp;rsquo;s a neat algorithm.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s something called No-Cloning Theorem, which states you can&amp;rsquo;t copy the state of a qubit to another qubit (due to limits on Quantum Information). You also can&amp;rsquo;t &amp;ldquo;peek&amp;rdquo; inside the state of a qubit. The qubit could be in any number of an infinite set of positions, but we can only ask it one single &amp;ldquo;yes or no&amp;rdquo; question.&lt;/p&gt;
&lt;h3 id=&#34;how-it-works&#34;&gt;How it works&lt;/h3&gt;
&lt;p&gt;Alice wants to send Bob the state of one of her qubits. Why? No idea.&lt;/p&gt;
&lt;p&gt;And for some reason she can&amp;rsquo;t just send Bob the Qubit. But they are able to share an Entangled Qubit. (Maybe Eve is able to generate a set of entangled Qubits and send one to Bob and one to Alice).&lt;/p&gt;
&lt;p&gt;Alice must then perform some actions both her original qubit and her entangled qubit. After performing the actions she will measure the state of her two qubits (destroying the qubit she wants to transfer).&lt;/p&gt;
&lt;p&gt;Alice then sends Bob the results of her measurements. (two classical bits). Using those two classical bits, Bob can construct the original state of Alice&amp;rsquo;s first Qubit.&lt;/p&gt;
&lt;h3 id=&#34;the-circuits&#34;&gt;The circuits&lt;/h3&gt;
&lt;p&gt;If you want to see a very neat demo of the algorithm, check out Algassert&amp;rsquo;s online quantum editor for &lt;a href=&#34;https://algassert.com/quirk#circuit=%7B%22cols%22:%5B%5B1,%22H%22%5D,%5B1,%22%E2%80%A2%22,1,1,%22X%22%5D,%5B%22%E2%80%A6%22,%22%E2%80%A6%22,1,1,%22%E2%80%A6%22%5D,%5B%22%E2%80%A6%22,%22%E2%80%A6%22,1,1,%22%E2%80%A6%22%5D,%5B%22~87lj%22%5D,%5B%22Bloch%22%5D,%5B%22%E2%80%A2%22,%22X%22%5D,%5B%22H%22%5D,%5B%22Measure%22,%22Measure%22%5D,%5B1,%22%E2%80%A2%22,1,1,%22X%22%5D,%5B%22%E2%80%A2%22,1,1,1,%22Z%22%5D,%5B1,1,1,1,%22Bloch%22%5D,%5B1,1,1,1,%22~f7c0%22%5D%5D,%22gates%22:%5B%7B%22id%22:%22~87lj%22,%22name%22:%22message%22,%22circuit%22:%7B%22cols%22:%5B%5B%22e%5E-iYt%22%5D,%5B%22X%5Et%22%5D%5D%7D%7D,%7B%22id%22:%22~f7c0%22,%22name%22:%22received%22,%22matrix%22:%22%7B%7B1,0%7D,%7B0,1%7D%7D%22%7D%5D%7D&#34;&gt;quantum teleportation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my significantly less sexy circuit diagram:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/teleportation.png&#34; alt=&#34;equal speed, equal mass&#34;&gt;&lt;/p&gt;
&lt;p&gt;Code:
&lt;a href=&#34;https://github.com/c0nrad/qrad/blob/master/circuits/teleportation/teleportation.go&#34;&gt;https://github.com/c0nrad/qrad/blob/master/circuits/teleportation/teleportation.go&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;the-maths&#34;&gt;The maths&lt;/h3&gt;
&lt;p&gt;The coolest part of the whole thing (in my opinion) is the maths. Following along in &lt;a href=&#34;https://www.amazon.com/Quantum-Computation-Information-10th-Anniversary/dp/1107002176/ref=sr_1_3?dchild=1&amp;amp;keywords=quantum+information&amp;amp;qid=1593801365&amp;amp;sr=8-3&amp;amp;tag=techblast0f-20&#34;&gt;Quantum Computation and Information Theory&lt;/a&gt; (supposedly the bible in the field, haven&amp;rsquo;t finished it yet though, so no opinion yet), there&amp;rsquo;s a single line that pretty much describes the entire algorithm:&lt;/p&gt;
&lt;p&gt;$$ |\psi\rangle = \frac{1}{2} [ |00 \rangle (\alpha|0\rangle + \beta|1\rangle) + |01 \rangle(\alpha|1\rangle + \beta |0\rangle) + |10\rangle (\alpha|0\rangle - \beta|1\rangle) + |11\rangle(\alpha|1\rangle - \beta|0\rangle) ]$$&lt;/p&gt;
&lt;p&gt;It can be a little tricky to read. Here&amp;rsquo;s a cheat sheet.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There&amp;rsquo;s three qubits in this system. The first two belong to Alice, the last to Bob&lt;/li&gt;
&lt;li&gt;The qubits can be identified by the weird \( |00\rangle, |1\rangle \) symbols.
&lt;ul&gt;
&lt;li&gt;These are called &amp;ldquo;ket&amp;rsquo;s&amp;rdquo; (After Dirac&amp;rsquo;s Bra-Ket notation, used a lot in quantum mechanics)&lt;/li&gt;
&lt;li&gt;So the qubits belonging to Alice look like \( |00\rangle,  |01\rangle,  |10\rangle,  |11\rangle \) and the Qubit belonging to Bob look like \( |0\rangle, |1\rangle \)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Alice&amp;rsquo;s qubit that she wanted to transmit started in the state \( \alpha|0\rangle + \beta |1\rangle \), but in this equation the \( \alpha \) and \( \beta \) are on the final qubit (Bob&amp;rsquo;s qubit), and in four different configurations.
&lt;ul&gt;
&lt;li&gt;Each of the four configurations has an equal probability&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\( |00\rangle,  |01\rangle,  |10\rangle,  |11\rangle \) are the four states that alice can measure. So, if she measures 0, 1, if means that Bob&amp;rsquo;s qubit must be in the state \( \alpha|1\rangle + \beta|0\rangle \)
&lt;ul&gt;
&lt;li&gt;This means that Bob needs to invert the \( |1\rangle \) and \(|0\rangle \) to get back Alice&amp;rsquo;s original state (to invert Bob just needs to apply an X gate to his qubit)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Getting the qubits into the form of that equation isn&amp;rsquo;t too hard either. It just takes some carefully placed Hadamard and CNOT gates.&lt;/p&gt;
&lt;p&gt;After all of that, Alice can transfer a Qubit to Bob! And Bob should have an exact match of the original Qubit alice had.&lt;/p&gt;
&lt;h3 id=&#34;difficulties&#34;&gt;Difficulties&lt;/h3&gt;
&lt;p&gt;Things that were more difficult to implement than planned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I can&amp;rsquo;t tell if I&amp;rsquo;m being dumb, or thinking about it the wrong way. But constructing the unitary matrixies for each moment is surprisingly complex when there&amp;rsquo;s &amp;ldquo;gaps&amp;rdquo; and multiple CONTROLs.
&lt;ul&gt;
&lt;li&gt;My solution is extremely janky, and I do not trust it. Almost all the time I spent over the last few days was writing an algorithm to generate arbitrary matrixies with an arbitrary number of gaps and control gates. I asked on reddit if anyone knew how to do this, and they said I could Tensor Product the control gates, but I don&amp;rsquo;t believe that to be true. But something I need to look into, because that would be super nice if I could.&lt;/li&gt;
&lt;li&gt;(Edit, some more people responded, I can&amp;rsquo;t use Tensor products. Not going crazy)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Collapsing a single qubit. First you have to measure if the qubit should be &amp;ldquo;1&amp;rsquo; or &amp;ldquo;0&amp;rdquo;, and then collapsing all the states that depend on that qubit, and then re-normalizing. I also had the Qubits reversed in my diagram which led to some very confusing bugs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Anyways just some fun stuff I&amp;rsquo;ve been up to. Being 100% honest, I&amp;rsquo;m not always the best at responding (sorry), but if you have any questions or comments feel free to reach out! &lt;a href=&#34;mailto:c0nrad@c0nrad.io&#34;&gt;c0nrad@c0nrad.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m hoping I&amp;rsquo;ll have the Quantum Hash Cracking algorithm out soon. But in the meantime I still need to learn some other stuff first, so probably a few more algorithms first.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>