<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>quantum mechanics on c0nrad&#39;s blog</title>
    <link>https://blog.c0nrad.io/tags/quantum-mechanics/</link>
    <description>c0nrad&#39;s blog (quantum mechanics)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Jun 2020 14:37:31 -0400</lastBuildDate>
    
    <atom:link href="https://blog.c0nrad.io/tags/quantum-mechanics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Electron Wavefunctions for Hydrogen Part 2</title>
      <link>https://blog.c0nrad.io/posts/hydrogen-pt2/</link>
      <pubDate>Sat, 20 Jun 2020 14:37:31 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/hydrogen-pt2/</guid>
      <description>&lt;p&gt;Part 2 of calculating the electron wavefunctions for hydrogen.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.c0nrad.io/hydrogen/&#34;&gt;View Visualization&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;
&lt;p&gt;It&amp;rsquo;s done! (Technically it was done a month ago, I just never wrote about it).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/Physics/comments/gt1set/interactive_electron_orbitals_of_hydrogen/&#34;&gt;https://www.reddit.com/r/Physics/comments/gt1set/interactive_electron_orbitals_of_hydrogen/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source code can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/c0nrad/hydrogen&#34;&gt;https://github.com/c0nrad/hydrogen&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;technical-implementation-notes&#34;&gt;Technical Implementation Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I ended up just sampling the wave functions, and saving it to a JSON file for the web component to read
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/c0nrad/hydrogen/blob/master/hydrogen.cpp#L199&#34;&gt;https://github.com/c0nrad/hydrogen/blob/master/hydrogen.cpp#L199&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Originally each point was a three.js sphere, but that ran way to slow, so I got to try vertex/fragement shaders for the first time! (using a THREE.cloud)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/c0nrad/hydrogen/blob/master/docs/index.html#L44&#34;&gt;https://github.com/c0nrad/hydrogen/blob/master/docs/index.html#L44&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The little control panel is actually pretty neat. Just a few lines of code
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/c0nrad/hydrogen/blob/master/docs/app.ts#L24&#34;&gt;https://github.com/c0nrad/hydrogen/blob/master/docs/app.ts#L24&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall super happy with it!&lt;/p&gt;
&lt;h2 id=&#34;future&#34;&gt;Future&lt;/h2&gt;
&lt;p&gt;Done with this project, but already onto the next! Stay tuned!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Electron Wavefunctions for Hydrogen Part 1</title>
      <link>https://blog.c0nrad.io/posts/hydrogen-pt1/</link>
      <pubDate>Thu, 28 May 2020 10:22:30 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/hydrogen-pt1/</guid>
      <description>&lt;p&gt;The code/math behind calculating the electron wavefunctions for hydrogen.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;I never thought I would have so much fun programming in C++ again. I can&amp;rsquo;t believe how much I miss operator overloading and templates.&lt;/p&gt;
&lt;p&gt;Being able to write &lt;code&gt;ex c = a + b;&lt;/code&gt; where a and b are custom types is so nice.&lt;/p&gt;
&lt;p&gt;The goal of my next project is creating an interactive display for the electron wavefunctions of hydrogen.&lt;/p&gt;
&lt;p&gt;I decided to do this project using &lt;a href=&#34;https://blog.c0nrad.io/posts/ginac-on-macos&#34;&gt;GiNaC&lt;/a&gt;, and the visualizations will be in three.js (webGL).&lt;/p&gt;
&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;
&lt;p&gt;So far I think I have most of the math done:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/c0nrad/hydrogen/blob/3f4287907ba50e661e1f77d419c4a6da0c77fb96/hydrogen.cpp&#34;&gt;Hydrogen Wave Function Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not 100% sure on the correctness of the final step (HydrogrenWaveFunction), I probably won&amp;rsquo;t know till I plot them.&lt;/p&gt;
&lt;p&gt;But, holy crap GiNaC is cool. I love that I can symbolically create expressions. It makes verifying them much easier. And I can take the derivative of expressions!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/hydrogen-output.png&#34; alt=&#34;hydrogen&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;h3 id=&#34;schrödinger-equation-in-spherical-coordinates&#34;&gt;Schrödinger Equation in Spherical Coordinates&lt;/h3&gt;
&lt;p&gt;To find the wavefunctions of hydrogen, you start at the same place you always start at&amp;hellip; the Schrödinger Equation!&lt;/p&gt;
&lt;p&gt;$$ i \hbar \frac{\partial \Psi}{\partial t} = - \frac{\hbar^2}{2m} \Delta^{2} \Psi + V \Psi $$&lt;/p&gt;
&lt;p&gt;For all the examples I&amp;rsquo;ve been learning about so far, we&amp;rsquo;ve been using X,Y,Z as the coordinate system. But for hydrogen (and other realistic systems), it makes sense to move to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Spherical_coordinate_system&#34;&gt;spherical coordinate system&lt;/a&gt;. This is because most real world potentials are proportional to a radius around some origin.&lt;/p&gt;
&lt;p&gt;Unfortunately the equation (time-independent Schrödinger Equation in spherical coordinates) gets a bit more complex:&lt;/p&gt;
&lt;p&gt;$$ - \frac{\hbar^2}{2m} [ \frac{1}{r^2}  \frac{ \partial }{\partial r} ( r^2 \frac{\partial \psi}{\partial r}) +   \frac{1}{r^2 \sin{\theta}} \frac{\partial}{\partial \theta} ( \sin{\theta} \frac{\partial \psi}{\partial \theta})    +     \frac{1}{r^2 \sin^2{\theta}} ( \frac{\partial^2 \psi}{\partial \phi^2}) ] + V \psi = E \psi $$&lt;/p&gt;
&lt;h3 id=&#34;hydrogen-solution&#34;&gt;Hydrogen Solution&lt;/h3&gt;
&lt;p&gt;In Hydrogen there&amp;rsquo;s one proton and one electron. The proton is significantly more massive than the electron. We just pin the proton at the middle and assume the electron floats around. Using Coulomb&amp;rsquo;s law, we can state that the potential energy of our system will be:&lt;/p&gt;
&lt;p&gt;$$ V(r) = -4 \frac{e^2}{4 \pi \epsilon_0 } \frac{1}{r} $$&lt;/p&gt;
&lt;p&gt;If you do all the math (and by &amp;lsquo;do the math&amp;rsquo;, I mean nod along in your text book while crying softly to yourself since you don&amp;rsquo;t really understand what&amp;rsquo;s going on), you&amp;rsquo;ll eventually find that the solutions for a bound electron to hydrogen to be:&lt;/p&gt;
&lt;p&gt;$$ \psi_{nlm}(r, \theta, \phi) = \sqrt{ \left(\frac{2}{na}\right)^3  \frac{(n-l-1)!}{2n (n+l)!}} e^{-r/na} \left( \frac{2r}{na}\right)^{l} \left[L_{n-l-1}^{2l+1}(2r/na)\right] Y_l^m(\theta, \phi) $$&lt;/p&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\( L_{q}^{p} \) is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Laguerre_polynomials&#34;&gt;Associated Laguerre Polynomial&lt;/a&gt;, defined by:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ L_q^p(x) = \frac{x^{-p} e^x}{q!}\left(\frac{d}{dx}\right)^d (e^{-x}x^{p+q}) $$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;\( a \) is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Bohr_radius&#34;&gt;Bohr Radius&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;\( Y_l^m(\theta, \phi) \) is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Spherical_harmonics&#34;&gt;spherical harmonics&lt;/a&gt;, defined by:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ Y_l^m(\theta, \phi) = \sqrt{ \frac{(2l+1)}{4 \pi} \frac{(l-m)!}{(l+m)!}} e^{i m \phi} * P^m_l(\cos{\theta}) $$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\( P^m_l(x) \) is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Associated_Legendre_polynomials&#34;&gt;associated Legendre Polynomials&lt;/a&gt;, defined by:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ P^m_l(x) = (-1)^m (1-x^2)^{m/2} \left( \frac{d}{dx} \right)^m P_l(x) $$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\( P_l(x) \) is the Legendre Polynomial, generated by the Rodrigues Formula:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ P_l(x) = \frac{1}{2^l l!} \left(\frac{d}{dx}\right)^l (x^2 - 1)^l $$&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;n&lt;/th&gt;&lt;th&gt;l&lt;/th&gt;&lt;th&gt;m&lt;/th&gt;&lt;th&gt; $$  \psi_{nlm}(r, \theta, \phi) $$ &lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt; $$ \frac{ \exp(-\frac{r}{a}) \sqrt{\frac{1}{a^{3}}}}{\sqrt{\pi}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt; $$ \frac{1}{4} \frac{ \sqrt{8} \sqrt{\frac{1}{a^{3}}} \exp(-\frac{1}{2} \frac{r}{a})}{\sqrt{\pi}}-\frac{1}{16} \frac{ \sqrt{8} \sqrt{\frac{1}{a^{3}}} \exp(-\frac{1}{2} \frac{r}{a}) r}{ \sqrt{\pi} a} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt; $$ \frac{1}{48} \frac{ \cos(\theta) \sqrt{24} \sqrt{3} r \exp(-\frac{1}{2} \frac{r}{a}) \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt; $$ -\frac{1}{24} \frac{ \sqrt{24} \sqrt{\frac{3}{8}} \exp(i \phi-\frac{1}{2} \frac{r}{a}) r \sqrt{1-\cos(\theta)^{2}} \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt; $$ -\frac{10}{729} \frac{ \exp(-\frac{1}{3} \frac{r}{a}) \sqrt{243} r \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a}+\frac{10}{243} \frac{ \exp(-\frac{1}{3} \frac{r}{a}) \sqrt{243} \sqrt{\frac{1}{a^{3}}}}{\sqrt{\pi}}+\frac{2}{2187} \frac{ \exp(-\frac{1}{3} \frac{r}{a}) \sqrt{243} r^{2} \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a^{2}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt; $$ \frac{2}{729} \frac{ \cos(\theta) \sqrt{3} \sqrt{\frac{1}{a^{3}}} r \sqrt{486} \exp(-\frac{1}{3} \frac{r}{a})}{ \sqrt{\pi} a}-\frac{1}{2187} \frac{ \cos(\theta) \sqrt{3} \sqrt{\frac{1}{a^{3}}} r^{2} \sqrt{486} \exp(-\frac{1}{3} \frac{r}{a})}{ \sqrt{\pi} a^{2}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt; $$ -\frac{4}{729} \frac{ \sqrt{\frac{1}{a^{3}}} \sqrt{\frac{3}{8}} \exp(i \phi-\frac{1}{3} \frac{r}{a}) r \sqrt{1-\cos(\theta)^{2}} \sqrt{486}}{ a \sqrt{\pi}}+\frac{2}{2187} \frac{ \sqrt{\frac{1}{a^{3}}} \sqrt{\frac{3}{8}} \exp(i \phi-\frac{1}{3} \frac{r}{a}) r^{2} \sqrt{1-\cos(\theta)^{2}} \sqrt{486}}{ a^{2} \sqrt{\pi}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt; $$ -\frac{1}{21870} \frac{ \sqrt{2430} \exp(-\frac{1}{3} \frac{r}{a}) r^{2} \sqrt{5} \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a^{2}}+\frac{1}{7290} \frac{ \cos(\theta)^{2} \sqrt{2430} \exp(-\frac{1}{3} \frac{r}{a}) r^{2} \sqrt{5} \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a^{2}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt; $$ -\frac{2}{3645} \frac{ \cos(\theta) \sqrt{2430} \sqrt{\frac{1}{a^{3}}} \exp(-\frac{1}{3} \frac{r}{a}+i \phi) r^{2} \sqrt{\frac{5}{24}} \sqrt{1-\cos(\theta)^{2}}}{ \sqrt{\pi} a^{2}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt; $$ -\frac{2}{3645} \frac{ \cos(\theta)^{2} \sqrt{2430} \exp(-\frac{1}{3} \frac{r}{a}+{(2 i)} \phi) r^{2} \sqrt{\frac{5}{96}} \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a^{2}}+\frac{2}{3645} \frac{ \sqrt{2430} \exp(-\frac{1}{3} \frac{r}{a}+{(2 i)} \phi) r^{2} \sqrt{\frac{5}{96}} \sqrt{\frac{1}{a^{3}}}}{ \sqrt{\pi} a^{2}} $$ &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id=&#34;building-functions-by-differentiation&#34;&gt;Building Functions by Differentiation&lt;/h3&gt;
&lt;p&gt;What&amp;rsquo;s super cool about a number of those functions is that they&amp;rsquo;re built using an arbitrary differentiation. \( \left(\frac{d}{dx}\right)^l \).&lt;/p&gt;
&lt;p&gt;This is the real reason I chose to use GiNaCs, so I could perform these derivatives symbolically.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ex RodriguesFormula(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;symbol &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; l)
{
    GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ex diffed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;pow(GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;pow(x, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, l);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;normal(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;pow(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, l) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;factorial(l)) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;diff(diffed, x, l));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;legendre-polynomials&#34;&gt;Legendre Polynomials&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Legendre_polynomials&#34;&gt;Legendre polynomials&lt;/a&gt; (and everything built up from it) are cool because they are orthogonal.&lt;/p&gt;
&lt;p&gt;This means they can be used to form a basis, and when combining these functions together, they don&amp;rsquo;t interfere with each other.&lt;/p&gt;
&lt;p&gt;This is particularly useful when constructing fourier series, since you can use a set of orthogonal vectors to describe any function. (Commonly Cos / Sin are used, which are also orthogonal. If you look at a chart of Cos/Sin from -pi to pi, and multiply them together and add up the areas, you can convince yourself they equal zero).&lt;/p&gt;
&lt;h3 id=&#34;what-are-n-l-and-m&#34;&gt;What are n, l, and m?&lt;/h3&gt;
&lt;p&gt;The easiest one to describe is &amp;ldquo;n&amp;rdquo;, the &lt;code&gt;principal quantum number&lt;/code&gt;. This is the energy state of the wave function. Any wave function with a similar n has the same energy.&lt;/p&gt;
&lt;p&gt;The higher the n, the further away the electron is from the nucleus (the proton).&lt;/p&gt;
&lt;p&gt;The energy is given by the Bohr formula (which is impressively simple given the wavefunctions we were looking at)&lt;/p&gt;
&lt;p&gt;$$ E_n = \frac{E_1}{n^2} $$&lt;/p&gt;
&lt;p&gt;\( E_1 = -13.6 eV\), which means that it requires -13.6eV to push an electron completely away from a proton.&lt;/p&gt;
&lt;p&gt;l is the &lt;code&gt;Azimuthal Quantum Number&lt;/code&gt;, and m is the &lt;code&gt;Magnetic Quantum Number&lt;/code&gt;, they both related to the angular momentum of the electron. I might talk more about them in a future blog post.&lt;/p&gt;
&lt;h2 id=&#34;up-next&#34;&gt;Up Next&lt;/h2&gt;
&lt;p&gt;Now that all the math is in &lt;a href=&#34;https://github.com/c0nrad/hydrogen/blob/3f4287907ba50e661e1f77d419c4a6da0c77fb96/hydrogen.cpp&#34;&gt;code&lt;/a&gt; up next is to start plotting the results of these functions. I&amp;rsquo;m not sure how exactly I want to tackle it, but I think I&amp;rsquo;ll just random sample a number of points, decide to keep them based off their probability, wait till I get a few hundred each and then just plot those points in three.js.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GiNaC on Macos</title>
      <link>https://blog.c0nrad.io/posts/ginac-on-macos/</link>
      <pubDate>Wed, 27 May 2020 18:43:40 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/ginac-on-macos/</guid>
      <description>&lt;p&gt;A quick guide on getting started with GiNaC on macos.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;I decided to start my next project which will be calculating the &amp;ldquo;orbitals&amp;rdquo; of electrons in Hydrogen.&lt;/p&gt;
&lt;p&gt;I was going to write it in Go, but calculating the Rodrigues formula and the associated Legendre Functions require performing an arbitrary polynomial derivative, and I couldn&amp;rsquo;t find a good symbolic differentiator in GoLang. (And I&amp;rsquo;d like to see the results, not use a numerical differentiator).&lt;/p&gt;
&lt;p&gt;Turns out there&amp;rsquo;s a good library in C/C++ that some particle physicists use called &lt;a href=&#34;https://www.ginac.de/tutorial/#Introduction&#34;&gt;GiNaCs&lt;/a&gt;. It has nice clean docs, and one of the starter examples was generating the &lt;a href=&#34;https://en.wikipedia.org/wiki/Hermite_polynomials&#34;&gt;hermite polynomials&lt;/a&gt;! (Which is similar to what I needed to do! (In that it&amp;rsquo;s built off of differentiating \( e^{-x} \) some amount of times.)&lt;/p&gt;
&lt;h2 id=&#34;installing-ginacs&#34;&gt;Installing GiNaCs&lt;/h2&gt;
&lt;p&gt;On Macos it&amp;rsquo;s extremely easy! First you need to install &lt;a href=&#34;https://www.ginac.de/CLN/&#34;&gt;CLN&lt;/a&gt; (Class Library for Numbers), and then GiNaC. But they&amp;rsquo;re both in homebrew!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install cln ginac
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s possible you&amp;rsquo;ll need to install xcode if you haven&amp;rsquo;t already. This is so gcc(clang) is setup. To install it you just run &lt;code&gt;xcode-select --install&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-vscode&#34;&gt;Setting up VSCode&lt;/h2&gt;
&lt;p&gt;Then I setup my IDE (I use Visual Code):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set the C++ Standard to gnu++17. The commit messages within GiNaCs made it look like they&amp;rsquo;re working on c++20 so I assume they&amp;rsquo;re already on 17.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/c-standard.png&#34; alt=&#34;c-standard&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Set the include paths&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.c0nrad.io/c-include-path.png&#34; alt=&#34;c-include-path&#34;&gt;&lt;/p&gt;
&lt;p&gt;To find the exact version for your include paths, open up terminal, and &lt;code&gt;cd&lt;/code&gt; into the package directories (/usr/local/Cellar) to find the correct version numbers.&lt;/p&gt;
&lt;p&gt;After this intelitype should work.&lt;/p&gt;
&lt;h2 id=&#34;build-the-example&#34;&gt;Build the example&lt;/h2&gt;
&lt;p&gt;I had to modify the default example a little bit. It was complaining about not knowing which version of &lt;code&gt;pow&lt;/code&gt; to use. So I just removed the namespaces (which I wanted to do anyways as I&amp;rsquo;m getting back into C++ and remember what belongs to what package)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;ginac/ginac.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ex HermitePoly(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;symbol &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n)
{
    GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ex HKer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exp(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pow(x, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;normal(GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;pow(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;diff(HKer, x, n) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; HKer);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    GiNaC&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;symbol z(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;z&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
        std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;H_&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(z) == &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; HermitePoly(z, i) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To build I ran:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;g++ -std&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gnu++17 hermitePoly.cpp -o hermitePoly -L/usr/local/Cellar/ginac/1.7.9/lib -lginac -L/usr/local/Cellar/cln/1.3.6/lib -lcln
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, you&amp;rsquo;ll need to know your exact package versions. For me it was ginac=1.7.9 and cln=1.3.6 on May 27th, 2020.&lt;/p&gt;
&lt;p&gt;And then to execute your hard work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./hermitePoly
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I keep everything in a Makefile, so really I just type &amp;ldquo;make&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Makefile&#34; data-lang=&#34;Makefile&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; build 
	./hermitePoly

&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; 
	g++ -std&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gnu++17 hermitePoly.cpp -o hermitePoly -L/usr/local/Cellar/ginac/1.7.9/lib -lginac -L/usr/local/Cellar/cln/1.3.6/lib -lcln
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I can&amp;rsquo;t believe how easy it was, I&amp;rsquo;m excited to start calculating the orbitals!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quantum Infinite Well</title>
      <link>https://blog.c0nrad.io/posts/quantum-infinite-well/</link>
      <pubDate>Fri, 22 May 2020 12:30:26 -0400</pubDate>
      
      <guid>https://blog.c0nrad.io/posts/quantum-infinite-well/</guid>
      <description>&lt;p&gt;Calculating the stationary states of an electron in a quantum infinite well.&lt;/p&gt;
&lt;iframe class=&#34;full-width&#34; src=&#34;https://qsimp.github.io/qsimp/examples/infinite_well/&#34; style=&#34;border: 1px solid; height: 800px&#34; &gt;&lt;/iframe&gt;
&lt;br&gt;
(Or visit URL: &lt;a href=&#34;https://qsimp.github.io/qsimp/examples/infinite_well/&#34;&gt;https://qsimp.github.io/qsimp/examples/infinite_well/&lt;/a&gt;)
&lt;h2 id=&#34;particle-in-a-well&#34;&gt;Particle in a well&lt;/h2&gt;
&lt;p&gt;The above charts are calculations for a hypothetical electron stuck in a well.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a 1-dimensional well, and sides of the well are infinite in height.&lt;/p&gt;
&lt;p&gt;This model is kind of similar to a standard bouncy ball being placed into a hole, and we watch it slide back and fourth, unable to ever escape the hole. (And the hole has no friction).&lt;/p&gt;
&lt;p&gt;But there&amp;rsquo;s a couple of startling differences between the bouncy ball and particle in the well.&lt;/p&gt;
&lt;p&gt;If we imagine the bouncy ball in the well, it can have pretty much any velocity as it bounces back and forth between the sides of the walls. It could be moving at 1m/s, 10m/s, .00001 m/s. Anything works.&lt;/p&gt;
&lt;p&gt;But for our hypothetical particle, this is not possible. Not all &amp;ldquo;velocities&amp;rdquo; (or more correctly, energies) are allowed. The particle must be in a particular state, or a linear combination of states (more on linear combinations later).&lt;/p&gt;
&lt;p&gt;The hypothetical particle also can&amp;rsquo;t &amp;ldquo;sit still&amp;rdquo;. It must be at one of the energy states (or a linear combination of those states).&lt;/p&gt;
&lt;h2 id=&#34;schrödinger-equation&#34;&gt;Schrödinger Equation&lt;/h2&gt;
&lt;p&gt;In classical mechanics, we can calculate the position of the ball by using Newton&amp;rsquo;s \( F=ma \) and the equations of motion.&lt;/p&gt;
&lt;p&gt;Quantum mechanics has a similar function called the Schrödinger Equation. Using it we can learn about the particle as we go forward/backwards in time.&lt;/p&gt;
&lt;p&gt;$$ i \hbar \frac{\partial \Psi}{\partial t} = - \frac{\hbar^2}{2m} \frac{\partial^2 \Psi}{\partial x^2} + V \Psi $$&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt; \( \Psi \) is the wavefunction &lt;/li&gt;
    &lt;li&gt; \( \hbar \) is plank&#39;s constant (over 2pi) &lt;/li&gt;
    &lt;li&gt; \( m \) is the mass of the particle &lt;/li&gt;
    &lt;li&gt; \( i \) is an imaginary i (complex number) &lt;/li&gt;
    &lt;li&gt; \( V \) is the potential function  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;potential-function&#34;&gt;Potential Function&lt;/h3&gt;
&lt;p&gt;To &amp;ldquo;solve&amp;rdquo; the Schrödinger for a particular system, you need the Potential Energy function. The easiest Potential function to get started with is the Infinite Well.&lt;/p&gt;
&lt;p&gt;$$ V(x) = \begin{cases} 0, &amp;amp; 0 &amp;lt;= x &amp;lt;= a \\
\infty, &amp;amp; \text{otherwise} \end{cases}  $$&lt;/p&gt;
&lt;p&gt;It just says that the particle must stay in the well. There&amp;rsquo;s no escaping the well.&lt;/p&gt;
&lt;p&gt;Then, with that potential function, we can plug it into the Schrödinger and determine a function that &amp;ldquo;fits&amp;rdquo;. We eventually get:&lt;/p&gt;
&lt;p&gt;$$ \Psi_n (x, t) = \sqrt{ \frac{2}{a}} \sin{(\frac{n \pi}{a} x )} e^{-i (n^2 \pi^2 \hbar) / (2
m a^2 ) t} $$&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt; \( \Psi \) is the wavefunction &lt;/li&gt;
    &lt;li&gt; \( n \) is the specific stationary states &lt;/li&gt;
    &lt;li&gt; \( a \) is the width of the well &lt;/li&gt;
    &lt;li&gt; \( x \) is the &#34;position&#34; of the wave within the well &lt;/li&gt;
    &lt;li&gt; \( i \) is an imaginary i (complex number) &lt;/li&gt;
    &lt;li&gt; \( \hbar \) is plank&#39;s constant (over 2pi) &lt;/li&gt;
    &lt;li&gt; \( m \) is the mass of the electron &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;stationary-states&#34;&gt;Stationary States&lt;/h4&gt;
&lt;p&gt;Each one of the \( n \) states is an energy level that the particle can be in. But oddly in the quantum mechanics world, the particle will usually occupy a mix of different energy levels at the same time!&lt;/p&gt;
&lt;p&gt;But, when we try to figure out what energy state the particle is in, it will collapse to only one of the states.&lt;/p&gt;
&lt;p&gt;The probability of finding a particle in a particular state is ( |c_n|^2 ):&lt;/p&gt;
&lt;p&gt;$$ \Psi (x, t) = \sum_{n=1}^{\infty} c_n \sqrt{ \frac{2}{a}} \sin{(\frac{n \pi}{a} x )} e^{-i (n^2 \pi^2 \hbar) / (2 m a^2 ) t} $$&lt;/p&gt;
&lt;p&gt;Each of the states has a particular energy (as shown by the table above).&lt;/p&gt;
&lt;p&gt;The coefficients are determined by &amp;ldquo;initial wave function&amp;rdquo; such as \( \Psi (x, 0) = A x (a-x) \).  Using some Fourier series magic you can fit the equation by properly setting the \( c_n \)&amp;lsquo;s.&lt;/p&gt;
&lt;h2 id=&#34;imaginary-component&#34;&gt;Imaginary Component&lt;/h2&gt;
&lt;p&gt;In the above chart there&amp;rsquo;s two lines for every state, one for both the real and imaginary components.&lt;/p&gt;
&lt;p&gt;The imaginary component comes from the trailing \( e^i \) in the solution. The book I&amp;rsquo;m reading calls this the &amp;ldquo;time independent wiggle room&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s interesting though is that the time component doesn&amp;rsquo;t actually change the expectation values for the wave. (If we&amp;rsquo;re being 100% honest, I&amp;rsquo;m not actually sure what the time component does. It&amp;rsquo;s what I&amp;rsquo;m going to look into next. I have a feeling it&amp;rsquo;ll play a bigger role when we look at multi-particle systems that interfere with each other).&lt;/p&gt;
&lt;h2 id=&#34;expectation-values&#34;&gt;Expectation Values&lt;/h2&gt;
&lt;p&gt;Even more fun, t&amp;rsquo;s not possible to know everything about the particle in the well. We believe this to be a limitation of the universe, not our understanding of the universe.&lt;/p&gt;
&lt;p&gt;But we can still calculate &amp;ldquo;expectation&amp;rdquo; values for different properties. These properties are the result if you were to measure a bunch of particles in similar configurations and average them out.&lt;/p&gt;
&lt;p&gt;To calculate some of the expectation values we can use the following formulas:&lt;/p&gt;
&lt;h3 id=&#34;position&#34;&gt;Position&lt;/h3&gt;
&lt;p&gt;$$ \langle x \rangle = \int_{-\infty}^{\infty} \Psi^{*} [x] \Psi dx $$&lt;/p&gt;
&lt;h3 id=&#34;momentum&#34;&gt;Momentum&lt;/h3&gt;
&lt;p&gt;$$ \langle p \rangle = \int_{-\infty}^{\infty} \Psi^{*} [-i \hbar \frac{\partial}{\partial x}] \Psi dx $$&lt;/p&gt;
&lt;h3 id=&#34;uncertainty&#34;&gt;Uncertainty&lt;/h3&gt;
&lt;p&gt;We can also verify that all states adhere to the uncertainty principle:&lt;/p&gt;
&lt;p&gt;$$ \sigma_x \sigma_p \geq \frac{\hbar}{2} $$&lt;/p&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;p&gt;$$ \sigma_x = \langle x^2 \rangle - \langle x \rangle^2 $$&lt;/p&gt;
&lt;p&gt;$$ \langle x^2 \rangle = \int_{-\infty}^{\infty} \Psi^{*} [x]^2 \Psi dx $$&lt;/p&gt;
&lt;p&gt;Thankfully from the above table we can see that our calculated uncertainty is  \( \geq  \frac{\hbar}{2} \) for all states.&lt;/p&gt;
&lt;h2 id=&#34;up-next&#34;&gt;Up Next&lt;/h2&gt;
&lt;p&gt;Next up will be the quantum harmonic oscillator. I also want to learn more about how the equation evolves with time.&lt;/p&gt;
&lt;p&gt;If anything is confusing, please let me know! &lt;a href=&#34;mailto:c0nrad@c0nrad.io&#34;&gt;c0nrad@c0nrad.io&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>